/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.plaso.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TLiveClassService {

  public interface Iface {

    public List<TLiveClass> getLiveClassByTeacher(int teacherId, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public List<TLiveClass> getLiveClassByStudent(int studentId, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public TLiveClass createLiveClass(TLiveClass myLiveClass, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public boolean deleteLiveClass(int id, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public List<TTeacher> getTeacherByLiveClass(int liveClassId, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public List<TStudent> getStudentByLiveClass(int groupId, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public TLiveClassRecord uploadRecord(TLiveClassRecord rec, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public List<TLiveClassRecord> queryRecord(int student_id, int group_id, String fromTime, String toTime, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public TLiveClass getByMettingNumber(String meetingNumber, String access_token) throws TPlasoException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getLiveClassByTeacher(int teacherId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLiveClassByStudent(int studentId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createLiveClass(TLiveClass myLiveClass, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteLiveClass(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTeacherByLiveClass(int liveClassId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStudentByLiveClass(int groupId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void uploadRecord(TLiveClassRecord rec, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryRecord(int student_id, int group_id, String fromTime, String toTime, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getByMettingNumber(String meetingNumber, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<TLiveClass> getLiveClassByTeacher(int teacherId, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_getLiveClassByTeacher(teacherId, access_token);
      return recv_getLiveClassByTeacher();
    }

    public void send_getLiveClassByTeacher(int teacherId, String access_token) throws org.apache.thrift.TException
    {
      getLiveClassByTeacher_args args = new getLiveClassByTeacher_args();
      args.setTeacherId(teacherId);
      args.setAccess_token(access_token);
      sendBase("getLiveClassByTeacher", args);
    }

    public List<TLiveClass> recv_getLiveClassByTeacher() throws TPlasoException, org.apache.thrift.TException
    {
      getLiveClassByTeacher_result result = new getLiveClassByTeacher_result();
      receiveBase(result, "getLiveClassByTeacher");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLiveClassByTeacher failed: unknown result");
    }

    public List<TLiveClass> getLiveClassByStudent(int studentId, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_getLiveClassByStudent(studentId, access_token);
      return recv_getLiveClassByStudent();
    }

    public void send_getLiveClassByStudent(int studentId, String access_token) throws org.apache.thrift.TException
    {
      getLiveClassByStudent_args args = new getLiveClassByStudent_args();
      args.setStudentId(studentId);
      args.setAccess_token(access_token);
      sendBase("getLiveClassByStudent", args);
    }

    public List<TLiveClass> recv_getLiveClassByStudent() throws TPlasoException, org.apache.thrift.TException
    {
      getLiveClassByStudent_result result = new getLiveClassByStudent_result();
      receiveBase(result, "getLiveClassByStudent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLiveClassByStudent failed: unknown result");
    }

    public TLiveClass createLiveClass(TLiveClass myLiveClass, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_createLiveClass(myLiveClass, access_token);
      return recv_createLiveClass();
    }

    public void send_createLiveClass(TLiveClass myLiveClass, String access_token) throws org.apache.thrift.TException
    {
      createLiveClass_args args = new createLiveClass_args();
      args.setMyLiveClass(myLiveClass);
      args.setAccess_token(access_token);
      sendBase("createLiveClass", args);
    }

    public TLiveClass recv_createLiveClass() throws TPlasoException, org.apache.thrift.TException
    {
      createLiveClass_result result = new createLiveClass_result();
      receiveBase(result, "createLiveClass");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createLiveClass failed: unknown result");
    }

    public boolean deleteLiveClass(int id, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_deleteLiveClass(id, access_token);
      return recv_deleteLiveClass();
    }

    public void send_deleteLiveClass(int id, String access_token) throws org.apache.thrift.TException
    {
      deleteLiveClass_args args = new deleteLiveClass_args();
      args.setId(id);
      args.setAccess_token(access_token);
      sendBase("deleteLiveClass", args);
    }

    public boolean recv_deleteLiveClass() throws TPlasoException, org.apache.thrift.TException
    {
      deleteLiveClass_result result = new deleteLiveClass_result();
      receiveBase(result, "deleteLiveClass");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteLiveClass failed: unknown result");
    }

    public List<TTeacher> getTeacherByLiveClass(int liveClassId, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_getTeacherByLiveClass(liveClassId, access_token);
      return recv_getTeacherByLiveClass();
    }

    public void send_getTeacherByLiveClass(int liveClassId, String access_token) throws org.apache.thrift.TException
    {
      getTeacherByLiveClass_args args = new getTeacherByLiveClass_args();
      args.setLiveClassId(liveClassId);
      args.setAccess_token(access_token);
      sendBase("getTeacherByLiveClass", args);
    }

    public List<TTeacher> recv_getTeacherByLiveClass() throws TPlasoException, org.apache.thrift.TException
    {
      getTeacherByLiveClass_result result = new getTeacherByLiveClass_result();
      receiveBase(result, "getTeacherByLiveClass");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTeacherByLiveClass failed: unknown result");
    }

    public List<TStudent> getStudentByLiveClass(int groupId, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_getStudentByLiveClass(groupId, access_token);
      return recv_getStudentByLiveClass();
    }

    public void send_getStudentByLiveClass(int groupId, String access_token) throws org.apache.thrift.TException
    {
      getStudentByLiveClass_args args = new getStudentByLiveClass_args();
      args.setGroupId(groupId);
      args.setAccess_token(access_token);
      sendBase("getStudentByLiveClass", args);
    }

    public List<TStudent> recv_getStudentByLiveClass() throws TPlasoException, org.apache.thrift.TException
    {
      getStudentByLiveClass_result result = new getStudentByLiveClass_result();
      receiveBase(result, "getStudentByLiveClass");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStudentByLiveClass failed: unknown result");
    }

    public TLiveClassRecord uploadRecord(TLiveClassRecord rec, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_uploadRecord(rec, access_token);
      return recv_uploadRecord();
    }

    public void send_uploadRecord(TLiveClassRecord rec, String access_token) throws org.apache.thrift.TException
    {
      uploadRecord_args args = new uploadRecord_args();
      args.setRec(rec);
      args.setAccess_token(access_token);
      sendBase("uploadRecord", args);
    }

    public TLiveClassRecord recv_uploadRecord() throws TPlasoException, org.apache.thrift.TException
    {
      uploadRecord_result result = new uploadRecord_result();
      receiveBase(result, "uploadRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uploadRecord failed: unknown result");
    }

    public List<TLiveClassRecord> queryRecord(int student_id, int group_id, String fromTime, String toTime, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_queryRecord(student_id, group_id, fromTime, toTime, access_token);
      return recv_queryRecord();
    }

    public void send_queryRecord(int student_id, int group_id, String fromTime, String toTime, String access_token) throws org.apache.thrift.TException
    {
      queryRecord_args args = new queryRecord_args();
      args.setStudent_id(student_id);
      args.setGroup_id(group_id);
      args.setFromTime(fromTime);
      args.setToTime(toTime);
      args.setAccess_token(access_token);
      sendBase("queryRecord", args);
    }

    public List<TLiveClassRecord> recv_queryRecord() throws TPlasoException, org.apache.thrift.TException
    {
      queryRecord_result result = new queryRecord_result();
      receiveBase(result, "queryRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRecord failed: unknown result");
    }

    public TLiveClass getByMettingNumber(String meetingNumber, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_getByMettingNumber(meetingNumber, access_token);
      return recv_getByMettingNumber();
    }

    public void send_getByMettingNumber(String meetingNumber, String access_token) throws org.apache.thrift.TException
    {
      getByMettingNumber_args args = new getByMettingNumber_args();
      args.setMeetingNumber(meetingNumber);
      args.setAccess_token(access_token);
      sendBase("getByMettingNumber", args);
    }

    public TLiveClass recv_getByMettingNumber() throws TPlasoException, org.apache.thrift.TException
    {
      getByMettingNumber_result result = new getByMettingNumber_result();
      receiveBase(result, "getByMettingNumber");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getByMettingNumber failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getLiveClassByTeacher(int teacherId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLiveClassByTeacher_call method_call = new getLiveClassByTeacher_call(teacherId, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLiveClassByTeacher_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int teacherId;
      private String access_token;
      public getLiveClassByTeacher_call(int teacherId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.teacherId = teacherId;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLiveClassByTeacher", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLiveClassByTeacher_args args = new getLiveClassByTeacher_args();
        args.setTeacherId(teacherId);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TLiveClass> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLiveClassByTeacher();
      }
    }

    public void getLiveClassByStudent(int studentId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLiveClassByStudent_call method_call = new getLiveClassByStudent_call(studentId, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLiveClassByStudent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int studentId;
      private String access_token;
      public getLiveClassByStudent_call(int studentId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.studentId = studentId;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLiveClassByStudent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLiveClassByStudent_args args = new getLiveClassByStudent_args();
        args.setStudentId(studentId);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TLiveClass> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLiveClassByStudent();
      }
    }

    public void createLiveClass(TLiveClass myLiveClass, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createLiveClass_call method_call = new createLiveClass_call(myLiveClass, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createLiveClass_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TLiveClass myLiveClass;
      private String access_token;
      public createLiveClass_call(TLiveClass myLiveClass, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.myLiveClass = myLiveClass;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createLiveClass", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createLiveClass_args args = new createLiveClass_args();
        args.setMyLiveClass(myLiveClass);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TLiveClass getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createLiveClass();
      }
    }

    public void deleteLiveClass(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteLiveClass_call method_call = new deleteLiveClass_call(id, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteLiveClass_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      private String access_token;
      public deleteLiveClass_call(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteLiveClass", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteLiveClass_args args = new deleteLiveClass_args();
        args.setId(id);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteLiveClass();
      }
    }

    public void getTeacherByLiveClass(int liveClassId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTeacherByLiveClass_call method_call = new getTeacherByLiveClass_call(liveClassId, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTeacherByLiveClass_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int liveClassId;
      private String access_token;
      public getTeacherByLiveClass_call(int liveClassId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.liveClassId = liveClassId;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTeacherByLiveClass", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTeacherByLiveClass_args args = new getTeacherByLiveClass_args();
        args.setLiveClassId(liveClassId);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TTeacher> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTeacherByLiveClass();
      }
    }

    public void getStudentByLiveClass(int groupId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStudentByLiveClass_call method_call = new getStudentByLiveClass_call(groupId, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStudentByLiveClass_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int groupId;
      private String access_token;
      public getStudentByLiveClass_call(int groupId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupId = groupId;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStudentByLiveClass", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStudentByLiveClass_args args = new getStudentByLiveClass_args();
        args.setGroupId(groupId);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TStudent> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStudentByLiveClass();
      }
    }

    public void uploadRecord(TLiveClassRecord rec, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uploadRecord_call method_call = new uploadRecord_call(rec, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TLiveClassRecord rec;
      private String access_token;
      public uploadRecord_call(TLiveClassRecord rec, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rec = rec;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadRecord_args args = new uploadRecord_args();
        args.setRec(rec);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TLiveClassRecord getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadRecord();
      }
    }

    public void queryRecord(int student_id, int group_id, String fromTime, String toTime, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRecord_call method_call = new queryRecord_call(student_id, group_id, fromTime, toTime, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int student_id;
      private int group_id;
      private String fromTime;
      private String toTime;
      private String access_token;
      public queryRecord_call(int student_id, int group_id, String fromTime, String toTime, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.student_id = student_id;
        this.group_id = group_id;
        this.fromTime = fromTime;
        this.toTime = toTime;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRecord_args args = new queryRecord_args();
        args.setStudent_id(student_id);
        args.setGroup_id(group_id);
        args.setFromTime(fromTime);
        args.setToTime(toTime);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TLiveClassRecord> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRecord();
      }
    }

    public void getByMettingNumber(String meetingNumber, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getByMettingNumber_call method_call = new getByMettingNumber_call(meetingNumber, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getByMettingNumber_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String meetingNumber;
      private String access_token;
      public getByMettingNumber_call(String meetingNumber, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingNumber = meetingNumber;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getByMettingNumber", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getByMettingNumber_args args = new getByMettingNumber_args();
        args.setMeetingNumber(meetingNumber);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TLiveClass getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getByMettingNumber();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getLiveClassByTeacher", new getLiveClassByTeacher());
      processMap.put("getLiveClassByStudent", new getLiveClassByStudent());
      processMap.put("createLiveClass", new createLiveClass());
      processMap.put("deleteLiveClass", new deleteLiveClass());
      processMap.put("getTeacherByLiveClass", new getTeacherByLiveClass());
      processMap.put("getStudentByLiveClass", new getStudentByLiveClass());
      processMap.put("uploadRecord", new uploadRecord());
      processMap.put("queryRecord", new queryRecord());
      processMap.put("getByMettingNumber", new getByMettingNumber());
      return processMap;
    }

    public static class getLiveClassByTeacher<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLiveClassByTeacher_args> {
      public getLiveClassByTeacher() {
        super("getLiveClassByTeacher");
      }

      public getLiveClassByTeacher_args getEmptyArgsInstance() {
        return new getLiveClassByTeacher_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLiveClassByTeacher_result getResult(I iface, getLiveClassByTeacher_args args) throws org.apache.thrift.TException {
        getLiveClassByTeacher_result result = new getLiveClassByTeacher_result();
        try {
          result.success = iface.getLiveClassByTeacher(args.teacherId, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class getLiveClassByStudent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLiveClassByStudent_args> {
      public getLiveClassByStudent() {
        super("getLiveClassByStudent");
      }

      public getLiveClassByStudent_args getEmptyArgsInstance() {
        return new getLiveClassByStudent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLiveClassByStudent_result getResult(I iface, getLiveClassByStudent_args args) throws org.apache.thrift.TException {
        getLiveClassByStudent_result result = new getLiveClassByStudent_result();
        try {
          result.success = iface.getLiveClassByStudent(args.studentId, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class createLiveClass<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createLiveClass_args> {
      public createLiveClass() {
        super("createLiveClass");
      }

      public createLiveClass_args getEmptyArgsInstance() {
        return new createLiveClass_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createLiveClass_result getResult(I iface, createLiveClass_args args) throws org.apache.thrift.TException {
        createLiveClass_result result = new createLiveClass_result();
        try {
          result.success = iface.createLiveClass(args.myLiveClass, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class deleteLiveClass<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteLiveClass_args> {
      public deleteLiveClass() {
        super("deleteLiveClass");
      }

      public deleteLiveClass_args getEmptyArgsInstance() {
        return new deleteLiveClass_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteLiveClass_result getResult(I iface, deleteLiveClass_args args) throws org.apache.thrift.TException {
        deleteLiveClass_result result = new deleteLiveClass_result();
        try {
          result.success = iface.deleteLiveClass(args.id, args.access_token);
          result.setSuccessIsSet(true);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class getTeacherByLiveClass<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTeacherByLiveClass_args> {
      public getTeacherByLiveClass() {
        super("getTeacherByLiveClass");
      }

      public getTeacherByLiveClass_args getEmptyArgsInstance() {
        return new getTeacherByLiveClass_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTeacherByLiveClass_result getResult(I iface, getTeacherByLiveClass_args args) throws org.apache.thrift.TException {
        getTeacherByLiveClass_result result = new getTeacherByLiveClass_result();
        try {
          result.success = iface.getTeacherByLiveClass(args.liveClassId, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class getStudentByLiveClass<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStudentByLiveClass_args> {
      public getStudentByLiveClass() {
        super("getStudentByLiveClass");
      }

      public getStudentByLiveClass_args getEmptyArgsInstance() {
        return new getStudentByLiveClass_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStudentByLiveClass_result getResult(I iface, getStudentByLiveClass_args args) throws org.apache.thrift.TException {
        getStudentByLiveClass_result result = new getStudentByLiveClass_result();
        try {
          result.success = iface.getStudentByLiveClass(args.groupId, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class uploadRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadRecord_args> {
      public uploadRecord() {
        super("uploadRecord");
      }

      public uploadRecord_args getEmptyArgsInstance() {
        return new uploadRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public uploadRecord_result getResult(I iface, uploadRecord_args args) throws org.apache.thrift.TException {
        uploadRecord_result result = new uploadRecord_result();
        try {
          result.success = iface.uploadRecord(args.rec, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class queryRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRecord_args> {
      public queryRecord() {
        super("queryRecord");
      }

      public queryRecord_args getEmptyArgsInstance() {
        return new queryRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryRecord_result getResult(I iface, queryRecord_args args) throws org.apache.thrift.TException {
        queryRecord_result result = new queryRecord_result();
        try {
          result.success = iface.queryRecord(args.student_id, args.group_id, args.fromTime, args.toTime, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class getByMettingNumber<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getByMettingNumber_args> {
      public getByMettingNumber() {
        super("getByMettingNumber");
      }

      public getByMettingNumber_args getEmptyArgsInstance() {
        return new getByMettingNumber_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getByMettingNumber_result getResult(I iface, getByMettingNumber_args args) throws org.apache.thrift.TException {
        getByMettingNumber_result result = new getByMettingNumber_result();
        try {
          result.success = iface.getByMettingNumber(args.meetingNumber, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getLiveClassByTeacher", new getLiveClassByTeacher());
      processMap.put("getLiveClassByStudent", new getLiveClassByStudent());
      processMap.put("createLiveClass", new createLiveClass());
      processMap.put("deleteLiveClass", new deleteLiveClass());
      processMap.put("getTeacherByLiveClass", new getTeacherByLiveClass());
      processMap.put("getStudentByLiveClass", new getStudentByLiveClass());
      processMap.put("uploadRecord", new uploadRecord());
      processMap.put("queryRecord", new queryRecord());
      processMap.put("getByMettingNumber", new getByMettingNumber());
      return processMap;
    }

    public static class getLiveClassByTeacher<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLiveClassByTeacher_args, List<TLiveClass>> {
      public getLiveClassByTeacher() {
        super("getLiveClassByTeacher");
      }

      public getLiveClassByTeacher_args getEmptyArgsInstance() {
        return new getLiveClassByTeacher_args();
      }

      public AsyncMethodCallback<List<TLiveClass>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TLiveClass>>() { 
          public void onComplete(List<TLiveClass> o) {
            getLiveClassByTeacher_result result = new getLiveClassByTeacher_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLiveClassByTeacher_result result = new getLiveClassByTeacher_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLiveClassByTeacher_args args, org.apache.thrift.async.AsyncMethodCallback<List<TLiveClass>> resultHandler) throws TException {
        iface.getLiveClassByTeacher(args.teacherId, args.access_token,resultHandler);
      }
    }

    public static class getLiveClassByStudent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLiveClassByStudent_args, List<TLiveClass>> {
      public getLiveClassByStudent() {
        super("getLiveClassByStudent");
      }

      public getLiveClassByStudent_args getEmptyArgsInstance() {
        return new getLiveClassByStudent_args();
      }

      public AsyncMethodCallback<List<TLiveClass>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TLiveClass>>() { 
          public void onComplete(List<TLiveClass> o) {
            getLiveClassByStudent_result result = new getLiveClassByStudent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLiveClassByStudent_result result = new getLiveClassByStudent_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLiveClassByStudent_args args, org.apache.thrift.async.AsyncMethodCallback<List<TLiveClass>> resultHandler) throws TException {
        iface.getLiveClassByStudent(args.studentId, args.access_token,resultHandler);
      }
    }

    public static class createLiveClass<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createLiveClass_args, TLiveClass> {
      public createLiveClass() {
        super("createLiveClass");
      }

      public createLiveClass_args getEmptyArgsInstance() {
        return new createLiveClass_args();
      }

      public AsyncMethodCallback<TLiveClass> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TLiveClass>() { 
          public void onComplete(TLiveClass o) {
            createLiveClass_result result = new createLiveClass_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createLiveClass_result result = new createLiveClass_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createLiveClass_args args, org.apache.thrift.async.AsyncMethodCallback<TLiveClass> resultHandler) throws TException {
        iface.createLiveClass(args.myLiveClass, args.access_token,resultHandler);
      }
    }

    public static class deleteLiveClass<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteLiveClass_args, Boolean> {
      public deleteLiveClass() {
        super("deleteLiveClass");
      }

      public deleteLiveClass_args getEmptyArgsInstance() {
        return new deleteLiveClass_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteLiveClass_result result = new deleteLiveClass_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteLiveClass_result result = new deleteLiveClass_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteLiveClass_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteLiveClass(args.id, args.access_token,resultHandler);
      }
    }

    public static class getTeacherByLiveClass<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTeacherByLiveClass_args, List<TTeacher>> {
      public getTeacherByLiveClass() {
        super("getTeacherByLiveClass");
      }

      public getTeacherByLiveClass_args getEmptyArgsInstance() {
        return new getTeacherByLiveClass_args();
      }

      public AsyncMethodCallback<List<TTeacher>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TTeacher>>() { 
          public void onComplete(List<TTeacher> o) {
            getTeacherByLiveClass_result result = new getTeacherByLiveClass_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTeacherByLiveClass_result result = new getTeacherByLiveClass_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTeacherByLiveClass_args args, org.apache.thrift.async.AsyncMethodCallback<List<TTeacher>> resultHandler) throws TException {
        iface.getTeacherByLiveClass(args.liveClassId, args.access_token,resultHandler);
      }
    }

    public static class getStudentByLiveClass<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStudentByLiveClass_args, List<TStudent>> {
      public getStudentByLiveClass() {
        super("getStudentByLiveClass");
      }

      public getStudentByLiveClass_args getEmptyArgsInstance() {
        return new getStudentByLiveClass_args();
      }

      public AsyncMethodCallback<List<TStudent>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TStudent>>() { 
          public void onComplete(List<TStudent> o) {
            getStudentByLiveClass_result result = new getStudentByLiveClass_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStudentByLiveClass_result result = new getStudentByLiveClass_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStudentByLiveClass_args args, org.apache.thrift.async.AsyncMethodCallback<List<TStudent>> resultHandler) throws TException {
        iface.getStudentByLiveClass(args.groupId, args.access_token,resultHandler);
      }
    }

    public static class uploadRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, uploadRecord_args, TLiveClassRecord> {
      public uploadRecord() {
        super("uploadRecord");
      }

      public uploadRecord_args getEmptyArgsInstance() {
        return new uploadRecord_args();
      }

      public AsyncMethodCallback<TLiveClassRecord> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TLiveClassRecord>() { 
          public void onComplete(TLiveClassRecord o) {
            uploadRecord_result result = new uploadRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            uploadRecord_result result = new uploadRecord_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, uploadRecord_args args, org.apache.thrift.async.AsyncMethodCallback<TLiveClassRecord> resultHandler) throws TException {
        iface.uploadRecord(args.rec, args.access_token,resultHandler);
      }
    }

    public static class queryRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryRecord_args, List<TLiveClassRecord>> {
      public queryRecord() {
        super("queryRecord");
      }

      public queryRecord_args getEmptyArgsInstance() {
        return new queryRecord_args();
      }

      public AsyncMethodCallback<List<TLiveClassRecord>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TLiveClassRecord>>() { 
          public void onComplete(List<TLiveClassRecord> o) {
            queryRecord_result result = new queryRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryRecord_result result = new queryRecord_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryRecord_args args, org.apache.thrift.async.AsyncMethodCallback<List<TLiveClassRecord>> resultHandler) throws TException {
        iface.queryRecord(args.student_id, args.group_id, args.fromTime, args.toTime, args.access_token,resultHandler);
      }
    }

    public static class getByMettingNumber<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getByMettingNumber_args, TLiveClass> {
      public getByMettingNumber() {
        super("getByMettingNumber");
      }

      public getByMettingNumber_args getEmptyArgsInstance() {
        return new getByMettingNumber_args();
      }

      public AsyncMethodCallback<TLiveClass> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TLiveClass>() { 
          public void onComplete(TLiveClass o) {
            getByMettingNumber_result result = new getByMettingNumber_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getByMettingNumber_result result = new getByMettingNumber_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getByMettingNumber_args args, org.apache.thrift.async.AsyncMethodCallback<TLiveClass> resultHandler) throws TException {
        iface.getByMettingNumber(args.meetingNumber, args.access_token,resultHandler);
      }
    }

  }

  public static class getLiveClassByTeacher_args implements org.apache.thrift.TBase<getLiveClassByTeacher_args, getLiveClassByTeacher_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLiveClassByTeacher_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLiveClassByTeacher_args");

    private static final org.apache.thrift.protocol.TField TEACHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLiveClassByTeacher_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLiveClassByTeacher_argsTupleSchemeFactory());
    }

    public int teacherId; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEACHER_ID((short)1, "teacherId"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEACHER_ID
            return TEACHER_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TEACHERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEACHER_ID, new org.apache.thrift.meta_data.FieldMetaData("teacherId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLiveClassByTeacher_args.class, metaDataMap);
    }

    public getLiveClassByTeacher_args() {
    }

    public getLiveClassByTeacher_args(
      int teacherId,
      String access_token)
    {
      this();
      this.teacherId = teacherId;
      setTeacherIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLiveClassByTeacher_args(getLiveClassByTeacher_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.teacherId = other.teacherId;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public getLiveClassByTeacher_args deepCopy() {
      return new getLiveClassByTeacher_args(this);
    }

    @Override
    public void clear() {
      setTeacherIdIsSet(false);
      this.teacherId = 0;
      this.access_token = null;
    }

    public int getTeacherId() {
      return this.teacherId;
    }

    public getLiveClassByTeacher_args setTeacherId(int teacherId) {
      this.teacherId = teacherId;
      setTeacherIdIsSet(true);
      return this;
    }

    public void unsetTeacherId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEACHERID_ISSET_ID);
    }

    /** Returns true if field teacherId is set (has been assigned a value) and false otherwise */
    public boolean isSetTeacherId() {
      return EncodingUtils.testBit(__isset_bitfield, __TEACHERID_ISSET_ID);
    }

    public void setTeacherIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEACHERID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public getLiveClassByTeacher_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEACHER_ID:
        if (value == null) {
          unsetTeacherId();
        } else {
          setTeacherId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEACHER_ID:
        return Integer.valueOf(getTeacherId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEACHER_ID:
        return isSetTeacherId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLiveClassByTeacher_args)
        return this.equals((getLiveClassByTeacher_args)that);
      return false;
    }

    public boolean equals(getLiveClassByTeacher_args that) {
      if (that == null)
        return false;

      boolean this_present_teacherId = true;
      boolean that_present_teacherId = true;
      if (this_present_teacherId || that_present_teacherId) {
        if (!(this_present_teacherId && that_present_teacherId))
          return false;
        if (this.teacherId != that.teacherId)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLiveClassByTeacher_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTeacherId()).compareTo(other.isSetTeacherId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeacherId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherId, other.teacherId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLiveClassByTeacher_args(");
      boolean first = true;

      sb.append("teacherId:");
      sb.append(this.teacherId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLiveClassByTeacher_argsStandardSchemeFactory implements SchemeFactory {
      public getLiveClassByTeacher_argsStandardScheme getScheme() {
        return new getLiveClassByTeacher_argsStandardScheme();
      }
    }

    private static class getLiveClassByTeacher_argsStandardScheme extends StandardScheme<getLiveClassByTeacher_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLiveClassByTeacher_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEACHER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.teacherId = iprot.readI32();
                struct.setTeacherIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLiveClassByTeacher_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TEACHER_ID_FIELD_DESC);
        oprot.writeI32(struct.teacherId);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLiveClassByTeacher_argsTupleSchemeFactory implements SchemeFactory {
      public getLiveClassByTeacher_argsTupleScheme getScheme() {
        return new getLiveClassByTeacher_argsTupleScheme();
      }
    }

    private static class getLiveClassByTeacher_argsTupleScheme extends TupleScheme<getLiveClassByTeacher_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLiveClassByTeacher_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTeacherId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTeacherId()) {
          oprot.writeI32(struct.teacherId);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLiveClassByTeacher_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.teacherId = iprot.readI32();
          struct.setTeacherIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class getLiveClassByTeacher_result implements org.apache.thrift.TBase<getLiveClassByTeacher_result, getLiveClassByTeacher_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLiveClassByTeacher_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLiveClassByTeacher_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLiveClassByTeacher_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLiveClassByTeacher_resultTupleSchemeFactory());
    }

    public List<TLiveClass> success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLiveClass.class))));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLiveClassByTeacher_result.class, metaDataMap);
    }

    public getLiveClassByTeacher_result() {
    }

    public getLiveClassByTeacher_result(
      List<TLiveClass> success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLiveClassByTeacher_result(getLiveClassByTeacher_result other) {
      if (other.isSetSuccess()) {
        List<TLiveClass> __this__success = new ArrayList<TLiveClass>(other.success.size());
        for (TLiveClass other_element : other.success) {
          __this__success.add(new TLiveClass(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public getLiveClassByTeacher_result deepCopy() {
      return new getLiveClassByTeacher_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TLiveClass> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TLiveClass elem) {
      if (this.success == null) {
        this.success = new ArrayList<TLiveClass>();
      }
      this.success.add(elem);
    }

    public List<TLiveClass> getSuccess() {
      return this.success;
    }

    public getLiveClassByTeacher_result setSuccess(List<TLiveClass> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public getLiveClassByTeacher_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TLiveClass>)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLiveClassByTeacher_result)
        return this.equals((getLiveClassByTeacher_result)that);
      return false;
    }

    public boolean equals(getLiveClassByTeacher_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLiveClassByTeacher_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLiveClassByTeacher_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLiveClassByTeacher_resultStandardSchemeFactory implements SchemeFactory {
      public getLiveClassByTeacher_resultStandardScheme getScheme() {
        return new getLiveClassByTeacher_resultStandardScheme();
      }
    }

    private static class getLiveClassByTeacher_resultStandardScheme extends StandardScheme<getLiveClassByTeacher_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLiveClassByTeacher_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<TLiveClass>(_list112.size);
                  for (int _i113 = 0; _i113 < _list112.size; ++_i113)
                  {
                    TLiveClass _elem114;
                    _elem114 = new TLiveClass();
                    _elem114.read(iprot);
                    struct.success.add(_elem114);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLiveClassByTeacher_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TLiveClass _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLiveClassByTeacher_resultTupleSchemeFactory implements SchemeFactory {
      public getLiveClassByTeacher_resultTupleScheme getScheme() {
        return new getLiveClassByTeacher_resultTupleScheme();
      }
    }

    private static class getLiveClassByTeacher_resultTupleScheme extends TupleScheme<getLiveClassByTeacher_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLiveClassByTeacher_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TLiveClass _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLiveClassByTeacher_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TLiveClass>(_list117.size);
            for (int _i118 = 0; _i118 < _list117.size; ++_i118)
            {
              TLiveClass _elem119;
              _elem119 = new TLiveClass();
              _elem119.read(iprot);
              struct.success.add(_elem119);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class getLiveClassByStudent_args implements org.apache.thrift.TBase<getLiveClassByStudent_args, getLiveClassByStudent_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLiveClassByStudent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLiveClassByStudent_args");

    private static final org.apache.thrift.protocol.TField STUDENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("studentId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLiveClassByStudent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLiveClassByStudent_argsTupleSchemeFactory());
    }

    public int studentId; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT_ID((short)1, "studentId"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT_ID
            return STUDENT_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUDENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT_ID, new org.apache.thrift.meta_data.FieldMetaData("studentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLiveClassByStudent_args.class, metaDataMap);
    }

    public getLiveClassByStudent_args() {
    }

    public getLiveClassByStudent_args(
      int studentId,
      String access_token)
    {
      this();
      this.studentId = studentId;
      setStudentIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLiveClassByStudent_args(getLiveClassByStudent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.studentId = other.studentId;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public getLiveClassByStudent_args deepCopy() {
      return new getLiveClassByStudent_args(this);
    }

    @Override
    public void clear() {
      setStudentIdIsSet(false);
      this.studentId = 0;
      this.access_token = null;
    }

    public int getStudentId() {
      return this.studentId;
    }

    public getLiveClassByStudent_args setStudentId(int studentId) {
      this.studentId = studentId;
      setStudentIdIsSet(true);
      return this;
    }

    public void unsetStudentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUDENTID_ISSET_ID);
    }

    /** Returns true if field studentId is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUDENTID_ISSET_ID);
    }

    public void setStudentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUDENTID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public getLiveClassByStudent_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENT_ID:
        if (value == null) {
          unsetStudentId();
        } else {
          setStudentId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT_ID:
        return Integer.valueOf(getStudentId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT_ID:
        return isSetStudentId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLiveClassByStudent_args)
        return this.equals((getLiveClassByStudent_args)that);
      return false;
    }

    public boolean equals(getLiveClassByStudent_args that) {
      if (that == null)
        return false;

      boolean this_present_studentId = true;
      boolean that_present_studentId = true;
      if (this_present_studentId || that_present_studentId) {
        if (!(this_present_studentId && that_present_studentId))
          return false;
        if (this.studentId != that.studentId)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLiveClassByStudent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStudentId()).compareTo(other.isSetStudentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentId, other.studentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLiveClassByStudent_args(");
      boolean first = true;

      sb.append("studentId:");
      sb.append(this.studentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLiveClassByStudent_argsStandardSchemeFactory implements SchemeFactory {
      public getLiveClassByStudent_argsStandardScheme getScheme() {
        return new getLiveClassByStudent_argsStandardScheme();
      }
    }

    private static class getLiveClassByStudent_argsStandardScheme extends StandardScheme<getLiveClassByStudent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLiveClassByStudent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.studentId = iprot.readI32();
                struct.setStudentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLiveClassByStudent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STUDENT_ID_FIELD_DESC);
        oprot.writeI32(struct.studentId);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLiveClassByStudent_argsTupleSchemeFactory implements SchemeFactory {
      public getLiveClassByStudent_argsTupleScheme getScheme() {
        return new getLiveClassByStudent_argsTupleScheme();
      }
    }

    private static class getLiveClassByStudent_argsTupleScheme extends TupleScheme<getLiveClassByStudent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLiveClassByStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStudentId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStudentId()) {
          oprot.writeI32(struct.studentId);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLiveClassByStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.studentId = iprot.readI32();
          struct.setStudentIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class getLiveClassByStudent_result implements org.apache.thrift.TBase<getLiveClassByStudent_result, getLiveClassByStudent_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLiveClassByStudent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLiveClassByStudent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLiveClassByStudent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLiveClassByStudent_resultTupleSchemeFactory());
    }

    public List<TLiveClass> success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLiveClass.class))));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLiveClassByStudent_result.class, metaDataMap);
    }

    public getLiveClassByStudent_result() {
    }

    public getLiveClassByStudent_result(
      List<TLiveClass> success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLiveClassByStudent_result(getLiveClassByStudent_result other) {
      if (other.isSetSuccess()) {
        List<TLiveClass> __this__success = new ArrayList<TLiveClass>(other.success.size());
        for (TLiveClass other_element : other.success) {
          __this__success.add(new TLiveClass(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public getLiveClassByStudent_result deepCopy() {
      return new getLiveClassByStudent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TLiveClass> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TLiveClass elem) {
      if (this.success == null) {
        this.success = new ArrayList<TLiveClass>();
      }
      this.success.add(elem);
    }

    public List<TLiveClass> getSuccess() {
      return this.success;
    }

    public getLiveClassByStudent_result setSuccess(List<TLiveClass> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public getLiveClassByStudent_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TLiveClass>)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLiveClassByStudent_result)
        return this.equals((getLiveClassByStudent_result)that);
      return false;
    }

    public boolean equals(getLiveClassByStudent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLiveClassByStudent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLiveClassByStudent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLiveClassByStudent_resultStandardSchemeFactory implements SchemeFactory {
      public getLiveClassByStudent_resultStandardScheme getScheme() {
        return new getLiveClassByStudent_resultStandardScheme();
      }
    }

    private static class getLiveClassByStudent_resultStandardScheme extends StandardScheme<getLiveClassByStudent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLiveClassByStudent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new ArrayList<TLiveClass>(_list120.size);
                  for (int _i121 = 0; _i121 < _list120.size; ++_i121)
                  {
                    TLiveClass _elem122;
                    _elem122 = new TLiveClass();
                    _elem122.read(iprot);
                    struct.success.add(_elem122);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLiveClassByStudent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TLiveClass _iter123 : struct.success)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLiveClassByStudent_resultTupleSchemeFactory implements SchemeFactory {
      public getLiveClassByStudent_resultTupleScheme getScheme() {
        return new getLiveClassByStudent_resultTupleScheme();
      }
    }

    private static class getLiveClassByStudent_resultTupleScheme extends TupleScheme<getLiveClassByStudent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLiveClassByStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TLiveClass _iter124 : struct.success)
            {
              _iter124.write(oprot);
            }
          }
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLiveClassByStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TLiveClass>(_list125.size);
            for (int _i126 = 0; _i126 < _list125.size; ++_i126)
            {
              TLiveClass _elem127;
              _elem127 = new TLiveClass();
              _elem127.read(iprot);
              struct.success.add(_elem127);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class createLiveClass_args implements org.apache.thrift.TBase<createLiveClass_args, createLiveClass_args._Fields>, java.io.Serializable, Cloneable, Comparable<createLiveClass_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createLiveClass_args");

    private static final org.apache.thrift.protocol.TField MY_LIVE_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("myLiveClass", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createLiveClass_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createLiveClass_argsTupleSchemeFactory());
    }

    public TLiveClass myLiveClass; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MY_LIVE_CLASS((short)1, "myLiveClass"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MY_LIVE_CLASS
            return MY_LIVE_CLASS;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MY_LIVE_CLASS, new org.apache.thrift.meta_data.FieldMetaData("myLiveClass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLiveClass.class)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createLiveClass_args.class, metaDataMap);
    }

    public createLiveClass_args() {
    }

    public createLiveClass_args(
      TLiveClass myLiveClass,
      String access_token)
    {
      this();
      this.myLiveClass = myLiveClass;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLiveClass_args(createLiveClass_args other) {
      if (other.isSetMyLiveClass()) {
        this.myLiveClass = new TLiveClass(other.myLiveClass);
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public createLiveClass_args deepCopy() {
      return new createLiveClass_args(this);
    }

    @Override
    public void clear() {
      this.myLiveClass = null;
      this.access_token = null;
    }

    public TLiveClass getMyLiveClass() {
      return this.myLiveClass;
    }

    public createLiveClass_args setMyLiveClass(TLiveClass myLiveClass) {
      this.myLiveClass = myLiveClass;
      return this;
    }

    public void unsetMyLiveClass() {
      this.myLiveClass = null;
    }

    /** Returns true if field myLiveClass is set (has been assigned a value) and false otherwise */
    public boolean isSetMyLiveClass() {
      return this.myLiveClass != null;
    }

    public void setMyLiveClassIsSet(boolean value) {
      if (!value) {
        this.myLiveClass = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public createLiveClass_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MY_LIVE_CLASS:
        if (value == null) {
          unsetMyLiveClass();
        } else {
          setMyLiveClass((TLiveClass)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MY_LIVE_CLASS:
        return getMyLiveClass();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MY_LIVE_CLASS:
        return isSetMyLiveClass();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createLiveClass_args)
        return this.equals((createLiveClass_args)that);
      return false;
    }

    public boolean equals(createLiveClass_args that) {
      if (that == null)
        return false;

      boolean this_present_myLiveClass = true && this.isSetMyLiveClass();
      boolean that_present_myLiveClass = true && that.isSetMyLiveClass();
      if (this_present_myLiveClass || that_present_myLiveClass) {
        if (!(this_present_myLiveClass && that_present_myLiveClass))
          return false;
        if (!this.myLiveClass.equals(that.myLiveClass))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createLiveClass_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMyLiveClass()).compareTo(other.isSetMyLiveClass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyLiveClass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myLiveClass, other.myLiveClass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createLiveClass_args(");
      boolean first = true;

      sb.append("myLiveClass:");
      if (this.myLiveClass == null) {
        sb.append("null");
      } else {
        sb.append(this.myLiveClass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (myLiveClass != null) {
        myLiveClass.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createLiveClass_argsStandardSchemeFactory implements SchemeFactory {
      public createLiveClass_argsStandardScheme getScheme() {
        return new createLiveClass_argsStandardScheme();
      }
    }

    private static class createLiveClass_argsStandardScheme extends StandardScheme<createLiveClass_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createLiveClass_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MY_LIVE_CLASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myLiveClass = new TLiveClass();
                struct.myLiveClass.read(iprot);
                struct.setMyLiveClassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createLiveClass_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.myLiveClass != null) {
          oprot.writeFieldBegin(MY_LIVE_CLASS_FIELD_DESC);
          struct.myLiveClass.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createLiveClass_argsTupleSchemeFactory implements SchemeFactory {
      public createLiveClass_argsTupleScheme getScheme() {
        return new createLiveClass_argsTupleScheme();
      }
    }

    private static class createLiveClass_argsTupleScheme extends TupleScheme<createLiveClass_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createLiveClass_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMyLiveClass()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMyLiveClass()) {
          struct.myLiveClass.write(oprot);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createLiveClass_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.myLiveClass = new TLiveClass();
          struct.myLiveClass.read(iprot);
          struct.setMyLiveClassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class createLiveClass_result implements org.apache.thrift.TBase<createLiveClass_result, createLiveClass_result._Fields>, java.io.Serializable, Cloneable, Comparable<createLiveClass_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createLiveClass_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createLiveClass_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createLiveClass_resultTupleSchemeFactory());
    }

    public TLiveClass success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLiveClass.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createLiveClass_result.class, metaDataMap);
    }

    public createLiveClass_result() {
    }

    public createLiveClass_result(
      TLiveClass success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLiveClass_result(createLiveClass_result other) {
      if (other.isSetSuccess()) {
        this.success = new TLiveClass(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public createLiveClass_result deepCopy() {
      return new createLiveClass_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TLiveClass getSuccess() {
      return this.success;
    }

    public createLiveClass_result setSuccess(TLiveClass success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public createLiveClass_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TLiveClass)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createLiveClass_result)
        return this.equals((createLiveClass_result)that);
      return false;
    }

    public boolean equals(createLiveClass_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createLiveClass_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createLiveClass_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createLiveClass_resultStandardSchemeFactory implements SchemeFactory {
      public createLiveClass_resultStandardScheme getScheme() {
        return new createLiveClass_resultStandardScheme();
      }
    }

    private static class createLiveClass_resultStandardScheme extends StandardScheme<createLiveClass_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createLiveClass_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TLiveClass();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createLiveClass_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createLiveClass_resultTupleSchemeFactory implements SchemeFactory {
      public createLiveClass_resultTupleScheme getScheme() {
        return new createLiveClass_resultTupleScheme();
      }
    }

    private static class createLiveClass_resultTupleScheme extends TupleScheme<createLiveClass_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createLiveClass_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createLiveClass_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TLiveClass();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class deleteLiveClass_args implements org.apache.thrift.TBase<deleteLiveClass_args, deleteLiveClass_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLiveClass_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLiveClass_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLiveClass_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLiveClass_argsTupleSchemeFactory());
    }

    public int id; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLiveClass_args.class, metaDataMap);
    }

    public deleteLiveClass_args() {
    }

    public deleteLiveClass_args(
      int id,
      String access_token)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLiveClass_args(deleteLiveClass_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public deleteLiveClass_args deepCopy() {
      return new deleteLiveClass_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.access_token = null;
    }

    public int getId() {
      return this.id;
    }

    public deleteLiveClass_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public deleteLiveClass_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLiveClass_args)
        return this.equals((deleteLiveClass_args)that);
      return false;
    }

    public boolean equals(deleteLiveClass_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteLiveClass_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLiveClass_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLiveClass_argsStandardSchemeFactory implements SchemeFactory {
      public deleteLiveClass_argsStandardScheme getScheme() {
        return new deleteLiveClass_argsStandardScheme();
      }
    }

    private static class deleteLiveClass_argsStandardScheme extends StandardScheme<deleteLiveClass_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLiveClass_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLiveClass_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLiveClass_argsTupleSchemeFactory implements SchemeFactory {
      public deleteLiveClass_argsTupleScheme getScheme() {
        return new deleteLiveClass_argsTupleScheme();
      }
    }

    private static class deleteLiveClass_argsTupleScheme extends TupleScheme<deleteLiveClass_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLiveClass_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLiveClass_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class deleteLiveClass_result implements org.apache.thrift.TBase<deleteLiveClass_result, deleteLiveClass_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLiveClass_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLiveClass_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLiveClass_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLiveClass_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLiveClass_result.class, metaDataMap);
    }

    public deleteLiveClass_result() {
    }

    public deleteLiveClass_result(
      boolean success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLiveClass_result(deleteLiveClass_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public deleteLiveClass_result deepCopy() {
      return new deleteLiveClass_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.myerror = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteLiveClass_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public deleteLiveClass_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLiveClass_result)
        return this.equals((deleteLiveClass_result)that);
      return false;
    }

    public boolean equals(deleteLiveClass_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteLiveClass_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLiveClass_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLiveClass_resultStandardSchemeFactory implements SchemeFactory {
      public deleteLiveClass_resultStandardScheme getScheme() {
        return new deleteLiveClass_resultStandardScheme();
      }
    }

    private static class deleteLiveClass_resultStandardScheme extends StandardScheme<deleteLiveClass_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLiveClass_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLiveClass_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLiveClass_resultTupleSchemeFactory implements SchemeFactory {
      public deleteLiveClass_resultTupleScheme getScheme() {
        return new deleteLiveClass_resultTupleScheme();
      }
    }

    private static class deleteLiveClass_resultTupleScheme extends TupleScheme<deleteLiveClass_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLiveClass_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLiveClass_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class getTeacherByLiveClass_args implements org.apache.thrift.TBase<getTeacherByLiveClass_args, getTeacherByLiveClass_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTeacherByLiveClass_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTeacherByLiveClass_args");

    private static final org.apache.thrift.protocol.TField LIVE_CLASS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("liveClassId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTeacherByLiveClass_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTeacherByLiveClass_argsTupleSchemeFactory());
    }

    public int liveClassId; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIVE_CLASS_ID((short)1, "liveClassId"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIVE_CLASS_ID
            return LIVE_CLASS_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LIVECLASSID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIVE_CLASS_ID, new org.apache.thrift.meta_data.FieldMetaData("liveClassId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTeacherByLiveClass_args.class, metaDataMap);
    }

    public getTeacherByLiveClass_args() {
    }

    public getTeacherByLiveClass_args(
      int liveClassId,
      String access_token)
    {
      this();
      this.liveClassId = liveClassId;
      setLiveClassIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTeacherByLiveClass_args(getTeacherByLiveClass_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.liveClassId = other.liveClassId;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public getTeacherByLiveClass_args deepCopy() {
      return new getTeacherByLiveClass_args(this);
    }

    @Override
    public void clear() {
      setLiveClassIdIsSet(false);
      this.liveClassId = 0;
      this.access_token = null;
    }

    public int getLiveClassId() {
      return this.liveClassId;
    }

    public getTeacherByLiveClass_args setLiveClassId(int liveClassId) {
      this.liveClassId = liveClassId;
      setLiveClassIdIsSet(true);
      return this;
    }

    public void unsetLiveClassId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIVECLASSID_ISSET_ID);
    }

    /** Returns true if field liveClassId is set (has been assigned a value) and false otherwise */
    public boolean isSetLiveClassId() {
      return EncodingUtils.testBit(__isset_bitfield, __LIVECLASSID_ISSET_ID);
    }

    public void setLiveClassIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIVECLASSID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public getTeacherByLiveClass_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIVE_CLASS_ID:
        if (value == null) {
          unsetLiveClassId();
        } else {
          setLiveClassId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIVE_CLASS_ID:
        return Integer.valueOf(getLiveClassId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIVE_CLASS_ID:
        return isSetLiveClassId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTeacherByLiveClass_args)
        return this.equals((getTeacherByLiveClass_args)that);
      return false;
    }

    public boolean equals(getTeacherByLiveClass_args that) {
      if (that == null)
        return false;

      boolean this_present_liveClassId = true;
      boolean that_present_liveClassId = true;
      if (this_present_liveClassId || that_present_liveClassId) {
        if (!(this_present_liveClassId && that_present_liveClassId))
          return false;
        if (this.liveClassId != that.liveClassId)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTeacherByLiveClass_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLiveClassId()).compareTo(other.isSetLiveClassId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLiveClassId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveClassId, other.liveClassId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTeacherByLiveClass_args(");
      boolean first = true;

      sb.append("liveClassId:");
      sb.append(this.liveClassId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTeacherByLiveClass_argsStandardSchemeFactory implements SchemeFactory {
      public getTeacherByLiveClass_argsStandardScheme getScheme() {
        return new getTeacherByLiveClass_argsStandardScheme();
      }
    }

    private static class getTeacherByLiveClass_argsStandardScheme extends StandardScheme<getTeacherByLiveClass_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTeacherByLiveClass_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIVE_CLASS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.liveClassId = iprot.readI32();
                struct.setLiveClassIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTeacherByLiveClass_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LIVE_CLASS_ID_FIELD_DESC);
        oprot.writeI32(struct.liveClassId);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTeacherByLiveClass_argsTupleSchemeFactory implements SchemeFactory {
      public getTeacherByLiveClass_argsTupleScheme getScheme() {
        return new getTeacherByLiveClass_argsTupleScheme();
      }
    }

    private static class getTeacherByLiveClass_argsTupleScheme extends TupleScheme<getTeacherByLiveClass_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTeacherByLiveClass_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLiveClassId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLiveClassId()) {
          oprot.writeI32(struct.liveClassId);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTeacherByLiveClass_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.liveClassId = iprot.readI32();
          struct.setLiveClassIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class getTeacherByLiveClass_result implements org.apache.thrift.TBase<getTeacherByLiveClass_result, getTeacherByLiveClass_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTeacherByLiveClass_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTeacherByLiveClass_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTeacherByLiveClass_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTeacherByLiveClass_resultTupleSchemeFactory());
    }

    public List<TTeacher> success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeacher.class))));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTeacherByLiveClass_result.class, metaDataMap);
    }

    public getTeacherByLiveClass_result() {
    }

    public getTeacherByLiveClass_result(
      List<TTeacher> success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTeacherByLiveClass_result(getTeacherByLiveClass_result other) {
      if (other.isSetSuccess()) {
        List<TTeacher> __this__success = new ArrayList<TTeacher>(other.success.size());
        for (TTeacher other_element : other.success) {
          __this__success.add(new TTeacher(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public getTeacherByLiveClass_result deepCopy() {
      return new getTeacherByLiveClass_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TTeacher> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TTeacher elem) {
      if (this.success == null) {
        this.success = new ArrayList<TTeacher>();
      }
      this.success.add(elem);
    }

    public List<TTeacher> getSuccess() {
      return this.success;
    }

    public getTeacherByLiveClass_result setSuccess(List<TTeacher> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public getTeacherByLiveClass_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TTeacher>)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTeacherByLiveClass_result)
        return this.equals((getTeacherByLiveClass_result)that);
      return false;
    }

    public boolean equals(getTeacherByLiveClass_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTeacherByLiveClass_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTeacherByLiveClass_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTeacherByLiveClass_resultStandardSchemeFactory implements SchemeFactory {
      public getTeacherByLiveClass_resultStandardScheme getScheme() {
        return new getTeacherByLiveClass_resultStandardScheme();
      }
    }

    private static class getTeacherByLiveClass_resultStandardScheme extends StandardScheme<getTeacherByLiveClass_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTeacherByLiveClass_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.success = new ArrayList<TTeacher>(_list128.size);
                  for (int _i129 = 0; _i129 < _list128.size; ++_i129)
                  {
                    TTeacher _elem130;
                    _elem130 = new TTeacher();
                    _elem130.read(iprot);
                    struct.success.add(_elem130);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTeacherByLiveClass_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TTeacher _iter131 : struct.success)
            {
              _iter131.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTeacherByLiveClass_resultTupleSchemeFactory implements SchemeFactory {
      public getTeacherByLiveClass_resultTupleScheme getScheme() {
        return new getTeacherByLiveClass_resultTupleScheme();
      }
    }

    private static class getTeacherByLiveClass_resultTupleScheme extends TupleScheme<getTeacherByLiveClass_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTeacherByLiveClass_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TTeacher _iter132 : struct.success)
            {
              _iter132.write(oprot);
            }
          }
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTeacherByLiveClass_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TTeacher>(_list133.size);
            for (int _i134 = 0; _i134 < _list133.size; ++_i134)
            {
              TTeacher _elem135;
              _elem135 = new TTeacher();
              _elem135.read(iprot);
              struct.success.add(_elem135);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class getStudentByLiveClass_args implements org.apache.thrift.TBase<getStudentByLiveClass_args, getStudentByLiveClass_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStudentByLiveClass_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStudentByLiveClass_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStudentByLiveClass_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStudentByLiveClass_argsTupleSchemeFactory());
    }

    public int groupId; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "groupId"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStudentByLiveClass_args.class, metaDataMap);
    }

    public getStudentByLiveClass_args() {
    }

    public getStudentByLiveClass_args(
      int groupId,
      String access_token)
    {
      this();
      this.groupId = groupId;
      setGroupIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStudentByLiveClass_args(getStudentByLiveClass_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.groupId = other.groupId;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public getStudentByLiveClass_args deepCopy() {
      return new getStudentByLiveClass_args(this);
    }

    @Override
    public void clear() {
      setGroupIdIsSet(false);
      this.groupId = 0;
      this.access_token = null;
    }

    public int getGroupId() {
      return this.groupId;
    }

    public getStudentByLiveClass_args setGroupId(int groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public getStudentByLiveClass_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return Integer.valueOf(getGroupId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroupId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStudentByLiveClass_args)
        return this.equals((getStudentByLiveClass_args)that);
      return false;
    }

    public boolean equals(getStudentByLiveClass_args that) {
      if (that == null)
        return false;

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStudentByLiveClass_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStudentByLiveClass_args(");
      boolean first = true;

      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStudentByLiveClass_argsStandardSchemeFactory implements SchemeFactory {
      public getStudentByLiveClass_argsStandardScheme getScheme() {
        return new getStudentByLiveClass_argsStandardScheme();
      }
    }

    private static class getStudentByLiveClass_argsStandardScheme extends StandardScheme<getStudentByLiveClass_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStudentByLiveClass_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.groupId = iprot.readI32();
                struct.setGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStudentByLiveClass_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.groupId);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStudentByLiveClass_argsTupleSchemeFactory implements SchemeFactory {
      public getStudentByLiveClass_argsTupleScheme getScheme() {
        return new getStudentByLiveClass_argsTupleScheme();
      }
    }

    private static class getStudentByLiveClass_argsTupleScheme extends TupleScheme<getStudentByLiveClass_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStudentByLiveClass_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGroupId()) {
          oprot.writeI32(struct.groupId);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStudentByLiveClass_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.groupId = iprot.readI32();
          struct.setGroupIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class getStudentByLiveClass_result implements org.apache.thrift.TBase<getStudentByLiveClass_result, getStudentByLiveClass_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStudentByLiveClass_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStudentByLiveClass_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStudentByLiveClass_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStudentByLiveClass_resultTupleSchemeFactory());
    }

    public List<TStudent> success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStudent.class))));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStudentByLiveClass_result.class, metaDataMap);
    }

    public getStudentByLiveClass_result() {
    }

    public getStudentByLiveClass_result(
      List<TStudent> success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStudentByLiveClass_result(getStudentByLiveClass_result other) {
      if (other.isSetSuccess()) {
        List<TStudent> __this__success = new ArrayList<TStudent>(other.success.size());
        for (TStudent other_element : other.success) {
          __this__success.add(new TStudent(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public getStudentByLiveClass_result deepCopy() {
      return new getStudentByLiveClass_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TStudent> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TStudent elem) {
      if (this.success == null) {
        this.success = new ArrayList<TStudent>();
      }
      this.success.add(elem);
    }

    public List<TStudent> getSuccess() {
      return this.success;
    }

    public getStudentByLiveClass_result setSuccess(List<TStudent> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public getStudentByLiveClass_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TStudent>)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStudentByLiveClass_result)
        return this.equals((getStudentByLiveClass_result)that);
      return false;
    }

    public boolean equals(getStudentByLiveClass_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStudentByLiveClass_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStudentByLiveClass_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStudentByLiveClass_resultStandardSchemeFactory implements SchemeFactory {
      public getStudentByLiveClass_resultStandardScheme getScheme() {
        return new getStudentByLiveClass_resultStandardScheme();
      }
    }

    private static class getStudentByLiveClass_resultStandardScheme extends StandardScheme<getStudentByLiveClass_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStudentByLiveClass_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                  struct.success = new ArrayList<TStudent>(_list136.size);
                  for (int _i137 = 0; _i137 < _list136.size; ++_i137)
                  {
                    TStudent _elem138;
                    _elem138 = new TStudent();
                    _elem138.read(iprot);
                    struct.success.add(_elem138);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStudentByLiveClass_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TStudent _iter139 : struct.success)
            {
              _iter139.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStudentByLiveClass_resultTupleSchemeFactory implements SchemeFactory {
      public getStudentByLiveClass_resultTupleScheme getScheme() {
        return new getStudentByLiveClass_resultTupleScheme();
      }
    }

    private static class getStudentByLiveClass_resultTupleScheme extends TupleScheme<getStudentByLiveClass_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStudentByLiveClass_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TStudent _iter140 : struct.success)
            {
              _iter140.write(oprot);
            }
          }
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStudentByLiveClass_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TStudent>(_list141.size);
            for (int _i142 = 0; _i142 < _list141.size; ++_i142)
            {
              TStudent _elem143;
              _elem143 = new TStudent();
              _elem143.read(iprot);
              struct.success.add(_elem143);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class uploadRecord_args implements org.apache.thrift.TBase<uploadRecord_args, uploadRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<uploadRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadRecord_args");

    private static final org.apache.thrift.protocol.TField REC_FIELD_DESC = new org.apache.thrift.protocol.TField("rec", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadRecord_argsTupleSchemeFactory());
    }

    public TLiveClassRecord rec; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REC((short)1, "rec"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REC
            return REC;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REC, new org.apache.thrift.meta_data.FieldMetaData("rec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLiveClassRecord.class)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadRecord_args.class, metaDataMap);
    }

    public uploadRecord_args() {
    }

    public uploadRecord_args(
      TLiveClassRecord rec,
      String access_token)
    {
      this();
      this.rec = rec;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadRecord_args(uploadRecord_args other) {
      if (other.isSetRec()) {
        this.rec = new TLiveClassRecord(other.rec);
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public uploadRecord_args deepCopy() {
      return new uploadRecord_args(this);
    }

    @Override
    public void clear() {
      this.rec = null;
      this.access_token = null;
    }

    public TLiveClassRecord getRec() {
      return this.rec;
    }

    public uploadRecord_args setRec(TLiveClassRecord rec) {
      this.rec = rec;
      return this;
    }

    public void unsetRec() {
      this.rec = null;
    }

    /** Returns true if field rec is set (has been assigned a value) and false otherwise */
    public boolean isSetRec() {
      return this.rec != null;
    }

    public void setRecIsSet(boolean value) {
      if (!value) {
        this.rec = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public uploadRecord_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REC:
        if (value == null) {
          unsetRec();
        } else {
          setRec((TLiveClassRecord)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REC:
        return getRec();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REC:
        return isSetRec();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadRecord_args)
        return this.equals((uploadRecord_args)that);
      return false;
    }

    public boolean equals(uploadRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_rec = true && this.isSetRec();
      boolean that_present_rec = true && that.isSetRec();
      if (this_present_rec || that_present_rec) {
        if (!(this_present_rec && that_present_rec))
          return false;
        if (!this.rec.equals(that.rec))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(uploadRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRec()).compareTo(other.isSetRec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rec, other.rec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadRecord_args(");
      boolean first = true;

      sb.append("rec:");
      if (this.rec == null) {
        sb.append("null");
      } else {
        sb.append(this.rec);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rec != null) {
        rec.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadRecord_argsStandardSchemeFactory implements SchemeFactory {
      public uploadRecord_argsStandardScheme getScheme() {
        return new uploadRecord_argsStandardScheme();
      }
    }

    private static class uploadRecord_argsStandardScheme extends StandardScheme<uploadRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rec = new TLiveClassRecord();
                struct.rec.read(iprot);
                struct.setRecIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rec != null) {
          oprot.writeFieldBegin(REC_FIELD_DESC);
          struct.rec.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadRecord_argsTupleSchemeFactory implements SchemeFactory {
      public uploadRecord_argsTupleScheme getScheme() {
        return new uploadRecord_argsTupleScheme();
      }
    }

    private static class uploadRecord_argsTupleScheme extends TupleScheme<uploadRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRec()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRec()) {
          struct.rec.write(oprot);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.rec = new TLiveClassRecord();
          struct.rec.read(iprot);
          struct.setRecIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class uploadRecord_result implements org.apache.thrift.TBase<uploadRecord_result, uploadRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<uploadRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadRecord_resultTupleSchemeFactory());
    }

    public TLiveClassRecord success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLiveClassRecord.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadRecord_result.class, metaDataMap);
    }

    public uploadRecord_result() {
    }

    public uploadRecord_result(
      TLiveClassRecord success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadRecord_result(uploadRecord_result other) {
      if (other.isSetSuccess()) {
        this.success = new TLiveClassRecord(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public uploadRecord_result deepCopy() {
      return new uploadRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TLiveClassRecord getSuccess() {
      return this.success;
    }

    public uploadRecord_result setSuccess(TLiveClassRecord success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public uploadRecord_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TLiveClassRecord)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadRecord_result)
        return this.equals((uploadRecord_result)that);
      return false;
    }

    public boolean equals(uploadRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(uploadRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadRecord_resultStandardSchemeFactory implements SchemeFactory {
      public uploadRecord_resultStandardScheme getScheme() {
        return new uploadRecord_resultStandardScheme();
      }
    }

    private static class uploadRecord_resultStandardScheme extends StandardScheme<uploadRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TLiveClassRecord();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadRecord_resultTupleSchemeFactory implements SchemeFactory {
      public uploadRecord_resultTupleScheme getScheme() {
        return new uploadRecord_resultTupleScheme();
      }
    }

    private static class uploadRecord_resultTupleScheme extends TupleScheme<uploadRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TLiveClassRecord();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class queryRecord_args implements org.apache.thrift.TBase<queryRecord_args, queryRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRecord_args");

    private static final org.apache.thrift.protocol.TField STUDENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("student_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("group_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField FROM_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromTime", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TO_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("toTime", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRecord_argsTupleSchemeFactory());
    }

    public int student_id; // required
    public int group_id; // required
    public String fromTime; // required
    public String toTime; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT_ID((short)1, "student_id"),
      GROUP_ID((short)2, "group_id"),
      FROM_TIME((short)3, "fromTime"),
      TO_TIME((short)4, "toTime"),
      ACCESS_TOKEN((short)5, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT_ID
            return STUDENT_ID;
          case 2: // GROUP_ID
            return GROUP_ID;
          case 3: // FROM_TIME
            return FROM_TIME;
          case 4: // TO_TIME
            return TO_TIME;
          case 5: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUDENT_ID_ISSET_ID = 0;
    private static final int __GROUP_ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT_ID, new org.apache.thrift.meta_data.FieldMetaData("student_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("group_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FROM_TIME, new org.apache.thrift.meta_data.FieldMetaData("fromTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TO_TIME, new org.apache.thrift.meta_data.FieldMetaData("toTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRecord_args.class, metaDataMap);
    }

    public queryRecord_args() {
    }

    public queryRecord_args(
      int student_id,
      int group_id,
      String fromTime,
      String toTime,
      String access_token)
    {
      this();
      this.student_id = student_id;
      setStudent_idIsSet(true);
      this.group_id = group_id;
      setGroup_idIsSet(true);
      this.fromTime = fromTime;
      this.toTime = toTime;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRecord_args(queryRecord_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.student_id = other.student_id;
      this.group_id = other.group_id;
      if (other.isSetFromTime()) {
        this.fromTime = other.fromTime;
      }
      if (other.isSetToTime()) {
        this.toTime = other.toTime;
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public queryRecord_args deepCopy() {
      return new queryRecord_args(this);
    }

    @Override
    public void clear() {
      setStudent_idIsSet(false);
      this.student_id = 0;
      setGroup_idIsSet(false);
      this.group_id = 0;
      this.fromTime = null;
      this.toTime = null;
      this.access_token = null;
    }

    public int getStudent_id() {
      return this.student_id;
    }

    public queryRecord_args setStudent_id(int student_id) {
      this.student_id = student_id;
      setStudent_idIsSet(true);
      return this;
    }

    public void unsetStudent_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUDENT_ID_ISSET_ID);
    }

    /** Returns true if field student_id is set (has been assigned a value) and false otherwise */
    public boolean isSetStudent_id() {
      return EncodingUtils.testBit(__isset_bitfield, __STUDENT_ID_ISSET_ID);
    }

    public void setStudent_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUDENT_ID_ISSET_ID, value);
    }

    public int getGroup_id() {
      return this.group_id;
    }

    public queryRecord_args setGroup_id(int group_id) {
      this.group_id = group_id;
      setGroup_idIsSet(true);
      return this;
    }

    public void unsetGroup_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
    }

    /** Returns true if field group_id is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup_id() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
    }

    public void setGroup_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUP_ID_ISSET_ID, value);
    }

    public String getFromTime() {
      return this.fromTime;
    }

    public queryRecord_args setFromTime(String fromTime) {
      this.fromTime = fromTime;
      return this;
    }

    public void unsetFromTime() {
      this.fromTime = null;
    }

    /** Returns true if field fromTime is set (has been assigned a value) and false otherwise */
    public boolean isSetFromTime() {
      return this.fromTime != null;
    }

    public void setFromTimeIsSet(boolean value) {
      if (!value) {
        this.fromTime = null;
      }
    }

    public String getToTime() {
      return this.toTime;
    }

    public queryRecord_args setToTime(String toTime) {
      this.toTime = toTime;
      return this;
    }

    public void unsetToTime() {
      this.toTime = null;
    }

    /** Returns true if field toTime is set (has been assigned a value) and false otherwise */
    public boolean isSetToTime() {
      return this.toTime != null;
    }

    public void setToTimeIsSet(boolean value) {
      if (!value) {
        this.toTime = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public queryRecord_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENT_ID:
        if (value == null) {
          unsetStudent_id();
        } else {
          setStudent_id((Integer)value);
        }
        break;

      case GROUP_ID:
        if (value == null) {
          unsetGroup_id();
        } else {
          setGroup_id((Integer)value);
        }
        break;

      case FROM_TIME:
        if (value == null) {
          unsetFromTime();
        } else {
          setFromTime((String)value);
        }
        break;

      case TO_TIME:
        if (value == null) {
          unsetToTime();
        } else {
          setToTime((String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT_ID:
        return Integer.valueOf(getStudent_id());

      case GROUP_ID:
        return Integer.valueOf(getGroup_id());

      case FROM_TIME:
        return getFromTime();

      case TO_TIME:
        return getToTime();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT_ID:
        return isSetStudent_id();
      case GROUP_ID:
        return isSetGroup_id();
      case FROM_TIME:
        return isSetFromTime();
      case TO_TIME:
        return isSetToTime();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRecord_args)
        return this.equals((queryRecord_args)that);
      return false;
    }

    public boolean equals(queryRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_student_id = true;
      boolean that_present_student_id = true;
      if (this_present_student_id || that_present_student_id) {
        if (!(this_present_student_id && that_present_student_id))
          return false;
        if (this.student_id != that.student_id)
          return false;
      }

      boolean this_present_group_id = true;
      boolean that_present_group_id = true;
      if (this_present_group_id || that_present_group_id) {
        if (!(this_present_group_id && that_present_group_id))
          return false;
        if (this.group_id != that.group_id)
          return false;
      }

      boolean this_present_fromTime = true && this.isSetFromTime();
      boolean that_present_fromTime = true && that.isSetFromTime();
      if (this_present_fromTime || that_present_fromTime) {
        if (!(this_present_fromTime && that_present_fromTime))
          return false;
        if (!this.fromTime.equals(that.fromTime))
          return false;
      }

      boolean this_present_toTime = true && this.isSetToTime();
      boolean that_present_toTime = true && that.isSetToTime();
      if (this_present_toTime || that_present_toTime) {
        if (!(this_present_toTime && that_present_toTime))
          return false;
        if (!this.toTime.equals(that.toTime))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStudent_id()).compareTo(other.isSetStudent_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudent_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.student_id, other.student_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroup_id()).compareTo(other.isSetGroup_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_id, other.group_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFromTime()).compareTo(other.isSetFromTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromTime, other.fromTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToTime()).compareTo(other.isSetToTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toTime, other.toTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRecord_args(");
      boolean first = true;

      sb.append("student_id:");
      sb.append(this.student_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("group_id:");
      sb.append(this.group_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromTime:");
      if (this.fromTime == null) {
        sb.append("null");
      } else {
        sb.append(this.fromTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("toTime:");
      if (this.toTime == null) {
        sb.append("null");
      } else {
        sb.append(this.toTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRecord_argsStandardSchemeFactory implements SchemeFactory {
      public queryRecord_argsStandardScheme getScheme() {
        return new queryRecord_argsStandardScheme();
      }
    }

    private static class queryRecord_argsStandardScheme extends StandardScheme<queryRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.student_id = iprot.readI32();
                struct.setStudent_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.group_id = iprot.readI32();
                struct.setGroup_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FROM_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fromTime = iprot.readString();
                struct.setFromTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TO_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.toTime = iprot.readString();
                struct.setToTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STUDENT_ID_FIELD_DESC);
        oprot.writeI32(struct.student_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.group_id);
        oprot.writeFieldEnd();
        if (struct.fromTime != null) {
          oprot.writeFieldBegin(FROM_TIME_FIELD_DESC);
          oprot.writeString(struct.fromTime);
          oprot.writeFieldEnd();
        }
        if (struct.toTime != null) {
          oprot.writeFieldBegin(TO_TIME_FIELD_DESC);
          oprot.writeString(struct.toTime);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRecord_argsTupleSchemeFactory implements SchemeFactory {
      public queryRecord_argsTupleScheme getScheme() {
        return new queryRecord_argsTupleScheme();
      }
    }

    private static class queryRecord_argsTupleScheme extends TupleScheme<queryRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStudent_id()) {
          optionals.set(0);
        }
        if (struct.isSetGroup_id()) {
          optionals.set(1);
        }
        if (struct.isSetFromTime()) {
          optionals.set(2);
        }
        if (struct.isSetToTime()) {
          optionals.set(3);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetStudent_id()) {
          oprot.writeI32(struct.student_id);
        }
        if (struct.isSetGroup_id()) {
          oprot.writeI32(struct.group_id);
        }
        if (struct.isSetFromTime()) {
          oprot.writeString(struct.fromTime);
        }
        if (struct.isSetToTime()) {
          oprot.writeString(struct.toTime);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.student_id = iprot.readI32();
          struct.setStudent_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.group_id = iprot.readI32();
          struct.setGroup_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fromTime = iprot.readString();
          struct.setFromTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.toTime = iprot.readString();
          struct.setToTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class queryRecord_result implements org.apache.thrift.TBase<queryRecord_result, queryRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRecord_resultTupleSchemeFactory());
    }

    public List<TLiveClassRecord> success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLiveClassRecord.class))));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRecord_result.class, metaDataMap);
    }

    public queryRecord_result() {
    }

    public queryRecord_result(
      List<TLiveClassRecord> success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRecord_result(queryRecord_result other) {
      if (other.isSetSuccess()) {
        List<TLiveClassRecord> __this__success = new ArrayList<TLiveClassRecord>(other.success.size());
        for (TLiveClassRecord other_element : other.success) {
          __this__success.add(new TLiveClassRecord(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public queryRecord_result deepCopy() {
      return new queryRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TLiveClassRecord> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TLiveClassRecord elem) {
      if (this.success == null) {
        this.success = new ArrayList<TLiveClassRecord>();
      }
      this.success.add(elem);
    }

    public List<TLiveClassRecord> getSuccess() {
      return this.success;
    }

    public queryRecord_result setSuccess(List<TLiveClassRecord> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public queryRecord_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TLiveClassRecord>)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRecord_result)
        return this.equals((queryRecord_result)that);
      return false;
    }

    public boolean equals(queryRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRecord_resultStandardSchemeFactory implements SchemeFactory {
      public queryRecord_resultStandardScheme getScheme() {
        return new queryRecord_resultStandardScheme();
      }
    }

    private static class queryRecord_resultStandardScheme extends StandardScheme<queryRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new ArrayList<TLiveClassRecord>(_list144.size);
                  for (int _i145 = 0; _i145 < _list144.size; ++_i145)
                  {
                    TLiveClassRecord _elem146;
                    _elem146 = new TLiveClassRecord();
                    _elem146.read(iprot);
                    struct.success.add(_elem146);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TLiveClassRecord _iter147 : struct.success)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRecord_resultTupleSchemeFactory implements SchemeFactory {
      public queryRecord_resultTupleScheme getScheme() {
        return new queryRecord_resultTupleScheme();
      }
    }

    private static class queryRecord_resultTupleScheme extends TupleScheme<queryRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TLiveClassRecord _iter148 : struct.success)
            {
              _iter148.write(oprot);
            }
          }
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TLiveClassRecord>(_list149.size);
            for (int _i150 = 0; _i150 < _list149.size; ++_i150)
            {
              TLiveClassRecord _elem151;
              _elem151 = new TLiveClassRecord();
              _elem151.read(iprot);
              struct.success.add(_elem151);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class getByMettingNumber_args implements org.apache.thrift.TBase<getByMettingNumber_args, getByMettingNumber_args._Fields>, java.io.Serializable, Cloneable, Comparable<getByMettingNumber_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getByMettingNumber_args");

    private static final org.apache.thrift.protocol.TField MEETING_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingNumber", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getByMettingNumber_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getByMettingNumber_argsTupleSchemeFactory());
    }

    public String meetingNumber; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETING_NUMBER((short)1, "meetingNumber"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEETING_NUMBER
            return MEETING_NUMBER;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETING_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("meetingNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getByMettingNumber_args.class, metaDataMap);
    }

    public getByMettingNumber_args() {
    }

    public getByMettingNumber_args(
      String meetingNumber,
      String access_token)
    {
      this();
      this.meetingNumber = meetingNumber;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getByMettingNumber_args(getByMettingNumber_args other) {
      if (other.isSetMeetingNumber()) {
        this.meetingNumber = other.meetingNumber;
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public getByMettingNumber_args deepCopy() {
      return new getByMettingNumber_args(this);
    }

    @Override
    public void clear() {
      this.meetingNumber = null;
      this.access_token = null;
    }

    public String getMeetingNumber() {
      return this.meetingNumber;
    }

    public getByMettingNumber_args setMeetingNumber(String meetingNumber) {
      this.meetingNumber = meetingNumber;
      return this;
    }

    public void unsetMeetingNumber() {
      this.meetingNumber = null;
    }

    /** Returns true if field meetingNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingNumber() {
      return this.meetingNumber != null;
    }

    public void setMeetingNumberIsSet(boolean value) {
      if (!value) {
        this.meetingNumber = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public getByMettingNumber_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEETING_NUMBER:
        if (value == null) {
          unsetMeetingNumber();
        } else {
          setMeetingNumber((String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETING_NUMBER:
        return getMeetingNumber();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEETING_NUMBER:
        return isSetMeetingNumber();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getByMettingNumber_args)
        return this.equals((getByMettingNumber_args)that);
      return false;
    }

    public boolean equals(getByMettingNumber_args that) {
      if (that == null)
        return false;

      boolean this_present_meetingNumber = true && this.isSetMeetingNumber();
      boolean that_present_meetingNumber = true && that.isSetMeetingNumber();
      if (this_present_meetingNumber || that_present_meetingNumber) {
        if (!(this_present_meetingNumber && that_present_meetingNumber))
          return false;
        if (!this.meetingNumber.equals(that.meetingNumber))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getByMettingNumber_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMeetingNumber()).compareTo(other.isSetMeetingNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingNumber, other.meetingNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getByMettingNumber_args(");
      boolean first = true;

      sb.append("meetingNumber:");
      if (this.meetingNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.meetingNumber);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getByMettingNumber_argsStandardSchemeFactory implements SchemeFactory {
      public getByMettingNumber_argsStandardScheme getScheme() {
        return new getByMettingNumber_argsStandardScheme();
      }
    }

    private static class getByMettingNumber_argsStandardScheme extends StandardScheme<getByMettingNumber_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getByMettingNumber_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEETING_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.meetingNumber = iprot.readString();
                struct.setMeetingNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getByMettingNumber_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.meetingNumber != null) {
          oprot.writeFieldBegin(MEETING_NUMBER_FIELD_DESC);
          oprot.writeString(struct.meetingNumber);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getByMettingNumber_argsTupleSchemeFactory implements SchemeFactory {
      public getByMettingNumber_argsTupleScheme getScheme() {
        return new getByMettingNumber_argsTupleScheme();
      }
    }

    private static class getByMettingNumber_argsTupleScheme extends TupleScheme<getByMettingNumber_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getByMettingNumber_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMeetingNumber()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMeetingNumber()) {
          oprot.writeString(struct.meetingNumber);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getByMettingNumber_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.meetingNumber = iprot.readString();
          struct.setMeetingNumberIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class getByMettingNumber_result implements org.apache.thrift.TBase<getByMettingNumber_result, getByMettingNumber_result._Fields>, java.io.Serializable, Cloneable, Comparable<getByMettingNumber_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getByMettingNumber_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getByMettingNumber_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getByMettingNumber_resultTupleSchemeFactory());
    }

    public TLiveClass success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLiveClass.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getByMettingNumber_result.class, metaDataMap);
    }

    public getByMettingNumber_result() {
    }

    public getByMettingNumber_result(
      TLiveClass success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getByMettingNumber_result(getByMettingNumber_result other) {
      if (other.isSetSuccess()) {
        this.success = new TLiveClass(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public getByMettingNumber_result deepCopy() {
      return new getByMettingNumber_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TLiveClass getSuccess() {
      return this.success;
    }

    public getByMettingNumber_result setSuccess(TLiveClass success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public getByMettingNumber_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TLiveClass)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getByMettingNumber_result)
        return this.equals((getByMettingNumber_result)that);
      return false;
    }

    public boolean equals(getByMettingNumber_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getByMettingNumber_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getByMettingNumber_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getByMettingNumber_resultStandardSchemeFactory implements SchemeFactory {
      public getByMettingNumber_resultStandardScheme getScheme() {
        return new getByMettingNumber_resultStandardScheme();
      }
    }

    private static class getByMettingNumber_resultStandardScheme extends StandardScheme<getByMettingNumber_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getByMettingNumber_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TLiveClass();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getByMettingNumber_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getByMettingNumber_resultTupleSchemeFactory implements SchemeFactory {
      public getByMettingNumber_resultTupleScheme getScheme() {
        return new getByMettingNumber_resultTupleScheme();
      }
    }

    private static class getByMettingNumber_resultTupleScheme extends TupleScheme<getByMettingNumber_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getByMettingNumber_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getByMettingNumber_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TLiveClass();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

}
