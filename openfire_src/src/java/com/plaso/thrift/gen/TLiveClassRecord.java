/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.plaso.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TLiveClassRecord implements org.apache.thrift.TBase<TLiveClassRecord, TLiveClassRecord._Fields>, java.io.Serializable, Cloneable, Comparable<TLiveClassRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLiveClassRecord");

  private static final org.apache.thrift.protocol.TField MYID_FIELD_DESC = new org.apache.thrift.protocol.TField("myid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LIVECLASS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("liveclassId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TEACHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SHORT_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("shortDesc", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LONG_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("longDesc", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ICON_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("iconUrl", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DOWNLOAD_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("downloadUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RECORD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("recordTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField RECORD_PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("recordPeriod", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createAt", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TEACHER_OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherObj", org.apache.thrift.protocol.TType.STRUCT, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TLiveClassRecordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TLiveClassRecordTupleSchemeFactory());
  }

  public int myid; // required
  public int liveclassId; // required
  public int teacherId; // required
  public String shortDesc; // required
  public String longDesc; // required
  public String iconUrl; // required
  public String downloadUrl; // required
  public String recordTime; // required
  public int recordPeriod; // required
  public String createAt; // required
  public TTeacher teacherObj; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MYID((short)1, "myid"),
    LIVECLASS_ID((short)2, "liveclassId"),
    TEACHER_ID((short)3, "teacherId"),
    SHORT_DESC((short)4, "shortDesc"),
    LONG_DESC((short)5, "longDesc"),
    ICON_URL((short)6, "iconUrl"),
    DOWNLOAD_URL((short)7, "downloadUrl"),
    RECORD_TIME((short)8, "recordTime"),
    RECORD_PERIOD((short)9, "recordPeriod"),
    CREATE_AT((short)10, "createAt"),
    TEACHER_OBJ((short)11, "teacherObj");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MYID
          return MYID;
        case 2: // LIVECLASS_ID
          return LIVECLASS_ID;
        case 3: // TEACHER_ID
          return TEACHER_ID;
        case 4: // SHORT_DESC
          return SHORT_DESC;
        case 5: // LONG_DESC
          return LONG_DESC;
        case 6: // ICON_URL
          return ICON_URL;
        case 7: // DOWNLOAD_URL
          return DOWNLOAD_URL;
        case 8: // RECORD_TIME
          return RECORD_TIME;
        case 9: // RECORD_PERIOD
          return RECORD_PERIOD;
        case 10: // CREATE_AT
          return CREATE_AT;
        case 11: // TEACHER_OBJ
          return TEACHER_OBJ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MYID_ISSET_ID = 0;
  private static final int __LIVECLASSID_ISSET_ID = 1;
  private static final int __TEACHERID_ISSET_ID = 2;
  private static final int __RECORDPERIOD_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MYID, new org.apache.thrift.meta_data.FieldMetaData("myid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIVECLASS_ID, new org.apache.thrift.meta_data.FieldMetaData("liveclassId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEACHER_ID, new org.apache.thrift.meta_data.FieldMetaData("teacherId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHORT_DESC, new org.apache.thrift.meta_data.FieldMetaData("shortDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LONG_DESC, new org.apache.thrift.meta_data.FieldMetaData("longDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON_URL, new org.apache.thrift.meta_data.FieldMetaData("iconUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOWNLOAD_URL, new org.apache.thrift.meta_data.FieldMetaData("downloadUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORD_TIME, new org.apache.thrift.meta_data.FieldMetaData("recordTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORD_PERIOD, new org.apache.thrift.meta_data.FieldMetaData("recordPeriod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_AT, new org.apache.thrift.meta_data.FieldMetaData("createAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEACHER_OBJ, new org.apache.thrift.meta_data.FieldMetaData("teacherObj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeacher.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLiveClassRecord.class, metaDataMap);
  }

  public TLiveClassRecord() {
  }

  public TLiveClassRecord(
    int myid,
    int liveclassId,
    int teacherId,
    String shortDesc,
    String longDesc,
    String iconUrl,
    String downloadUrl,
    String recordTime,
    int recordPeriod,
    String createAt,
    TTeacher teacherObj)
  {
    this();
    this.myid = myid;
    setMyidIsSet(true);
    this.liveclassId = liveclassId;
    setLiveclassIdIsSet(true);
    this.teacherId = teacherId;
    setTeacherIdIsSet(true);
    this.shortDesc = shortDesc;
    this.longDesc = longDesc;
    this.iconUrl = iconUrl;
    this.downloadUrl = downloadUrl;
    this.recordTime = recordTime;
    this.recordPeriod = recordPeriod;
    setRecordPeriodIsSet(true);
    this.createAt = createAt;
    this.teacherObj = teacherObj;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TLiveClassRecord(TLiveClassRecord other) {
    __isset_bitfield = other.__isset_bitfield;
    this.myid = other.myid;
    this.liveclassId = other.liveclassId;
    this.teacherId = other.teacherId;
    if (other.isSetShortDesc()) {
      this.shortDesc = other.shortDesc;
    }
    if (other.isSetLongDesc()) {
      this.longDesc = other.longDesc;
    }
    if (other.isSetIconUrl()) {
      this.iconUrl = other.iconUrl;
    }
    if (other.isSetDownloadUrl()) {
      this.downloadUrl = other.downloadUrl;
    }
    if (other.isSetRecordTime()) {
      this.recordTime = other.recordTime;
    }
    this.recordPeriod = other.recordPeriod;
    if (other.isSetCreateAt()) {
      this.createAt = other.createAt;
    }
    if (other.isSetTeacherObj()) {
      this.teacherObj = new TTeacher(other.teacherObj);
    }
  }

  public TLiveClassRecord deepCopy() {
    return new TLiveClassRecord(this);
  }

  @Override
  public void clear() {
    setMyidIsSet(false);
    this.myid = 0;
    setLiveclassIdIsSet(false);
    this.liveclassId = 0;
    setTeacherIdIsSet(false);
    this.teacherId = 0;
    this.shortDesc = null;
    this.longDesc = null;
    this.iconUrl = null;
    this.downloadUrl = null;
    this.recordTime = null;
    setRecordPeriodIsSet(false);
    this.recordPeriod = 0;
    this.createAt = null;
    this.teacherObj = null;
  }

  public int getMyid() {
    return this.myid;
  }

  public TLiveClassRecord setMyid(int myid) {
    this.myid = myid;
    setMyidIsSet(true);
    return this;
  }

  public void unsetMyid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYID_ISSET_ID);
  }

  /** Returns true if field myid is set (has been assigned a value) and false otherwise */
  public boolean isSetMyid() {
    return EncodingUtils.testBit(__isset_bitfield, __MYID_ISSET_ID);
  }

  public void setMyidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYID_ISSET_ID, value);
  }

  public int getLiveclassId() {
    return this.liveclassId;
  }

  public TLiveClassRecord setLiveclassId(int liveclassId) {
    this.liveclassId = liveclassId;
    setLiveclassIdIsSet(true);
    return this;
  }

  public void unsetLiveclassId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIVECLASSID_ISSET_ID);
  }

  /** Returns true if field liveclassId is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveclassId() {
    return EncodingUtils.testBit(__isset_bitfield, __LIVECLASSID_ISSET_ID);
  }

  public void setLiveclassIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIVECLASSID_ISSET_ID, value);
  }

  public int getTeacherId() {
    return this.teacherId;
  }

  public TLiveClassRecord setTeacherId(int teacherId) {
    this.teacherId = teacherId;
    setTeacherIdIsSet(true);
    return this;
  }

  public void unsetTeacherId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEACHERID_ISSET_ID);
  }

  /** Returns true if field teacherId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherId() {
    return EncodingUtils.testBit(__isset_bitfield, __TEACHERID_ISSET_ID);
  }

  public void setTeacherIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEACHERID_ISSET_ID, value);
  }

  public String getShortDesc() {
    return this.shortDesc;
  }

  public TLiveClassRecord setShortDesc(String shortDesc) {
    this.shortDesc = shortDesc;
    return this;
  }

  public void unsetShortDesc() {
    this.shortDesc = null;
  }

  /** Returns true if field shortDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetShortDesc() {
    return this.shortDesc != null;
  }

  public void setShortDescIsSet(boolean value) {
    if (!value) {
      this.shortDesc = null;
    }
  }

  public String getLongDesc() {
    return this.longDesc;
  }

  public TLiveClassRecord setLongDesc(String longDesc) {
    this.longDesc = longDesc;
    return this;
  }

  public void unsetLongDesc() {
    this.longDesc = null;
  }

  /** Returns true if field longDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetLongDesc() {
    return this.longDesc != null;
  }

  public void setLongDescIsSet(boolean value) {
    if (!value) {
      this.longDesc = null;
    }
  }

  public String getIconUrl() {
    return this.iconUrl;
  }

  public TLiveClassRecord setIconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

  public void unsetIconUrl() {
    this.iconUrl = null;
  }

  /** Returns true if field iconUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetIconUrl() {
    return this.iconUrl != null;
  }

  public void setIconUrlIsSet(boolean value) {
    if (!value) {
      this.iconUrl = null;
    }
  }

  public String getDownloadUrl() {
    return this.downloadUrl;
  }

  public TLiveClassRecord setDownloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
    return this;
  }

  public void unsetDownloadUrl() {
    this.downloadUrl = null;
  }

  /** Returns true if field downloadUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetDownloadUrl() {
    return this.downloadUrl != null;
  }

  public void setDownloadUrlIsSet(boolean value) {
    if (!value) {
      this.downloadUrl = null;
    }
  }

  public String getRecordTime() {
    return this.recordTime;
  }

  public TLiveClassRecord setRecordTime(String recordTime) {
    this.recordTime = recordTime;
    return this;
  }

  public void unsetRecordTime() {
    this.recordTime = null;
  }

  /** Returns true if field recordTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordTime() {
    return this.recordTime != null;
  }

  public void setRecordTimeIsSet(boolean value) {
    if (!value) {
      this.recordTime = null;
    }
  }

  public int getRecordPeriod() {
    return this.recordPeriod;
  }

  public TLiveClassRecord setRecordPeriod(int recordPeriod) {
    this.recordPeriod = recordPeriod;
    setRecordPeriodIsSet(true);
    return this;
  }

  public void unsetRecordPeriod() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECORDPERIOD_ISSET_ID);
  }

  /** Returns true if field recordPeriod is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordPeriod() {
    return EncodingUtils.testBit(__isset_bitfield, __RECORDPERIOD_ISSET_ID);
  }

  public void setRecordPeriodIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECORDPERIOD_ISSET_ID, value);
  }

  public String getCreateAt() {
    return this.createAt;
  }

  public TLiveClassRecord setCreateAt(String createAt) {
    this.createAt = createAt;
    return this;
  }

  public void unsetCreateAt() {
    this.createAt = null;
  }

  /** Returns true if field createAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateAt() {
    return this.createAt != null;
  }

  public void setCreateAtIsSet(boolean value) {
    if (!value) {
      this.createAt = null;
    }
  }

  public TTeacher getTeacherObj() {
    return this.teacherObj;
  }

  public TLiveClassRecord setTeacherObj(TTeacher teacherObj) {
    this.teacherObj = teacherObj;
    return this;
  }

  public void unsetTeacherObj() {
    this.teacherObj = null;
  }

  /** Returns true if field teacherObj is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherObj() {
    return this.teacherObj != null;
  }

  public void setTeacherObjIsSet(boolean value) {
    if (!value) {
      this.teacherObj = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MYID:
      if (value == null) {
        unsetMyid();
      } else {
        setMyid((Integer)value);
      }
      break;

    case LIVECLASS_ID:
      if (value == null) {
        unsetLiveclassId();
      } else {
        setLiveclassId((Integer)value);
      }
      break;

    case TEACHER_ID:
      if (value == null) {
        unsetTeacherId();
      } else {
        setTeacherId((Integer)value);
      }
      break;

    case SHORT_DESC:
      if (value == null) {
        unsetShortDesc();
      } else {
        setShortDesc((String)value);
      }
      break;

    case LONG_DESC:
      if (value == null) {
        unsetLongDesc();
      } else {
        setLongDesc((String)value);
      }
      break;

    case ICON_URL:
      if (value == null) {
        unsetIconUrl();
      } else {
        setIconUrl((String)value);
      }
      break;

    case DOWNLOAD_URL:
      if (value == null) {
        unsetDownloadUrl();
      } else {
        setDownloadUrl((String)value);
      }
      break;

    case RECORD_TIME:
      if (value == null) {
        unsetRecordTime();
      } else {
        setRecordTime((String)value);
      }
      break;

    case RECORD_PERIOD:
      if (value == null) {
        unsetRecordPeriod();
      } else {
        setRecordPeriod((Integer)value);
      }
      break;

    case CREATE_AT:
      if (value == null) {
        unsetCreateAt();
      } else {
        setCreateAt((String)value);
      }
      break;

    case TEACHER_OBJ:
      if (value == null) {
        unsetTeacherObj();
      } else {
        setTeacherObj((TTeacher)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MYID:
      return Integer.valueOf(getMyid());

    case LIVECLASS_ID:
      return Integer.valueOf(getLiveclassId());

    case TEACHER_ID:
      return Integer.valueOf(getTeacherId());

    case SHORT_DESC:
      return getShortDesc();

    case LONG_DESC:
      return getLongDesc();

    case ICON_URL:
      return getIconUrl();

    case DOWNLOAD_URL:
      return getDownloadUrl();

    case RECORD_TIME:
      return getRecordTime();

    case RECORD_PERIOD:
      return Integer.valueOf(getRecordPeriod());

    case CREATE_AT:
      return getCreateAt();

    case TEACHER_OBJ:
      return getTeacherObj();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MYID:
      return isSetMyid();
    case LIVECLASS_ID:
      return isSetLiveclassId();
    case TEACHER_ID:
      return isSetTeacherId();
    case SHORT_DESC:
      return isSetShortDesc();
    case LONG_DESC:
      return isSetLongDesc();
    case ICON_URL:
      return isSetIconUrl();
    case DOWNLOAD_URL:
      return isSetDownloadUrl();
    case RECORD_TIME:
      return isSetRecordTime();
    case RECORD_PERIOD:
      return isSetRecordPeriod();
    case CREATE_AT:
      return isSetCreateAt();
    case TEACHER_OBJ:
      return isSetTeacherObj();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TLiveClassRecord)
      return this.equals((TLiveClassRecord)that);
    return false;
  }

  public boolean equals(TLiveClassRecord that) {
    if (that == null)
      return false;

    boolean this_present_myid = true;
    boolean that_present_myid = true;
    if (this_present_myid || that_present_myid) {
      if (!(this_present_myid && that_present_myid))
        return false;
      if (this.myid != that.myid)
        return false;
    }

    boolean this_present_liveclassId = true;
    boolean that_present_liveclassId = true;
    if (this_present_liveclassId || that_present_liveclassId) {
      if (!(this_present_liveclassId && that_present_liveclassId))
        return false;
      if (this.liveclassId != that.liveclassId)
        return false;
    }

    boolean this_present_teacherId = true;
    boolean that_present_teacherId = true;
    if (this_present_teacherId || that_present_teacherId) {
      if (!(this_present_teacherId && that_present_teacherId))
        return false;
      if (this.teacherId != that.teacherId)
        return false;
    }

    boolean this_present_shortDesc = true && this.isSetShortDesc();
    boolean that_present_shortDesc = true && that.isSetShortDesc();
    if (this_present_shortDesc || that_present_shortDesc) {
      if (!(this_present_shortDesc && that_present_shortDesc))
        return false;
      if (!this.shortDesc.equals(that.shortDesc))
        return false;
    }

    boolean this_present_longDesc = true && this.isSetLongDesc();
    boolean that_present_longDesc = true && that.isSetLongDesc();
    if (this_present_longDesc || that_present_longDesc) {
      if (!(this_present_longDesc && that_present_longDesc))
        return false;
      if (!this.longDesc.equals(that.longDesc))
        return false;
    }

    boolean this_present_iconUrl = true && this.isSetIconUrl();
    boolean that_present_iconUrl = true && that.isSetIconUrl();
    if (this_present_iconUrl || that_present_iconUrl) {
      if (!(this_present_iconUrl && that_present_iconUrl))
        return false;
      if (!this.iconUrl.equals(that.iconUrl))
        return false;
    }

    boolean this_present_downloadUrl = true && this.isSetDownloadUrl();
    boolean that_present_downloadUrl = true && that.isSetDownloadUrl();
    if (this_present_downloadUrl || that_present_downloadUrl) {
      if (!(this_present_downloadUrl && that_present_downloadUrl))
        return false;
      if (!this.downloadUrl.equals(that.downloadUrl))
        return false;
    }

    boolean this_present_recordTime = true && this.isSetRecordTime();
    boolean that_present_recordTime = true && that.isSetRecordTime();
    if (this_present_recordTime || that_present_recordTime) {
      if (!(this_present_recordTime && that_present_recordTime))
        return false;
      if (!this.recordTime.equals(that.recordTime))
        return false;
    }

    boolean this_present_recordPeriod = true;
    boolean that_present_recordPeriod = true;
    if (this_present_recordPeriod || that_present_recordPeriod) {
      if (!(this_present_recordPeriod && that_present_recordPeriod))
        return false;
      if (this.recordPeriod != that.recordPeriod)
        return false;
    }

    boolean this_present_createAt = true && this.isSetCreateAt();
    boolean that_present_createAt = true && that.isSetCreateAt();
    if (this_present_createAt || that_present_createAt) {
      if (!(this_present_createAt && that_present_createAt))
        return false;
      if (!this.createAt.equals(that.createAt))
        return false;
    }

    boolean this_present_teacherObj = true && this.isSetTeacherObj();
    boolean that_present_teacherObj = true && that.isSetTeacherObj();
    if (this_present_teacherObj || that_present_teacherObj) {
      if (!(this_present_teacherObj && that_present_teacherObj))
        return false;
      if (!this.teacherObj.equals(that.teacherObj))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TLiveClassRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMyid()).compareTo(other.isSetMyid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myid, other.myid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveclassId()).compareTo(other.isSetLiveclassId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveclassId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveclassId, other.liveclassId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeacherId()).compareTo(other.isSetTeacherId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherId, other.teacherId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortDesc()).compareTo(other.isSetShortDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortDesc, other.shortDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongDesc()).compareTo(other.isSetLongDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longDesc, other.longDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIconUrl()).compareTo(other.isSetIconUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIconUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iconUrl, other.iconUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownloadUrl()).compareTo(other.isSetDownloadUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownloadUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downloadUrl, other.downloadUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordTime()).compareTo(other.isSetRecordTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordTime, other.recordTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordPeriod()).compareTo(other.isSetRecordPeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordPeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordPeriod, other.recordPeriod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateAt()).compareTo(other.isSetCreateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createAt, other.createAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeacherObj()).compareTo(other.isSetTeacherObj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherObj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherObj, other.teacherObj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TLiveClassRecord(");
    boolean first = true;

    sb.append("myid:");
    sb.append(this.myid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("liveclassId:");
    sb.append(this.liveclassId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherId:");
    sb.append(this.teacherId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortDesc:");
    if (this.shortDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.shortDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("longDesc:");
    if (this.longDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.longDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iconUrl:");
    if (this.iconUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.iconUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("downloadUrl:");
    if (this.downloadUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.downloadUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordTime:");
    if (this.recordTime == null) {
      sb.append("null");
    } else {
      sb.append(this.recordTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordPeriod:");
    sb.append(this.recordPeriod);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createAt:");
    if (this.createAt == null) {
      sb.append("null");
    } else {
      sb.append(this.createAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherObj:");
    if (this.teacherObj == null) {
      sb.append("null");
    } else {
      sb.append(this.teacherObj);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (teacherObj != null) {
      teacherObj.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TLiveClassRecordStandardSchemeFactory implements SchemeFactory {
    public TLiveClassRecordStandardScheme getScheme() {
      return new TLiveClassRecordStandardScheme();
    }
  }

  private static class TLiveClassRecordStandardScheme extends StandardScheme<TLiveClassRecord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TLiveClassRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MYID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.myid = iprot.readI32();
              struct.setMyidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LIVECLASS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.liveclassId = iprot.readI32();
              struct.setLiveclassIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEACHER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.teacherId = iprot.readI32();
              struct.setTeacherIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHORT_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shortDesc = iprot.readString();
              struct.setShortDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LONG_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.longDesc = iprot.readString();
              struct.setLongDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ICON_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iconUrl = iprot.readString();
              struct.setIconUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOWNLOAD_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.downloadUrl = iprot.readString();
              struct.setDownloadUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RECORD_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recordTime = iprot.readString();
              struct.setRecordTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RECORD_PERIOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recordPeriod = iprot.readI32();
              struct.setRecordPeriodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createAt = iprot.readString();
              struct.setCreateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TEACHER_OBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.teacherObj = new TTeacher();
              struct.teacherObj.read(iprot);
              struct.setTeacherObjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TLiveClassRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MYID_FIELD_DESC);
      oprot.writeI32(struct.myid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIVECLASS_ID_FIELD_DESC);
      oprot.writeI32(struct.liveclassId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEACHER_ID_FIELD_DESC);
      oprot.writeI32(struct.teacherId);
      oprot.writeFieldEnd();
      if (struct.shortDesc != null) {
        oprot.writeFieldBegin(SHORT_DESC_FIELD_DESC);
        oprot.writeString(struct.shortDesc);
        oprot.writeFieldEnd();
      }
      if (struct.longDesc != null) {
        oprot.writeFieldBegin(LONG_DESC_FIELD_DESC);
        oprot.writeString(struct.longDesc);
        oprot.writeFieldEnd();
      }
      if (struct.iconUrl != null) {
        oprot.writeFieldBegin(ICON_URL_FIELD_DESC);
        oprot.writeString(struct.iconUrl);
        oprot.writeFieldEnd();
      }
      if (struct.downloadUrl != null) {
        oprot.writeFieldBegin(DOWNLOAD_URL_FIELD_DESC);
        oprot.writeString(struct.downloadUrl);
        oprot.writeFieldEnd();
      }
      if (struct.recordTime != null) {
        oprot.writeFieldBegin(RECORD_TIME_FIELD_DESC);
        oprot.writeString(struct.recordTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECORD_PERIOD_FIELD_DESC);
      oprot.writeI32(struct.recordPeriod);
      oprot.writeFieldEnd();
      if (struct.createAt != null) {
        oprot.writeFieldBegin(CREATE_AT_FIELD_DESC);
        oprot.writeString(struct.createAt);
        oprot.writeFieldEnd();
      }
      if (struct.teacherObj != null) {
        oprot.writeFieldBegin(TEACHER_OBJ_FIELD_DESC);
        struct.teacherObj.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TLiveClassRecordTupleSchemeFactory implements SchemeFactory {
    public TLiveClassRecordTupleScheme getScheme() {
      return new TLiveClassRecordTupleScheme();
    }
  }

  private static class TLiveClassRecordTupleScheme extends TupleScheme<TLiveClassRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TLiveClassRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMyid()) {
        optionals.set(0);
      }
      if (struct.isSetLiveclassId()) {
        optionals.set(1);
      }
      if (struct.isSetTeacherId()) {
        optionals.set(2);
      }
      if (struct.isSetShortDesc()) {
        optionals.set(3);
      }
      if (struct.isSetLongDesc()) {
        optionals.set(4);
      }
      if (struct.isSetIconUrl()) {
        optionals.set(5);
      }
      if (struct.isSetDownloadUrl()) {
        optionals.set(6);
      }
      if (struct.isSetRecordTime()) {
        optionals.set(7);
      }
      if (struct.isSetRecordPeriod()) {
        optionals.set(8);
      }
      if (struct.isSetCreateAt()) {
        optionals.set(9);
      }
      if (struct.isSetTeacherObj()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetMyid()) {
        oprot.writeI32(struct.myid);
      }
      if (struct.isSetLiveclassId()) {
        oprot.writeI32(struct.liveclassId);
      }
      if (struct.isSetTeacherId()) {
        oprot.writeI32(struct.teacherId);
      }
      if (struct.isSetShortDesc()) {
        oprot.writeString(struct.shortDesc);
      }
      if (struct.isSetLongDesc()) {
        oprot.writeString(struct.longDesc);
      }
      if (struct.isSetIconUrl()) {
        oprot.writeString(struct.iconUrl);
      }
      if (struct.isSetDownloadUrl()) {
        oprot.writeString(struct.downloadUrl);
      }
      if (struct.isSetRecordTime()) {
        oprot.writeString(struct.recordTime);
      }
      if (struct.isSetRecordPeriod()) {
        oprot.writeI32(struct.recordPeriod);
      }
      if (struct.isSetCreateAt()) {
        oprot.writeString(struct.createAt);
      }
      if (struct.isSetTeacherObj()) {
        struct.teacherObj.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TLiveClassRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.myid = iprot.readI32();
        struct.setMyidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.liveclassId = iprot.readI32();
        struct.setLiveclassIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.teacherId = iprot.readI32();
        struct.setTeacherIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.shortDesc = iprot.readString();
        struct.setShortDescIsSet(true);
      }
      if (incoming.get(4)) {
        struct.longDesc = iprot.readString();
        struct.setLongDescIsSet(true);
      }
      if (incoming.get(5)) {
        struct.iconUrl = iprot.readString();
        struct.setIconUrlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.downloadUrl = iprot.readString();
        struct.setDownloadUrlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.recordTime = iprot.readString();
        struct.setRecordTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.recordPeriod = iprot.readI32();
        struct.setRecordPeriodIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createAt = iprot.readString();
        struct.setCreateAtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.teacherObj = new TTeacher();
        struct.teacherObj.read(iprot);
        struct.setTeacherObjIsSet(true);
      }
    }
  }

}

