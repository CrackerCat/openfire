/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.plaso.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TLiveClass implements org.apache.thrift.TBase<TLiveClass, TLiveClass._Fields>, java.io.Serializable, Cloneable, Comparable<TLiveClass> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLiveClass");

  private static final org.apache.thrift.protocol.TField MYID_FIELD_DESC = new org.apache.thrift.protocol.TField("myid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField GROUP_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("groupIds", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CUR_USER_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("curUserNumber", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createAt", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateAt", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TEACHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TEACH_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("teachName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STARTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ENDTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endtime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MEETINGNUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingnumber", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField TOTAL_USER_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("totalUserNumber", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField TEACHER_OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherObj", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField GROUP_OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("groupObj", org.apache.thrift.protocol.TType.LIST, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TLiveClassStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TLiveClassTupleSchemeFactory());
  }

  public int myid; // required
  public List<Integer> groupIds; // required
  public String topic; // required
  public String desc; // required
  public int curUserNumber; // required
  public String createAt; // required
  public String updateAt; // required
  public int teacherId; // required
  public String teachName; // required
  public String startime; // required
  public String endtime; // required
  public String meetingnumber; // required
  public int totalUserNumber; // required
  public TTeacher teacherObj; // required
  public List<TGroup> groupObj; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MYID((short)1, "myid"),
    GROUP_IDS((short)2, "groupIds"),
    TOPIC((short)3, "topic"),
    DESC((short)4, "desc"),
    CUR_USER_NUMBER((short)5, "curUserNumber"),
    CREATE_AT((short)6, "createAt"),
    UPDATE_AT((short)7, "updateAt"),
    TEACHER_ID((short)8, "teacherId"),
    TEACH_NAME((short)9, "teachName"),
    STARTIME((short)10, "startime"),
    ENDTIME((short)11, "endtime"),
    MEETINGNUMBER((short)12, "meetingnumber"),
    TOTAL_USER_NUMBER((short)13, "totalUserNumber"),
    TEACHER_OBJ((short)14, "teacherObj"),
    GROUP_OBJ((short)15, "groupObj");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MYID
          return MYID;
        case 2: // GROUP_IDS
          return GROUP_IDS;
        case 3: // TOPIC
          return TOPIC;
        case 4: // DESC
          return DESC;
        case 5: // CUR_USER_NUMBER
          return CUR_USER_NUMBER;
        case 6: // CREATE_AT
          return CREATE_AT;
        case 7: // UPDATE_AT
          return UPDATE_AT;
        case 8: // TEACHER_ID
          return TEACHER_ID;
        case 9: // TEACH_NAME
          return TEACH_NAME;
        case 10: // STARTIME
          return STARTIME;
        case 11: // ENDTIME
          return ENDTIME;
        case 12: // MEETINGNUMBER
          return MEETINGNUMBER;
        case 13: // TOTAL_USER_NUMBER
          return TOTAL_USER_NUMBER;
        case 14: // TEACHER_OBJ
          return TEACHER_OBJ;
        case 15: // GROUP_OBJ
          return GROUP_OBJ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MYID_ISSET_ID = 0;
  private static final int __CURUSERNUMBER_ISSET_ID = 1;
  private static final int __TEACHERID_ISSET_ID = 2;
  private static final int __TOTALUSERNUMBER_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MYID, new org.apache.thrift.meta_data.FieldMetaData("myid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_IDS, new org.apache.thrift.meta_data.FieldMetaData("groupIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUR_USER_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("curUserNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_AT, new org.apache.thrift.meta_data.FieldMetaData("createAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_AT, new org.apache.thrift.meta_data.FieldMetaData("updateAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEACHER_ID, new org.apache.thrift.meta_data.FieldMetaData("teacherId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEACH_NAME, new org.apache.thrift.meta_data.FieldMetaData("teachName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STARTIME, new org.apache.thrift.meta_data.FieldMetaData("startime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENDTIME, new org.apache.thrift.meta_data.FieldMetaData("endtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEETINGNUMBER, new org.apache.thrift.meta_data.FieldMetaData("meetingnumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_USER_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("totalUserNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEACHER_OBJ, new org.apache.thrift.meta_data.FieldMetaData("teacherObj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeacher.class)));
    tmpMap.put(_Fields.GROUP_OBJ, new org.apache.thrift.meta_data.FieldMetaData("groupObj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGroup.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLiveClass.class, metaDataMap);
  }

  public TLiveClass() {
  }

  public TLiveClass(
    int myid,
    List<Integer> groupIds,
    String topic,
    String desc,
    int curUserNumber,
    String createAt,
    String updateAt,
    int teacherId,
    String teachName,
    String startime,
    String endtime,
    String meetingnumber,
    int totalUserNumber,
    TTeacher teacherObj,
    List<TGroup> groupObj)
  {
    this();
    this.myid = myid;
    setMyidIsSet(true);
    this.groupIds = groupIds;
    this.topic = topic;
    this.desc = desc;
    this.curUserNumber = curUserNumber;
    setCurUserNumberIsSet(true);
    this.createAt = createAt;
    this.updateAt = updateAt;
    this.teacherId = teacherId;
    setTeacherIdIsSet(true);
    this.teachName = teachName;
    this.startime = startime;
    this.endtime = endtime;
    this.meetingnumber = meetingnumber;
    this.totalUserNumber = totalUserNumber;
    setTotalUserNumberIsSet(true);
    this.teacherObj = teacherObj;
    this.groupObj = groupObj;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TLiveClass(TLiveClass other) {
    __isset_bitfield = other.__isset_bitfield;
    this.myid = other.myid;
    if (other.isSetGroupIds()) {
      List<Integer> __this__groupIds = new ArrayList<Integer>(other.groupIds);
      this.groupIds = __this__groupIds;
    }
    if (other.isSetTopic()) {
      this.topic = other.topic;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    this.curUserNumber = other.curUserNumber;
    if (other.isSetCreateAt()) {
      this.createAt = other.createAt;
    }
    if (other.isSetUpdateAt()) {
      this.updateAt = other.updateAt;
    }
    this.teacherId = other.teacherId;
    if (other.isSetTeachName()) {
      this.teachName = other.teachName;
    }
    if (other.isSetStartime()) {
      this.startime = other.startime;
    }
    if (other.isSetEndtime()) {
      this.endtime = other.endtime;
    }
    if (other.isSetMeetingnumber()) {
      this.meetingnumber = other.meetingnumber;
    }
    this.totalUserNumber = other.totalUserNumber;
    if (other.isSetTeacherObj()) {
      this.teacherObj = new TTeacher(other.teacherObj);
    }
    if (other.isSetGroupObj()) {
      List<TGroup> __this__groupObj = new ArrayList<TGroup>(other.groupObj.size());
      for (TGroup other_element : other.groupObj) {
        __this__groupObj.add(new TGroup(other_element));
      }
      this.groupObj = __this__groupObj;
    }
  }

  public TLiveClass deepCopy() {
    return new TLiveClass(this);
  }

  @Override
  public void clear() {
    setMyidIsSet(false);
    this.myid = 0;
    this.groupIds = null;
    this.topic = null;
    this.desc = null;
    setCurUserNumberIsSet(false);
    this.curUserNumber = 0;
    this.createAt = null;
    this.updateAt = null;
    setTeacherIdIsSet(false);
    this.teacherId = 0;
    this.teachName = null;
    this.startime = null;
    this.endtime = null;
    this.meetingnumber = null;
    setTotalUserNumberIsSet(false);
    this.totalUserNumber = 0;
    this.teacherObj = null;
    this.groupObj = null;
  }

  public int getMyid() {
    return this.myid;
  }

  public TLiveClass setMyid(int myid) {
    this.myid = myid;
    setMyidIsSet(true);
    return this;
  }

  public void unsetMyid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYID_ISSET_ID);
  }

  /** Returns true if field myid is set (has been assigned a value) and false otherwise */
  public boolean isSetMyid() {
    return EncodingUtils.testBit(__isset_bitfield, __MYID_ISSET_ID);
  }

  public void setMyidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYID_ISSET_ID, value);
  }

  public int getGroupIdsSize() {
    return (this.groupIds == null) ? 0 : this.groupIds.size();
  }

  public java.util.Iterator<Integer> getGroupIdsIterator() {
    return (this.groupIds == null) ? null : this.groupIds.iterator();
  }

  public void addToGroupIds(int elem) {
    if (this.groupIds == null) {
      this.groupIds = new ArrayList<Integer>();
    }
    this.groupIds.add(elem);
  }

  public List<Integer> getGroupIds() {
    return this.groupIds;
  }

  public TLiveClass setGroupIds(List<Integer> groupIds) {
    this.groupIds = groupIds;
    return this;
  }

  public void unsetGroupIds() {
    this.groupIds = null;
  }

  /** Returns true if field groupIds is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupIds() {
    return this.groupIds != null;
  }

  public void setGroupIdsIsSet(boolean value) {
    if (!value) {
      this.groupIds = null;
    }
  }

  public String getTopic() {
    return this.topic;
  }

  public TLiveClass setTopic(String topic) {
    this.topic = topic;
    return this;
  }

  public void unsetTopic() {
    this.topic = null;
  }

  /** Returns true if field topic is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic() {
    return this.topic != null;
  }

  public void setTopicIsSet(boolean value) {
    if (!value) {
      this.topic = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public TLiveClass setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public int getCurUserNumber() {
    return this.curUserNumber;
  }

  public TLiveClass setCurUserNumber(int curUserNumber) {
    this.curUserNumber = curUserNumber;
    setCurUserNumberIsSet(true);
    return this;
  }

  public void unsetCurUserNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURUSERNUMBER_ISSET_ID);
  }

  /** Returns true if field curUserNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCurUserNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __CURUSERNUMBER_ISSET_ID);
  }

  public void setCurUserNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURUSERNUMBER_ISSET_ID, value);
  }

  public String getCreateAt() {
    return this.createAt;
  }

  public TLiveClass setCreateAt(String createAt) {
    this.createAt = createAt;
    return this;
  }

  public void unsetCreateAt() {
    this.createAt = null;
  }

  /** Returns true if field createAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateAt() {
    return this.createAt != null;
  }

  public void setCreateAtIsSet(boolean value) {
    if (!value) {
      this.createAt = null;
    }
  }

  public String getUpdateAt() {
    return this.updateAt;
  }

  public TLiveClass setUpdateAt(String updateAt) {
    this.updateAt = updateAt;
    return this;
  }

  public void unsetUpdateAt() {
    this.updateAt = null;
  }

  /** Returns true if field updateAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateAt() {
    return this.updateAt != null;
  }

  public void setUpdateAtIsSet(boolean value) {
    if (!value) {
      this.updateAt = null;
    }
  }

  public int getTeacherId() {
    return this.teacherId;
  }

  public TLiveClass setTeacherId(int teacherId) {
    this.teacherId = teacherId;
    setTeacherIdIsSet(true);
    return this;
  }

  public void unsetTeacherId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEACHERID_ISSET_ID);
  }

  /** Returns true if field teacherId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherId() {
    return EncodingUtils.testBit(__isset_bitfield, __TEACHERID_ISSET_ID);
  }

  public void setTeacherIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEACHERID_ISSET_ID, value);
  }

  public String getTeachName() {
    return this.teachName;
  }

  public TLiveClass setTeachName(String teachName) {
    this.teachName = teachName;
    return this;
  }

  public void unsetTeachName() {
    this.teachName = null;
  }

  /** Returns true if field teachName is set (has been assigned a value) and false otherwise */
  public boolean isSetTeachName() {
    return this.teachName != null;
  }

  public void setTeachNameIsSet(boolean value) {
    if (!value) {
      this.teachName = null;
    }
  }

  public String getStartime() {
    return this.startime;
  }

  public TLiveClass setStartime(String startime) {
    this.startime = startime;
    return this;
  }

  public void unsetStartime() {
    this.startime = null;
  }

  /** Returns true if field startime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartime() {
    return this.startime != null;
  }

  public void setStartimeIsSet(boolean value) {
    if (!value) {
      this.startime = null;
    }
  }

  public String getEndtime() {
    return this.endtime;
  }

  public TLiveClass setEndtime(String endtime) {
    this.endtime = endtime;
    return this;
  }

  public void unsetEndtime() {
    this.endtime = null;
  }

  /** Returns true if field endtime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndtime() {
    return this.endtime != null;
  }

  public void setEndtimeIsSet(boolean value) {
    if (!value) {
      this.endtime = null;
    }
  }

  public String getMeetingnumber() {
    return this.meetingnumber;
  }

  public TLiveClass setMeetingnumber(String meetingnumber) {
    this.meetingnumber = meetingnumber;
    return this;
  }

  public void unsetMeetingnumber() {
    this.meetingnumber = null;
  }

  /** Returns true if field meetingnumber is set (has been assigned a value) and false otherwise */
  public boolean isSetMeetingnumber() {
    return this.meetingnumber != null;
  }

  public void setMeetingnumberIsSet(boolean value) {
    if (!value) {
      this.meetingnumber = null;
    }
  }

  public int getTotalUserNumber() {
    return this.totalUserNumber;
  }

  public TLiveClass setTotalUserNumber(int totalUserNumber) {
    this.totalUserNumber = totalUserNumber;
    setTotalUserNumberIsSet(true);
    return this;
  }

  public void unsetTotalUserNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALUSERNUMBER_ISSET_ID);
  }

  /** Returns true if field totalUserNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalUserNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALUSERNUMBER_ISSET_ID);
  }

  public void setTotalUserNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALUSERNUMBER_ISSET_ID, value);
  }

  public TTeacher getTeacherObj() {
    return this.teacherObj;
  }

  public TLiveClass setTeacherObj(TTeacher teacherObj) {
    this.teacherObj = teacherObj;
    return this;
  }

  public void unsetTeacherObj() {
    this.teacherObj = null;
  }

  /** Returns true if field teacherObj is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherObj() {
    return this.teacherObj != null;
  }

  public void setTeacherObjIsSet(boolean value) {
    if (!value) {
      this.teacherObj = null;
    }
  }

  public int getGroupObjSize() {
    return (this.groupObj == null) ? 0 : this.groupObj.size();
  }

  public java.util.Iterator<TGroup> getGroupObjIterator() {
    return (this.groupObj == null) ? null : this.groupObj.iterator();
  }

  public void addToGroupObj(TGroup elem) {
    if (this.groupObj == null) {
      this.groupObj = new ArrayList<TGroup>();
    }
    this.groupObj.add(elem);
  }

  public List<TGroup> getGroupObj() {
    return this.groupObj;
  }

  public TLiveClass setGroupObj(List<TGroup> groupObj) {
    this.groupObj = groupObj;
    return this;
  }

  public void unsetGroupObj() {
    this.groupObj = null;
  }

  /** Returns true if field groupObj is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupObj() {
    return this.groupObj != null;
  }

  public void setGroupObjIsSet(boolean value) {
    if (!value) {
      this.groupObj = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MYID:
      if (value == null) {
        unsetMyid();
      } else {
        setMyid((Integer)value);
      }
      break;

    case GROUP_IDS:
      if (value == null) {
        unsetGroupIds();
      } else {
        setGroupIds((List<Integer>)value);
      }
      break;

    case TOPIC:
      if (value == null) {
        unsetTopic();
      } else {
        setTopic((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case CUR_USER_NUMBER:
      if (value == null) {
        unsetCurUserNumber();
      } else {
        setCurUserNumber((Integer)value);
      }
      break;

    case CREATE_AT:
      if (value == null) {
        unsetCreateAt();
      } else {
        setCreateAt((String)value);
      }
      break;

    case UPDATE_AT:
      if (value == null) {
        unsetUpdateAt();
      } else {
        setUpdateAt((String)value);
      }
      break;

    case TEACHER_ID:
      if (value == null) {
        unsetTeacherId();
      } else {
        setTeacherId((Integer)value);
      }
      break;

    case TEACH_NAME:
      if (value == null) {
        unsetTeachName();
      } else {
        setTeachName((String)value);
      }
      break;

    case STARTIME:
      if (value == null) {
        unsetStartime();
      } else {
        setStartime((String)value);
      }
      break;

    case ENDTIME:
      if (value == null) {
        unsetEndtime();
      } else {
        setEndtime((String)value);
      }
      break;

    case MEETINGNUMBER:
      if (value == null) {
        unsetMeetingnumber();
      } else {
        setMeetingnumber((String)value);
      }
      break;

    case TOTAL_USER_NUMBER:
      if (value == null) {
        unsetTotalUserNumber();
      } else {
        setTotalUserNumber((Integer)value);
      }
      break;

    case TEACHER_OBJ:
      if (value == null) {
        unsetTeacherObj();
      } else {
        setTeacherObj((TTeacher)value);
      }
      break;

    case GROUP_OBJ:
      if (value == null) {
        unsetGroupObj();
      } else {
        setGroupObj((List<TGroup>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MYID:
      return Integer.valueOf(getMyid());

    case GROUP_IDS:
      return getGroupIds();

    case TOPIC:
      return getTopic();

    case DESC:
      return getDesc();

    case CUR_USER_NUMBER:
      return Integer.valueOf(getCurUserNumber());

    case CREATE_AT:
      return getCreateAt();

    case UPDATE_AT:
      return getUpdateAt();

    case TEACHER_ID:
      return Integer.valueOf(getTeacherId());

    case TEACH_NAME:
      return getTeachName();

    case STARTIME:
      return getStartime();

    case ENDTIME:
      return getEndtime();

    case MEETINGNUMBER:
      return getMeetingnumber();

    case TOTAL_USER_NUMBER:
      return Integer.valueOf(getTotalUserNumber());

    case TEACHER_OBJ:
      return getTeacherObj();

    case GROUP_OBJ:
      return getGroupObj();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MYID:
      return isSetMyid();
    case GROUP_IDS:
      return isSetGroupIds();
    case TOPIC:
      return isSetTopic();
    case DESC:
      return isSetDesc();
    case CUR_USER_NUMBER:
      return isSetCurUserNumber();
    case CREATE_AT:
      return isSetCreateAt();
    case UPDATE_AT:
      return isSetUpdateAt();
    case TEACHER_ID:
      return isSetTeacherId();
    case TEACH_NAME:
      return isSetTeachName();
    case STARTIME:
      return isSetStartime();
    case ENDTIME:
      return isSetEndtime();
    case MEETINGNUMBER:
      return isSetMeetingnumber();
    case TOTAL_USER_NUMBER:
      return isSetTotalUserNumber();
    case TEACHER_OBJ:
      return isSetTeacherObj();
    case GROUP_OBJ:
      return isSetGroupObj();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TLiveClass)
      return this.equals((TLiveClass)that);
    return false;
  }

  public boolean equals(TLiveClass that) {
    if (that == null)
      return false;

    boolean this_present_myid = true;
    boolean that_present_myid = true;
    if (this_present_myid || that_present_myid) {
      if (!(this_present_myid && that_present_myid))
        return false;
      if (this.myid != that.myid)
        return false;
    }

    boolean this_present_groupIds = true && this.isSetGroupIds();
    boolean that_present_groupIds = true && that.isSetGroupIds();
    if (this_present_groupIds || that_present_groupIds) {
      if (!(this_present_groupIds && that_present_groupIds))
        return false;
      if (!this.groupIds.equals(that.groupIds))
        return false;
    }

    boolean this_present_topic = true && this.isSetTopic();
    boolean that_present_topic = true && that.isSetTopic();
    if (this_present_topic || that_present_topic) {
      if (!(this_present_topic && that_present_topic))
        return false;
      if (!this.topic.equals(that.topic))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_curUserNumber = true;
    boolean that_present_curUserNumber = true;
    if (this_present_curUserNumber || that_present_curUserNumber) {
      if (!(this_present_curUserNumber && that_present_curUserNumber))
        return false;
      if (this.curUserNumber != that.curUserNumber)
        return false;
    }

    boolean this_present_createAt = true && this.isSetCreateAt();
    boolean that_present_createAt = true && that.isSetCreateAt();
    if (this_present_createAt || that_present_createAt) {
      if (!(this_present_createAt && that_present_createAt))
        return false;
      if (!this.createAt.equals(that.createAt))
        return false;
    }

    boolean this_present_updateAt = true && this.isSetUpdateAt();
    boolean that_present_updateAt = true && that.isSetUpdateAt();
    if (this_present_updateAt || that_present_updateAt) {
      if (!(this_present_updateAt && that_present_updateAt))
        return false;
      if (!this.updateAt.equals(that.updateAt))
        return false;
    }

    boolean this_present_teacherId = true;
    boolean that_present_teacherId = true;
    if (this_present_teacherId || that_present_teacherId) {
      if (!(this_present_teacherId && that_present_teacherId))
        return false;
      if (this.teacherId != that.teacherId)
        return false;
    }

    boolean this_present_teachName = true && this.isSetTeachName();
    boolean that_present_teachName = true && that.isSetTeachName();
    if (this_present_teachName || that_present_teachName) {
      if (!(this_present_teachName && that_present_teachName))
        return false;
      if (!this.teachName.equals(that.teachName))
        return false;
    }

    boolean this_present_startime = true && this.isSetStartime();
    boolean that_present_startime = true && that.isSetStartime();
    if (this_present_startime || that_present_startime) {
      if (!(this_present_startime && that_present_startime))
        return false;
      if (!this.startime.equals(that.startime))
        return false;
    }

    boolean this_present_endtime = true && this.isSetEndtime();
    boolean that_present_endtime = true && that.isSetEndtime();
    if (this_present_endtime || that_present_endtime) {
      if (!(this_present_endtime && that_present_endtime))
        return false;
      if (!this.endtime.equals(that.endtime))
        return false;
    }

    boolean this_present_meetingnumber = true && this.isSetMeetingnumber();
    boolean that_present_meetingnumber = true && that.isSetMeetingnumber();
    if (this_present_meetingnumber || that_present_meetingnumber) {
      if (!(this_present_meetingnumber && that_present_meetingnumber))
        return false;
      if (!this.meetingnumber.equals(that.meetingnumber))
        return false;
    }

    boolean this_present_totalUserNumber = true;
    boolean that_present_totalUserNumber = true;
    if (this_present_totalUserNumber || that_present_totalUserNumber) {
      if (!(this_present_totalUserNumber && that_present_totalUserNumber))
        return false;
      if (this.totalUserNumber != that.totalUserNumber)
        return false;
    }

    boolean this_present_teacherObj = true && this.isSetTeacherObj();
    boolean that_present_teacherObj = true && that.isSetTeacherObj();
    if (this_present_teacherObj || that_present_teacherObj) {
      if (!(this_present_teacherObj && that_present_teacherObj))
        return false;
      if (!this.teacherObj.equals(that.teacherObj))
        return false;
    }

    boolean this_present_groupObj = true && this.isSetGroupObj();
    boolean that_present_groupObj = true && that.isSetGroupObj();
    if (this_present_groupObj || that_present_groupObj) {
      if (!(this_present_groupObj && that_present_groupObj))
        return false;
      if (!this.groupObj.equals(that.groupObj))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TLiveClass other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMyid()).compareTo(other.isSetMyid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myid, other.myid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupIds()).compareTo(other.isSetGroupIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupIds, other.groupIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurUserNumber()).compareTo(other.isSetCurUserNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurUserNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curUserNumber, other.curUserNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateAt()).compareTo(other.isSetCreateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createAt, other.createAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateAt()).compareTo(other.isSetUpdateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateAt, other.updateAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeacherId()).compareTo(other.isSetTeacherId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherId, other.teacherId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeachName()).compareTo(other.isSetTeachName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeachName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teachName, other.teachName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartime()).compareTo(other.isSetStartime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startime, other.startime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndtime()).compareTo(other.isSetEndtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endtime, other.endtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeetingnumber()).compareTo(other.isSetMeetingnumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeetingnumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingnumber, other.meetingnumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalUserNumber()).compareTo(other.isSetTotalUserNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalUserNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalUserNumber, other.totalUserNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeacherObj()).compareTo(other.isSetTeacherObj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherObj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherObj, other.teacherObj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupObj()).compareTo(other.isSetGroupObj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupObj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupObj, other.groupObj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TLiveClass(");
    boolean first = true;

    sb.append("myid:");
    sb.append(this.myid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupIds:");
    if (this.groupIds == null) {
      sb.append("null");
    } else {
      sb.append(this.groupIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topic:");
    if (this.topic == null) {
      sb.append("null");
    } else {
      sb.append(this.topic);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("curUserNumber:");
    sb.append(this.curUserNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createAt:");
    if (this.createAt == null) {
      sb.append("null");
    } else {
      sb.append(this.createAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateAt:");
    if (this.updateAt == null) {
      sb.append("null");
    } else {
      sb.append(this.updateAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherId:");
    sb.append(this.teacherId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("teachName:");
    if (this.teachName == null) {
      sb.append("null");
    } else {
      sb.append(this.teachName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startime:");
    if (this.startime == null) {
      sb.append("null");
    } else {
      sb.append(this.startime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endtime:");
    if (this.endtime == null) {
      sb.append("null");
    } else {
      sb.append(this.endtime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("meetingnumber:");
    if (this.meetingnumber == null) {
      sb.append("null");
    } else {
      sb.append(this.meetingnumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalUserNumber:");
    sb.append(this.totalUserNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherObj:");
    if (this.teacherObj == null) {
      sb.append("null");
    } else {
      sb.append(this.teacherObj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupObj:");
    if (this.groupObj == null) {
      sb.append("null");
    } else {
      sb.append(this.groupObj);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (teacherObj != null) {
      teacherObj.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TLiveClassStandardSchemeFactory implements SchemeFactory {
    public TLiveClassStandardScheme getScheme() {
      return new TLiveClassStandardScheme();
    }
  }

  private static class TLiveClassStandardScheme extends StandardScheme<TLiveClass> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TLiveClass struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MYID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.myid = iprot.readI32();
              struct.setMyidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUP_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.groupIds = new ArrayList<Integer>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  int _elem10;
                  _elem10 = iprot.readI32();
                  struct.groupIds.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setGroupIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOPIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topic = iprot.readString();
              struct.setTopicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CUR_USER_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.curUserNumber = iprot.readI32();
              struct.setCurUserNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createAt = iprot.readString();
              struct.setCreateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateAt = iprot.readString();
              struct.setUpdateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TEACHER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.teacherId = iprot.readI32();
              struct.setTeacherIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TEACH_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teachName = iprot.readString();
              struct.setTeachNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STARTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startime = iprot.readString();
              struct.setStartimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ENDTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endtime = iprot.readString();
              struct.setEndtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MEETINGNUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.meetingnumber = iprot.readString();
              struct.setMeetingnumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TOTAL_USER_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalUserNumber = iprot.readI32();
              struct.setTotalUserNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TEACHER_OBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.teacherObj = new TTeacher();
              struct.teacherObj.read(iprot);
              struct.setTeacherObjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // GROUP_OBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.groupObj = new ArrayList<TGroup>(_list11.size);
                for (int _i12 = 0; _i12 < _list11.size; ++_i12)
                {
                  TGroup _elem13;
                  _elem13 = new TGroup();
                  _elem13.read(iprot);
                  struct.groupObj.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setGroupObjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TLiveClass struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MYID_FIELD_DESC);
      oprot.writeI32(struct.myid);
      oprot.writeFieldEnd();
      if (struct.groupIds != null) {
        oprot.writeFieldBegin(GROUP_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.groupIds.size()));
          for (int _iter14 : struct.groupIds)
          {
            oprot.writeI32(_iter14);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.topic != null) {
        oprot.writeFieldBegin(TOPIC_FIELD_DESC);
        oprot.writeString(struct.topic);
        oprot.writeFieldEnd();
      }
      if (struct.desc != null) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(struct.desc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUR_USER_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.curUserNumber);
      oprot.writeFieldEnd();
      if (struct.createAt != null) {
        oprot.writeFieldBegin(CREATE_AT_FIELD_DESC);
        oprot.writeString(struct.createAt);
        oprot.writeFieldEnd();
      }
      if (struct.updateAt != null) {
        oprot.writeFieldBegin(UPDATE_AT_FIELD_DESC);
        oprot.writeString(struct.updateAt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TEACHER_ID_FIELD_DESC);
      oprot.writeI32(struct.teacherId);
      oprot.writeFieldEnd();
      if (struct.teachName != null) {
        oprot.writeFieldBegin(TEACH_NAME_FIELD_DESC);
        oprot.writeString(struct.teachName);
        oprot.writeFieldEnd();
      }
      if (struct.startime != null) {
        oprot.writeFieldBegin(STARTIME_FIELD_DESC);
        oprot.writeString(struct.startime);
        oprot.writeFieldEnd();
      }
      if (struct.endtime != null) {
        oprot.writeFieldBegin(ENDTIME_FIELD_DESC);
        oprot.writeString(struct.endtime);
        oprot.writeFieldEnd();
      }
      if (struct.meetingnumber != null) {
        oprot.writeFieldBegin(MEETINGNUMBER_FIELD_DESC);
        oprot.writeString(struct.meetingnumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_USER_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.totalUserNumber);
      oprot.writeFieldEnd();
      if (struct.teacherObj != null) {
        oprot.writeFieldBegin(TEACHER_OBJ_FIELD_DESC);
        struct.teacherObj.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.groupObj != null) {
        oprot.writeFieldBegin(GROUP_OBJ_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.groupObj.size()));
          for (TGroup _iter15 : struct.groupObj)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TLiveClassTupleSchemeFactory implements SchemeFactory {
    public TLiveClassTupleScheme getScheme() {
      return new TLiveClassTupleScheme();
    }
  }

  private static class TLiveClassTupleScheme extends TupleScheme<TLiveClass> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TLiveClass struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMyid()) {
        optionals.set(0);
      }
      if (struct.isSetGroupIds()) {
        optionals.set(1);
      }
      if (struct.isSetTopic()) {
        optionals.set(2);
      }
      if (struct.isSetDesc()) {
        optionals.set(3);
      }
      if (struct.isSetCurUserNumber()) {
        optionals.set(4);
      }
      if (struct.isSetCreateAt()) {
        optionals.set(5);
      }
      if (struct.isSetUpdateAt()) {
        optionals.set(6);
      }
      if (struct.isSetTeacherId()) {
        optionals.set(7);
      }
      if (struct.isSetTeachName()) {
        optionals.set(8);
      }
      if (struct.isSetStartime()) {
        optionals.set(9);
      }
      if (struct.isSetEndtime()) {
        optionals.set(10);
      }
      if (struct.isSetMeetingnumber()) {
        optionals.set(11);
      }
      if (struct.isSetTotalUserNumber()) {
        optionals.set(12);
      }
      if (struct.isSetTeacherObj()) {
        optionals.set(13);
      }
      if (struct.isSetGroupObj()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetMyid()) {
        oprot.writeI32(struct.myid);
      }
      if (struct.isSetGroupIds()) {
        {
          oprot.writeI32(struct.groupIds.size());
          for (int _iter16 : struct.groupIds)
          {
            oprot.writeI32(_iter16);
          }
        }
      }
      if (struct.isSetTopic()) {
        oprot.writeString(struct.topic);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetCurUserNumber()) {
        oprot.writeI32(struct.curUserNumber);
      }
      if (struct.isSetCreateAt()) {
        oprot.writeString(struct.createAt);
      }
      if (struct.isSetUpdateAt()) {
        oprot.writeString(struct.updateAt);
      }
      if (struct.isSetTeacherId()) {
        oprot.writeI32(struct.teacherId);
      }
      if (struct.isSetTeachName()) {
        oprot.writeString(struct.teachName);
      }
      if (struct.isSetStartime()) {
        oprot.writeString(struct.startime);
      }
      if (struct.isSetEndtime()) {
        oprot.writeString(struct.endtime);
      }
      if (struct.isSetMeetingnumber()) {
        oprot.writeString(struct.meetingnumber);
      }
      if (struct.isSetTotalUserNumber()) {
        oprot.writeI32(struct.totalUserNumber);
      }
      if (struct.isSetTeacherObj()) {
        struct.teacherObj.write(oprot);
      }
      if (struct.isSetGroupObj()) {
        {
          oprot.writeI32(struct.groupObj.size());
          for (TGroup _iter17 : struct.groupObj)
          {
            _iter17.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TLiveClass struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.myid = iprot.readI32();
        struct.setMyidIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.groupIds = new ArrayList<Integer>(_list18.size);
          for (int _i19 = 0; _i19 < _list18.size; ++_i19)
          {
            int _elem20;
            _elem20 = iprot.readI32();
            struct.groupIds.add(_elem20);
          }
        }
        struct.setGroupIdsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.topic = iprot.readString();
        struct.setTopicIsSet(true);
      }
      if (incoming.get(3)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(4)) {
        struct.curUserNumber = iprot.readI32();
        struct.setCurUserNumberIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createAt = iprot.readString();
        struct.setCreateAtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updateAt = iprot.readString();
        struct.setUpdateAtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.teacherId = iprot.readI32();
        struct.setTeacherIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.teachName = iprot.readString();
        struct.setTeachNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.startime = iprot.readString();
        struct.setStartimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.endtime = iprot.readString();
        struct.setEndtimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.meetingnumber = iprot.readString();
        struct.setMeetingnumberIsSet(true);
      }
      if (incoming.get(12)) {
        struct.totalUserNumber = iprot.readI32();
        struct.setTotalUserNumberIsSet(true);
      }
      if (incoming.get(13)) {
        struct.teacherObj = new TTeacher();
        struct.teacherObj.read(iprot);
        struct.setTeacherObjIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.groupObj = new ArrayList<TGroup>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            TGroup _elem23;
            _elem23 = new TGroup();
            _elem23.read(iprot);
            struct.groupObj.add(_elem23);
          }
        }
        struct.setGroupObjIsSet(true);
      }
    }
  }

}

