/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.plaso.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TKnowledge implements org.apache.thrift.TBase<TKnowledge, TKnowledge._Fields>, java.io.Serializable, Cloneable, Comparable<TKnowledge> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TKnowledge");

  private static final org.apache.thrift.protocol.TField MYID_FIELD_DESC = new org.apache.thrift.protocol.TField("myid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SHORT_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("shortDesc", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LONG_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("longDesc", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TKnowledgeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TKnowledgeTupleSchemeFactory());
  }

  public int myid; // required
  public String name; // required
  public String shortDesc; // required
  public String longDesc; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MYID((short)1, "myid"),
    NAME((short)2, "name"),
    SHORT_DESC((short)3, "shortDesc"),
    LONG_DESC((short)4, "longDesc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MYID
          return MYID;
        case 2: // NAME
          return NAME;
        case 3: // SHORT_DESC
          return SHORT_DESC;
        case 4: // LONG_DESC
          return LONG_DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MYID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MYID, new org.apache.thrift.meta_data.FieldMetaData("myid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHORT_DESC, new org.apache.thrift.meta_data.FieldMetaData("shortDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LONG_DESC, new org.apache.thrift.meta_data.FieldMetaData("longDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TKnowledge.class, metaDataMap);
  }

  public TKnowledge() {
  }

  public TKnowledge(
    int myid,
    String name,
    String shortDesc,
    String longDesc)
  {
    this();
    this.myid = myid;
    setMyidIsSet(true);
    this.name = name;
    this.shortDesc = shortDesc;
    this.longDesc = longDesc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TKnowledge(TKnowledge other) {
    __isset_bitfield = other.__isset_bitfield;
    this.myid = other.myid;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetShortDesc()) {
      this.shortDesc = other.shortDesc;
    }
    if (other.isSetLongDesc()) {
      this.longDesc = other.longDesc;
    }
  }

  public TKnowledge deepCopy() {
    return new TKnowledge(this);
  }

  @Override
  public void clear() {
    setMyidIsSet(false);
    this.myid = 0;
    this.name = null;
    this.shortDesc = null;
    this.longDesc = null;
  }

  public int getMyid() {
    return this.myid;
  }

  public TKnowledge setMyid(int myid) {
    this.myid = myid;
    setMyidIsSet(true);
    return this;
  }

  public void unsetMyid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYID_ISSET_ID);
  }

  /** Returns true if field myid is set (has been assigned a value) and false otherwise */
  public boolean isSetMyid() {
    return EncodingUtils.testBit(__isset_bitfield, __MYID_ISSET_ID);
  }

  public void setMyidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public TKnowledge setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getShortDesc() {
    return this.shortDesc;
  }

  public TKnowledge setShortDesc(String shortDesc) {
    this.shortDesc = shortDesc;
    return this;
  }

  public void unsetShortDesc() {
    this.shortDesc = null;
  }

  /** Returns true if field shortDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetShortDesc() {
    return this.shortDesc != null;
  }

  public void setShortDescIsSet(boolean value) {
    if (!value) {
      this.shortDesc = null;
    }
  }

  public String getLongDesc() {
    return this.longDesc;
  }

  public TKnowledge setLongDesc(String longDesc) {
    this.longDesc = longDesc;
    return this;
  }

  public void unsetLongDesc() {
    this.longDesc = null;
  }

  /** Returns true if field longDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetLongDesc() {
    return this.longDesc != null;
  }

  public void setLongDescIsSet(boolean value) {
    if (!value) {
      this.longDesc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MYID:
      if (value == null) {
        unsetMyid();
      } else {
        setMyid((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SHORT_DESC:
      if (value == null) {
        unsetShortDesc();
      } else {
        setShortDesc((String)value);
      }
      break;

    case LONG_DESC:
      if (value == null) {
        unsetLongDesc();
      } else {
        setLongDesc((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MYID:
      return Integer.valueOf(getMyid());

    case NAME:
      return getName();

    case SHORT_DESC:
      return getShortDesc();

    case LONG_DESC:
      return getLongDesc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MYID:
      return isSetMyid();
    case NAME:
      return isSetName();
    case SHORT_DESC:
      return isSetShortDesc();
    case LONG_DESC:
      return isSetLongDesc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TKnowledge)
      return this.equals((TKnowledge)that);
    return false;
  }

  public boolean equals(TKnowledge that) {
    if (that == null)
      return false;

    boolean this_present_myid = true;
    boolean that_present_myid = true;
    if (this_present_myid || that_present_myid) {
      if (!(this_present_myid && that_present_myid))
        return false;
      if (this.myid != that.myid)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_shortDesc = true && this.isSetShortDesc();
    boolean that_present_shortDesc = true && that.isSetShortDesc();
    if (this_present_shortDesc || that_present_shortDesc) {
      if (!(this_present_shortDesc && that_present_shortDesc))
        return false;
      if (!this.shortDesc.equals(that.shortDesc))
        return false;
    }

    boolean this_present_longDesc = true && this.isSetLongDesc();
    boolean that_present_longDesc = true && that.isSetLongDesc();
    if (this_present_longDesc || that_present_longDesc) {
      if (!(this_present_longDesc && that_present_longDesc))
        return false;
      if (!this.longDesc.equals(that.longDesc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TKnowledge other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMyid()).compareTo(other.isSetMyid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myid, other.myid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortDesc()).compareTo(other.isSetShortDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortDesc, other.shortDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongDesc()).compareTo(other.isSetLongDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longDesc, other.longDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TKnowledge(");
    boolean first = true;

    sb.append("myid:");
    sb.append(this.myid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortDesc:");
    if (this.shortDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.shortDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("longDesc:");
    if (this.longDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.longDesc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TKnowledgeStandardSchemeFactory implements SchemeFactory {
    public TKnowledgeStandardScheme getScheme() {
      return new TKnowledgeStandardScheme();
    }
  }

  private static class TKnowledgeStandardScheme extends StandardScheme<TKnowledge> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TKnowledge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MYID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.myid = iprot.readI32();
              struct.setMyidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHORT_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shortDesc = iprot.readString();
              struct.setShortDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LONG_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.longDesc = iprot.readString();
              struct.setLongDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TKnowledge struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MYID_FIELD_DESC);
      oprot.writeI32(struct.myid);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.shortDesc != null) {
        oprot.writeFieldBegin(SHORT_DESC_FIELD_DESC);
        oprot.writeString(struct.shortDesc);
        oprot.writeFieldEnd();
      }
      if (struct.longDesc != null) {
        oprot.writeFieldBegin(LONG_DESC_FIELD_DESC);
        oprot.writeString(struct.longDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TKnowledgeTupleSchemeFactory implements SchemeFactory {
    public TKnowledgeTupleScheme getScheme() {
      return new TKnowledgeTupleScheme();
    }
  }

  private static class TKnowledgeTupleScheme extends TupleScheme<TKnowledge> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TKnowledge struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMyid()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetShortDesc()) {
        optionals.set(2);
      }
      if (struct.isSetLongDesc()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetMyid()) {
        oprot.writeI32(struct.myid);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetShortDesc()) {
        oprot.writeString(struct.shortDesc);
      }
      if (struct.isSetLongDesc()) {
        oprot.writeString(struct.longDesc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TKnowledge struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.myid = iprot.readI32();
        struct.setMyidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.shortDesc = iprot.readString();
        struct.setShortDescIsSet(true);
      }
      if (incoming.get(3)) {
        struct.longDesc = iprot.readString();
        struct.setLongDescIsSet(true);
      }
    }
  }

}

