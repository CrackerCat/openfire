/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.plaso.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TQAService {

  public interface Iface {

    public List<TQAThread> getThreadByTeacherAndStudent(int teacherId, int stduentId, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public List<TQAThread> getThreadByTeacher(int teacherId, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public List<TQAThread> getThreadByStudent(int studentId, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public List<TQADetail> getQADetailByThreadId(int threadId, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public TQAThread createQAThread(TQAThread qaThread, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public TQADetail createQADetail(TQADetail detail, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public boolean deleteQAThread(int id, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public boolean deleteQADetail(int id, String access_token) throws TPlasoException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getThreadByTeacherAndStudent(int teacherId, int stduentId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getThreadByTeacher(int teacherId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getThreadByStudent(int studentId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getQADetailByThreadId(int threadId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createQAThread(TQAThread qaThread, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createQADetail(TQADetail detail, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteQAThread(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteQADetail(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<TQAThread> getThreadByTeacherAndStudent(int teacherId, int stduentId, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_getThreadByTeacherAndStudent(teacherId, stduentId, access_token);
      return recv_getThreadByTeacherAndStudent();
    }

    public void send_getThreadByTeacherAndStudent(int teacherId, int stduentId, String access_token) throws org.apache.thrift.TException
    {
      getThreadByTeacherAndStudent_args args = new getThreadByTeacherAndStudent_args();
      args.setTeacherId(teacherId);
      args.setStduentId(stduentId);
      args.setAccess_token(access_token);
      sendBase("getThreadByTeacherAndStudent", args);
    }

    public List<TQAThread> recv_getThreadByTeacherAndStudent() throws TPlasoException, org.apache.thrift.TException
    {
      getThreadByTeacherAndStudent_result result = new getThreadByTeacherAndStudent_result();
      receiveBase(result, "getThreadByTeacherAndStudent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getThreadByTeacherAndStudent failed: unknown result");
    }

    public List<TQAThread> getThreadByTeacher(int teacherId, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_getThreadByTeacher(teacherId, access_token);
      return recv_getThreadByTeacher();
    }

    public void send_getThreadByTeacher(int teacherId, String access_token) throws org.apache.thrift.TException
    {
      getThreadByTeacher_args args = new getThreadByTeacher_args();
      args.setTeacherId(teacherId);
      args.setAccess_token(access_token);
      sendBase("getThreadByTeacher", args);
    }

    public List<TQAThread> recv_getThreadByTeacher() throws TPlasoException, org.apache.thrift.TException
    {
      getThreadByTeacher_result result = new getThreadByTeacher_result();
      receiveBase(result, "getThreadByTeacher");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getThreadByTeacher failed: unknown result");
    }

    public List<TQAThread> getThreadByStudent(int studentId, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_getThreadByStudent(studentId, access_token);
      return recv_getThreadByStudent();
    }

    public void send_getThreadByStudent(int studentId, String access_token) throws org.apache.thrift.TException
    {
      getThreadByStudent_args args = new getThreadByStudent_args();
      args.setStudentId(studentId);
      args.setAccess_token(access_token);
      sendBase("getThreadByStudent", args);
    }

    public List<TQAThread> recv_getThreadByStudent() throws TPlasoException, org.apache.thrift.TException
    {
      getThreadByStudent_result result = new getThreadByStudent_result();
      receiveBase(result, "getThreadByStudent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getThreadByStudent failed: unknown result");
    }

    public List<TQADetail> getQADetailByThreadId(int threadId, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_getQADetailByThreadId(threadId, access_token);
      return recv_getQADetailByThreadId();
    }

    public void send_getQADetailByThreadId(int threadId, String access_token) throws org.apache.thrift.TException
    {
      getQADetailByThreadId_args args = new getQADetailByThreadId_args();
      args.setThreadId(threadId);
      args.setAccess_token(access_token);
      sendBase("getQADetailByThreadId", args);
    }

    public List<TQADetail> recv_getQADetailByThreadId() throws TPlasoException, org.apache.thrift.TException
    {
      getQADetailByThreadId_result result = new getQADetailByThreadId_result();
      receiveBase(result, "getQADetailByThreadId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getQADetailByThreadId failed: unknown result");
    }

    public TQAThread createQAThread(TQAThread qaThread, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_createQAThread(qaThread, access_token);
      return recv_createQAThread();
    }

    public void send_createQAThread(TQAThread qaThread, String access_token) throws org.apache.thrift.TException
    {
      createQAThread_args args = new createQAThread_args();
      args.setQaThread(qaThread);
      args.setAccess_token(access_token);
      sendBase("createQAThread", args);
    }

    public TQAThread recv_createQAThread() throws TPlasoException, org.apache.thrift.TException
    {
      createQAThread_result result = new createQAThread_result();
      receiveBase(result, "createQAThread");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createQAThread failed: unknown result");
    }

    public TQADetail createQADetail(TQADetail detail, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_createQADetail(detail, access_token);
      return recv_createQADetail();
    }

    public void send_createQADetail(TQADetail detail, String access_token) throws org.apache.thrift.TException
    {
      createQADetail_args args = new createQADetail_args();
      args.setDetail(detail);
      args.setAccess_token(access_token);
      sendBase("createQADetail", args);
    }

    public TQADetail recv_createQADetail() throws TPlasoException, org.apache.thrift.TException
    {
      createQADetail_result result = new createQADetail_result();
      receiveBase(result, "createQADetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createQADetail failed: unknown result");
    }

    public boolean deleteQAThread(int id, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_deleteQAThread(id, access_token);
      return recv_deleteQAThread();
    }

    public void send_deleteQAThread(int id, String access_token) throws org.apache.thrift.TException
    {
      deleteQAThread_args args = new deleteQAThread_args();
      args.setId(id);
      args.setAccess_token(access_token);
      sendBase("deleteQAThread", args);
    }

    public boolean recv_deleteQAThread() throws TPlasoException, org.apache.thrift.TException
    {
      deleteQAThread_result result = new deleteQAThread_result();
      receiveBase(result, "deleteQAThread");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteQAThread failed: unknown result");
    }

    public boolean deleteQADetail(int id, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_deleteQADetail(id, access_token);
      return recv_deleteQADetail();
    }

    public void send_deleteQADetail(int id, String access_token) throws org.apache.thrift.TException
    {
      deleteQADetail_args args = new deleteQADetail_args();
      args.setId(id);
      args.setAccess_token(access_token);
      sendBase("deleteQADetail", args);
    }

    public boolean recv_deleteQADetail() throws TPlasoException, org.apache.thrift.TException
    {
      deleteQADetail_result result = new deleteQADetail_result();
      receiveBase(result, "deleteQADetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteQADetail failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getThreadByTeacherAndStudent(int teacherId, int stduentId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getThreadByTeacherAndStudent_call method_call = new getThreadByTeacherAndStudent_call(teacherId, stduentId, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getThreadByTeacherAndStudent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int teacherId;
      private int stduentId;
      private String access_token;
      public getThreadByTeacherAndStudent_call(int teacherId, int stduentId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.teacherId = teacherId;
        this.stduentId = stduentId;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getThreadByTeacherAndStudent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getThreadByTeacherAndStudent_args args = new getThreadByTeacherAndStudent_args();
        args.setTeacherId(teacherId);
        args.setStduentId(stduentId);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TQAThread> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getThreadByTeacherAndStudent();
      }
    }

    public void getThreadByTeacher(int teacherId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getThreadByTeacher_call method_call = new getThreadByTeacher_call(teacherId, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getThreadByTeacher_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int teacherId;
      private String access_token;
      public getThreadByTeacher_call(int teacherId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.teacherId = teacherId;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getThreadByTeacher", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getThreadByTeacher_args args = new getThreadByTeacher_args();
        args.setTeacherId(teacherId);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TQAThread> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getThreadByTeacher();
      }
    }

    public void getThreadByStudent(int studentId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getThreadByStudent_call method_call = new getThreadByStudent_call(studentId, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getThreadByStudent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int studentId;
      private String access_token;
      public getThreadByStudent_call(int studentId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.studentId = studentId;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getThreadByStudent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getThreadByStudent_args args = new getThreadByStudent_args();
        args.setStudentId(studentId);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TQAThread> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getThreadByStudent();
      }
    }

    public void getQADetailByThreadId(int threadId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getQADetailByThreadId_call method_call = new getQADetailByThreadId_call(threadId, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getQADetailByThreadId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int threadId;
      private String access_token;
      public getQADetailByThreadId_call(int threadId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.threadId = threadId;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getQADetailByThreadId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getQADetailByThreadId_args args = new getQADetailByThreadId_args();
        args.setThreadId(threadId);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TQADetail> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getQADetailByThreadId();
      }
    }

    public void createQAThread(TQAThread qaThread, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createQAThread_call method_call = new createQAThread_call(qaThread, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createQAThread_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TQAThread qaThread;
      private String access_token;
      public createQAThread_call(TQAThread qaThread, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.qaThread = qaThread;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createQAThread", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createQAThread_args args = new createQAThread_args();
        args.setQaThread(qaThread);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TQAThread getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createQAThread();
      }
    }

    public void createQADetail(TQADetail detail, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createQADetail_call method_call = new createQADetail_call(detail, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createQADetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TQADetail detail;
      private String access_token;
      public createQADetail_call(TQADetail detail, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.detail = detail;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createQADetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createQADetail_args args = new createQADetail_args();
        args.setDetail(detail);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TQADetail getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createQADetail();
      }
    }

    public void deleteQAThread(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteQAThread_call method_call = new deleteQAThread_call(id, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteQAThread_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      private String access_token;
      public deleteQAThread_call(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteQAThread", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteQAThread_args args = new deleteQAThread_args();
        args.setId(id);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteQAThread();
      }
    }

    public void deleteQADetail(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteQADetail_call method_call = new deleteQADetail_call(id, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteQADetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      private String access_token;
      public deleteQADetail_call(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteQADetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteQADetail_args args = new deleteQADetail_args();
        args.setId(id);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteQADetail();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getThreadByTeacherAndStudent", new getThreadByTeacherAndStudent());
      processMap.put("getThreadByTeacher", new getThreadByTeacher());
      processMap.put("getThreadByStudent", new getThreadByStudent());
      processMap.put("getQADetailByThreadId", new getQADetailByThreadId());
      processMap.put("createQAThread", new createQAThread());
      processMap.put("createQADetail", new createQADetail());
      processMap.put("deleteQAThread", new deleteQAThread());
      processMap.put("deleteQADetail", new deleteQADetail());
      return processMap;
    }

    public static class getThreadByTeacherAndStudent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getThreadByTeacherAndStudent_args> {
      public getThreadByTeacherAndStudent() {
        super("getThreadByTeacherAndStudent");
      }

      public getThreadByTeacherAndStudent_args getEmptyArgsInstance() {
        return new getThreadByTeacherAndStudent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getThreadByTeacherAndStudent_result getResult(I iface, getThreadByTeacherAndStudent_args args) throws org.apache.thrift.TException {
        getThreadByTeacherAndStudent_result result = new getThreadByTeacherAndStudent_result();
        try {
          result.success = iface.getThreadByTeacherAndStudent(args.teacherId, args.stduentId, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class getThreadByTeacher<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getThreadByTeacher_args> {
      public getThreadByTeacher() {
        super("getThreadByTeacher");
      }

      public getThreadByTeacher_args getEmptyArgsInstance() {
        return new getThreadByTeacher_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getThreadByTeacher_result getResult(I iface, getThreadByTeacher_args args) throws org.apache.thrift.TException {
        getThreadByTeacher_result result = new getThreadByTeacher_result();
        try {
          result.success = iface.getThreadByTeacher(args.teacherId, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class getThreadByStudent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getThreadByStudent_args> {
      public getThreadByStudent() {
        super("getThreadByStudent");
      }

      public getThreadByStudent_args getEmptyArgsInstance() {
        return new getThreadByStudent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getThreadByStudent_result getResult(I iface, getThreadByStudent_args args) throws org.apache.thrift.TException {
        getThreadByStudent_result result = new getThreadByStudent_result();
        try {
          result.success = iface.getThreadByStudent(args.studentId, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class getQADetailByThreadId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getQADetailByThreadId_args> {
      public getQADetailByThreadId() {
        super("getQADetailByThreadId");
      }

      public getQADetailByThreadId_args getEmptyArgsInstance() {
        return new getQADetailByThreadId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getQADetailByThreadId_result getResult(I iface, getQADetailByThreadId_args args) throws org.apache.thrift.TException {
        getQADetailByThreadId_result result = new getQADetailByThreadId_result();
        try {
          result.success = iface.getQADetailByThreadId(args.threadId, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class createQAThread<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createQAThread_args> {
      public createQAThread() {
        super("createQAThread");
      }

      public createQAThread_args getEmptyArgsInstance() {
        return new createQAThread_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createQAThread_result getResult(I iface, createQAThread_args args) throws org.apache.thrift.TException {
        createQAThread_result result = new createQAThread_result();
        try {
          result.success = iface.createQAThread(args.qaThread, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class createQADetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createQADetail_args> {
      public createQADetail() {
        super("createQADetail");
      }

      public createQADetail_args getEmptyArgsInstance() {
        return new createQADetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createQADetail_result getResult(I iface, createQADetail_args args) throws org.apache.thrift.TException {
        createQADetail_result result = new createQADetail_result();
        try {
          result.success = iface.createQADetail(args.detail, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class deleteQAThread<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteQAThread_args> {
      public deleteQAThread() {
        super("deleteQAThread");
      }

      public deleteQAThread_args getEmptyArgsInstance() {
        return new deleteQAThread_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteQAThread_result getResult(I iface, deleteQAThread_args args) throws org.apache.thrift.TException {
        deleteQAThread_result result = new deleteQAThread_result();
        try {
          result.success = iface.deleteQAThread(args.id, args.access_token);
          result.setSuccessIsSet(true);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class deleteQADetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteQADetail_args> {
      public deleteQADetail() {
        super("deleteQADetail");
      }

      public deleteQADetail_args getEmptyArgsInstance() {
        return new deleteQADetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteQADetail_result getResult(I iface, deleteQADetail_args args) throws org.apache.thrift.TException {
        deleteQADetail_result result = new deleteQADetail_result();
        try {
          result.success = iface.deleteQADetail(args.id, args.access_token);
          result.setSuccessIsSet(true);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getThreadByTeacherAndStudent", new getThreadByTeacherAndStudent());
      processMap.put("getThreadByTeacher", new getThreadByTeacher());
      processMap.put("getThreadByStudent", new getThreadByStudent());
      processMap.put("getQADetailByThreadId", new getQADetailByThreadId());
      processMap.put("createQAThread", new createQAThread());
      processMap.put("createQADetail", new createQADetail());
      processMap.put("deleteQAThread", new deleteQAThread());
      processMap.put("deleteQADetail", new deleteQADetail());
      return processMap;
    }

    public static class getThreadByTeacherAndStudent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getThreadByTeacherAndStudent_args, List<TQAThread>> {
      public getThreadByTeacherAndStudent() {
        super("getThreadByTeacherAndStudent");
      }

      public getThreadByTeacherAndStudent_args getEmptyArgsInstance() {
        return new getThreadByTeacherAndStudent_args();
      }

      public AsyncMethodCallback<List<TQAThread>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TQAThread>>() { 
          public void onComplete(List<TQAThread> o) {
            getThreadByTeacherAndStudent_result result = new getThreadByTeacherAndStudent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getThreadByTeacherAndStudent_result result = new getThreadByTeacherAndStudent_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getThreadByTeacherAndStudent_args args, org.apache.thrift.async.AsyncMethodCallback<List<TQAThread>> resultHandler) throws TException {
        iface.getThreadByTeacherAndStudent(args.teacherId, args.stduentId, args.access_token,resultHandler);
      }
    }

    public static class getThreadByTeacher<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getThreadByTeacher_args, List<TQAThread>> {
      public getThreadByTeacher() {
        super("getThreadByTeacher");
      }

      public getThreadByTeacher_args getEmptyArgsInstance() {
        return new getThreadByTeacher_args();
      }

      public AsyncMethodCallback<List<TQAThread>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TQAThread>>() { 
          public void onComplete(List<TQAThread> o) {
            getThreadByTeacher_result result = new getThreadByTeacher_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getThreadByTeacher_result result = new getThreadByTeacher_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getThreadByTeacher_args args, org.apache.thrift.async.AsyncMethodCallback<List<TQAThread>> resultHandler) throws TException {
        iface.getThreadByTeacher(args.teacherId, args.access_token,resultHandler);
      }
    }

    public static class getThreadByStudent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getThreadByStudent_args, List<TQAThread>> {
      public getThreadByStudent() {
        super("getThreadByStudent");
      }

      public getThreadByStudent_args getEmptyArgsInstance() {
        return new getThreadByStudent_args();
      }

      public AsyncMethodCallback<List<TQAThread>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TQAThread>>() { 
          public void onComplete(List<TQAThread> o) {
            getThreadByStudent_result result = new getThreadByStudent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getThreadByStudent_result result = new getThreadByStudent_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getThreadByStudent_args args, org.apache.thrift.async.AsyncMethodCallback<List<TQAThread>> resultHandler) throws TException {
        iface.getThreadByStudent(args.studentId, args.access_token,resultHandler);
      }
    }

    public static class getQADetailByThreadId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getQADetailByThreadId_args, List<TQADetail>> {
      public getQADetailByThreadId() {
        super("getQADetailByThreadId");
      }

      public getQADetailByThreadId_args getEmptyArgsInstance() {
        return new getQADetailByThreadId_args();
      }

      public AsyncMethodCallback<List<TQADetail>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TQADetail>>() { 
          public void onComplete(List<TQADetail> o) {
            getQADetailByThreadId_result result = new getQADetailByThreadId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getQADetailByThreadId_result result = new getQADetailByThreadId_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getQADetailByThreadId_args args, org.apache.thrift.async.AsyncMethodCallback<List<TQADetail>> resultHandler) throws TException {
        iface.getQADetailByThreadId(args.threadId, args.access_token,resultHandler);
      }
    }

    public static class createQAThread<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createQAThread_args, TQAThread> {
      public createQAThread() {
        super("createQAThread");
      }

      public createQAThread_args getEmptyArgsInstance() {
        return new createQAThread_args();
      }

      public AsyncMethodCallback<TQAThread> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TQAThread>() { 
          public void onComplete(TQAThread o) {
            createQAThread_result result = new createQAThread_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createQAThread_result result = new createQAThread_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createQAThread_args args, org.apache.thrift.async.AsyncMethodCallback<TQAThread> resultHandler) throws TException {
        iface.createQAThread(args.qaThread, args.access_token,resultHandler);
      }
    }

    public static class createQADetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createQADetail_args, TQADetail> {
      public createQADetail() {
        super("createQADetail");
      }

      public createQADetail_args getEmptyArgsInstance() {
        return new createQADetail_args();
      }

      public AsyncMethodCallback<TQADetail> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TQADetail>() { 
          public void onComplete(TQADetail o) {
            createQADetail_result result = new createQADetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createQADetail_result result = new createQADetail_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createQADetail_args args, org.apache.thrift.async.AsyncMethodCallback<TQADetail> resultHandler) throws TException {
        iface.createQADetail(args.detail, args.access_token,resultHandler);
      }
    }

    public static class deleteQAThread<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteQAThread_args, Boolean> {
      public deleteQAThread() {
        super("deleteQAThread");
      }

      public deleteQAThread_args getEmptyArgsInstance() {
        return new deleteQAThread_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteQAThread_result result = new deleteQAThread_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteQAThread_result result = new deleteQAThread_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteQAThread_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteQAThread(args.id, args.access_token,resultHandler);
      }
    }

    public static class deleteQADetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteQADetail_args, Boolean> {
      public deleteQADetail() {
        super("deleteQADetail");
      }

      public deleteQADetail_args getEmptyArgsInstance() {
        return new deleteQADetail_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteQADetail_result result = new deleteQADetail_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteQADetail_result result = new deleteQADetail_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteQADetail_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteQADetail(args.id, args.access_token,resultHandler);
      }
    }

  }

  public static class getThreadByTeacherAndStudent_args implements org.apache.thrift.TBase<getThreadByTeacherAndStudent_args, getThreadByTeacherAndStudent_args._Fields>, java.io.Serializable, Cloneable, Comparable<getThreadByTeacherAndStudent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getThreadByTeacherAndStudent_args");

    private static final org.apache.thrift.protocol.TField TEACHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STDUENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stduentId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getThreadByTeacherAndStudent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getThreadByTeacherAndStudent_argsTupleSchemeFactory());
    }

    public int teacherId; // required
    public int stduentId; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEACHER_ID((short)1, "teacherId"),
      STDUENT_ID((short)2, "stduentId"),
      ACCESS_TOKEN((short)3, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEACHER_ID
            return TEACHER_ID;
          case 2: // STDUENT_ID
            return STDUENT_ID;
          case 3: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TEACHERID_ISSET_ID = 0;
    private static final int __STDUENTID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEACHER_ID, new org.apache.thrift.meta_data.FieldMetaData("teacherId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STDUENT_ID, new org.apache.thrift.meta_data.FieldMetaData("stduentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getThreadByTeacherAndStudent_args.class, metaDataMap);
    }

    public getThreadByTeacherAndStudent_args() {
    }

    public getThreadByTeacherAndStudent_args(
      int teacherId,
      int stduentId,
      String access_token)
    {
      this();
      this.teacherId = teacherId;
      setTeacherIdIsSet(true);
      this.stduentId = stduentId;
      setStduentIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getThreadByTeacherAndStudent_args(getThreadByTeacherAndStudent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.teacherId = other.teacherId;
      this.stduentId = other.stduentId;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public getThreadByTeacherAndStudent_args deepCopy() {
      return new getThreadByTeacherAndStudent_args(this);
    }

    @Override
    public void clear() {
      setTeacherIdIsSet(false);
      this.teacherId = 0;
      setStduentIdIsSet(false);
      this.stduentId = 0;
      this.access_token = null;
    }

    public int getTeacherId() {
      return this.teacherId;
    }

    public getThreadByTeacherAndStudent_args setTeacherId(int teacherId) {
      this.teacherId = teacherId;
      setTeacherIdIsSet(true);
      return this;
    }

    public void unsetTeacherId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEACHERID_ISSET_ID);
    }

    /** Returns true if field teacherId is set (has been assigned a value) and false otherwise */
    public boolean isSetTeacherId() {
      return EncodingUtils.testBit(__isset_bitfield, __TEACHERID_ISSET_ID);
    }

    public void setTeacherIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEACHERID_ISSET_ID, value);
    }

    public int getStduentId() {
      return this.stduentId;
    }

    public getThreadByTeacherAndStudent_args setStduentId(int stduentId) {
      this.stduentId = stduentId;
      setStduentIdIsSet(true);
      return this;
    }

    public void unsetStduentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STDUENTID_ISSET_ID);
    }

    /** Returns true if field stduentId is set (has been assigned a value) and false otherwise */
    public boolean isSetStduentId() {
      return EncodingUtils.testBit(__isset_bitfield, __STDUENTID_ISSET_ID);
    }

    public void setStduentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STDUENTID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public getThreadByTeacherAndStudent_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEACHER_ID:
        if (value == null) {
          unsetTeacherId();
        } else {
          setTeacherId((Integer)value);
        }
        break;

      case STDUENT_ID:
        if (value == null) {
          unsetStduentId();
        } else {
          setStduentId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEACHER_ID:
        return Integer.valueOf(getTeacherId());

      case STDUENT_ID:
        return Integer.valueOf(getStduentId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEACHER_ID:
        return isSetTeacherId();
      case STDUENT_ID:
        return isSetStduentId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getThreadByTeacherAndStudent_args)
        return this.equals((getThreadByTeacherAndStudent_args)that);
      return false;
    }

    public boolean equals(getThreadByTeacherAndStudent_args that) {
      if (that == null)
        return false;

      boolean this_present_teacherId = true;
      boolean that_present_teacherId = true;
      if (this_present_teacherId || that_present_teacherId) {
        if (!(this_present_teacherId && that_present_teacherId))
          return false;
        if (this.teacherId != that.teacherId)
          return false;
      }

      boolean this_present_stduentId = true;
      boolean that_present_stduentId = true;
      if (this_present_stduentId || that_present_stduentId) {
        if (!(this_present_stduentId && that_present_stduentId))
          return false;
        if (this.stduentId != that.stduentId)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getThreadByTeacherAndStudent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTeacherId()).compareTo(other.isSetTeacherId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeacherId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherId, other.teacherId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStduentId()).compareTo(other.isSetStduentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStduentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stduentId, other.stduentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getThreadByTeacherAndStudent_args(");
      boolean first = true;

      sb.append("teacherId:");
      sb.append(this.teacherId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stduentId:");
      sb.append(this.stduentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getThreadByTeacherAndStudent_argsStandardSchemeFactory implements SchemeFactory {
      public getThreadByTeacherAndStudent_argsStandardScheme getScheme() {
        return new getThreadByTeacherAndStudent_argsStandardScheme();
      }
    }

    private static class getThreadByTeacherAndStudent_argsStandardScheme extends StandardScheme<getThreadByTeacherAndStudent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getThreadByTeacherAndStudent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEACHER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.teacherId = iprot.readI32();
                struct.setTeacherIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STDUENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.stduentId = iprot.readI32();
                struct.setStduentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getThreadByTeacherAndStudent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TEACHER_ID_FIELD_DESC);
        oprot.writeI32(struct.teacherId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STDUENT_ID_FIELD_DESC);
        oprot.writeI32(struct.stduentId);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getThreadByTeacherAndStudent_argsTupleSchemeFactory implements SchemeFactory {
      public getThreadByTeacherAndStudent_argsTupleScheme getScheme() {
        return new getThreadByTeacherAndStudent_argsTupleScheme();
      }
    }

    private static class getThreadByTeacherAndStudent_argsTupleScheme extends TupleScheme<getThreadByTeacherAndStudent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getThreadByTeacherAndStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTeacherId()) {
          optionals.set(0);
        }
        if (struct.isSetStduentId()) {
          optionals.set(1);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTeacherId()) {
          oprot.writeI32(struct.teacherId);
        }
        if (struct.isSetStduentId()) {
          oprot.writeI32(struct.stduentId);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getThreadByTeacherAndStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.teacherId = iprot.readI32();
          struct.setTeacherIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stduentId = iprot.readI32();
          struct.setStduentIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class getThreadByTeacherAndStudent_result implements org.apache.thrift.TBase<getThreadByTeacherAndStudent_result, getThreadByTeacherAndStudent_result._Fields>, java.io.Serializable, Cloneable, Comparable<getThreadByTeacherAndStudent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getThreadByTeacherAndStudent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getThreadByTeacherAndStudent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getThreadByTeacherAndStudent_resultTupleSchemeFactory());
    }

    public List<TQAThread> success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQAThread.class))));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getThreadByTeacherAndStudent_result.class, metaDataMap);
    }

    public getThreadByTeacherAndStudent_result() {
    }

    public getThreadByTeacherAndStudent_result(
      List<TQAThread> success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getThreadByTeacherAndStudent_result(getThreadByTeacherAndStudent_result other) {
      if (other.isSetSuccess()) {
        List<TQAThread> __this__success = new ArrayList<TQAThread>(other.success.size());
        for (TQAThread other_element : other.success) {
          __this__success.add(new TQAThread(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public getThreadByTeacherAndStudent_result deepCopy() {
      return new getThreadByTeacherAndStudent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TQAThread> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TQAThread elem) {
      if (this.success == null) {
        this.success = new ArrayList<TQAThread>();
      }
      this.success.add(elem);
    }

    public List<TQAThread> getSuccess() {
      return this.success;
    }

    public getThreadByTeacherAndStudent_result setSuccess(List<TQAThread> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public getThreadByTeacherAndStudent_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TQAThread>)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getThreadByTeacherAndStudent_result)
        return this.equals((getThreadByTeacherAndStudent_result)that);
      return false;
    }

    public boolean equals(getThreadByTeacherAndStudent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getThreadByTeacherAndStudent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getThreadByTeacherAndStudent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getThreadByTeacherAndStudent_resultStandardSchemeFactory implements SchemeFactory {
      public getThreadByTeacherAndStudent_resultStandardScheme getScheme() {
        return new getThreadByTeacherAndStudent_resultStandardScheme();
      }
    }

    private static class getThreadByTeacherAndStudent_resultStandardScheme extends StandardScheme<getThreadByTeacherAndStudent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getThreadByTeacherAndStudent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<TQAThread>(_list80.size);
                  for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                  {
                    TQAThread _elem82;
                    _elem82 = new TQAThread();
                    _elem82.read(iprot);
                    struct.success.add(_elem82);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getThreadByTeacherAndStudent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TQAThread _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getThreadByTeacherAndStudent_resultTupleSchemeFactory implements SchemeFactory {
      public getThreadByTeacherAndStudent_resultTupleScheme getScheme() {
        return new getThreadByTeacherAndStudent_resultTupleScheme();
      }
    }

    private static class getThreadByTeacherAndStudent_resultTupleScheme extends TupleScheme<getThreadByTeacherAndStudent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getThreadByTeacherAndStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TQAThread _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getThreadByTeacherAndStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TQAThread>(_list85.size);
            for (int _i86 = 0; _i86 < _list85.size; ++_i86)
            {
              TQAThread _elem87;
              _elem87 = new TQAThread();
              _elem87.read(iprot);
              struct.success.add(_elem87);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class getThreadByTeacher_args implements org.apache.thrift.TBase<getThreadByTeacher_args, getThreadByTeacher_args._Fields>, java.io.Serializable, Cloneable, Comparable<getThreadByTeacher_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getThreadByTeacher_args");

    private static final org.apache.thrift.protocol.TField TEACHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getThreadByTeacher_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getThreadByTeacher_argsTupleSchemeFactory());
    }

    public int teacherId; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEACHER_ID((short)1, "teacherId"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEACHER_ID
            return TEACHER_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TEACHERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEACHER_ID, new org.apache.thrift.meta_data.FieldMetaData("teacherId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getThreadByTeacher_args.class, metaDataMap);
    }

    public getThreadByTeacher_args() {
    }

    public getThreadByTeacher_args(
      int teacherId,
      String access_token)
    {
      this();
      this.teacherId = teacherId;
      setTeacherIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getThreadByTeacher_args(getThreadByTeacher_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.teacherId = other.teacherId;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public getThreadByTeacher_args deepCopy() {
      return new getThreadByTeacher_args(this);
    }

    @Override
    public void clear() {
      setTeacherIdIsSet(false);
      this.teacherId = 0;
      this.access_token = null;
    }

    public int getTeacherId() {
      return this.teacherId;
    }

    public getThreadByTeacher_args setTeacherId(int teacherId) {
      this.teacherId = teacherId;
      setTeacherIdIsSet(true);
      return this;
    }

    public void unsetTeacherId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEACHERID_ISSET_ID);
    }

    /** Returns true if field teacherId is set (has been assigned a value) and false otherwise */
    public boolean isSetTeacherId() {
      return EncodingUtils.testBit(__isset_bitfield, __TEACHERID_ISSET_ID);
    }

    public void setTeacherIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEACHERID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public getThreadByTeacher_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEACHER_ID:
        if (value == null) {
          unsetTeacherId();
        } else {
          setTeacherId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEACHER_ID:
        return Integer.valueOf(getTeacherId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEACHER_ID:
        return isSetTeacherId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getThreadByTeacher_args)
        return this.equals((getThreadByTeacher_args)that);
      return false;
    }

    public boolean equals(getThreadByTeacher_args that) {
      if (that == null)
        return false;

      boolean this_present_teacherId = true;
      boolean that_present_teacherId = true;
      if (this_present_teacherId || that_present_teacherId) {
        if (!(this_present_teacherId && that_present_teacherId))
          return false;
        if (this.teacherId != that.teacherId)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getThreadByTeacher_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTeacherId()).compareTo(other.isSetTeacherId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeacherId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherId, other.teacherId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getThreadByTeacher_args(");
      boolean first = true;

      sb.append("teacherId:");
      sb.append(this.teacherId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getThreadByTeacher_argsStandardSchemeFactory implements SchemeFactory {
      public getThreadByTeacher_argsStandardScheme getScheme() {
        return new getThreadByTeacher_argsStandardScheme();
      }
    }

    private static class getThreadByTeacher_argsStandardScheme extends StandardScheme<getThreadByTeacher_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getThreadByTeacher_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEACHER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.teacherId = iprot.readI32();
                struct.setTeacherIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getThreadByTeacher_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TEACHER_ID_FIELD_DESC);
        oprot.writeI32(struct.teacherId);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getThreadByTeacher_argsTupleSchemeFactory implements SchemeFactory {
      public getThreadByTeacher_argsTupleScheme getScheme() {
        return new getThreadByTeacher_argsTupleScheme();
      }
    }

    private static class getThreadByTeacher_argsTupleScheme extends TupleScheme<getThreadByTeacher_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getThreadByTeacher_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTeacherId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTeacherId()) {
          oprot.writeI32(struct.teacherId);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getThreadByTeacher_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.teacherId = iprot.readI32();
          struct.setTeacherIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class getThreadByTeacher_result implements org.apache.thrift.TBase<getThreadByTeacher_result, getThreadByTeacher_result._Fields>, java.io.Serializable, Cloneable, Comparable<getThreadByTeacher_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getThreadByTeacher_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getThreadByTeacher_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getThreadByTeacher_resultTupleSchemeFactory());
    }

    public List<TQAThread> success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQAThread.class))));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getThreadByTeacher_result.class, metaDataMap);
    }

    public getThreadByTeacher_result() {
    }

    public getThreadByTeacher_result(
      List<TQAThread> success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getThreadByTeacher_result(getThreadByTeacher_result other) {
      if (other.isSetSuccess()) {
        List<TQAThread> __this__success = new ArrayList<TQAThread>(other.success.size());
        for (TQAThread other_element : other.success) {
          __this__success.add(new TQAThread(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public getThreadByTeacher_result deepCopy() {
      return new getThreadByTeacher_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TQAThread> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TQAThread elem) {
      if (this.success == null) {
        this.success = new ArrayList<TQAThread>();
      }
      this.success.add(elem);
    }

    public List<TQAThread> getSuccess() {
      return this.success;
    }

    public getThreadByTeacher_result setSuccess(List<TQAThread> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public getThreadByTeacher_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TQAThread>)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getThreadByTeacher_result)
        return this.equals((getThreadByTeacher_result)that);
      return false;
    }

    public boolean equals(getThreadByTeacher_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getThreadByTeacher_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getThreadByTeacher_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getThreadByTeacher_resultStandardSchemeFactory implements SchemeFactory {
      public getThreadByTeacher_resultStandardScheme getScheme() {
        return new getThreadByTeacher_resultStandardScheme();
      }
    }

    private static class getThreadByTeacher_resultStandardScheme extends StandardScheme<getThreadByTeacher_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getThreadByTeacher_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<TQAThread>(_list88.size);
                  for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                  {
                    TQAThread _elem90;
                    _elem90 = new TQAThread();
                    _elem90.read(iprot);
                    struct.success.add(_elem90);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getThreadByTeacher_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TQAThread _iter91 : struct.success)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getThreadByTeacher_resultTupleSchemeFactory implements SchemeFactory {
      public getThreadByTeacher_resultTupleScheme getScheme() {
        return new getThreadByTeacher_resultTupleScheme();
      }
    }

    private static class getThreadByTeacher_resultTupleScheme extends TupleScheme<getThreadByTeacher_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getThreadByTeacher_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TQAThread _iter92 : struct.success)
            {
              _iter92.write(oprot);
            }
          }
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getThreadByTeacher_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TQAThread>(_list93.size);
            for (int _i94 = 0; _i94 < _list93.size; ++_i94)
            {
              TQAThread _elem95;
              _elem95 = new TQAThread();
              _elem95.read(iprot);
              struct.success.add(_elem95);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class getThreadByStudent_args implements org.apache.thrift.TBase<getThreadByStudent_args, getThreadByStudent_args._Fields>, java.io.Serializable, Cloneable, Comparable<getThreadByStudent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getThreadByStudent_args");

    private static final org.apache.thrift.protocol.TField STUDENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("studentId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getThreadByStudent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getThreadByStudent_argsTupleSchemeFactory());
    }

    public int studentId; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT_ID((short)1, "studentId"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT_ID
            return STUDENT_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUDENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT_ID, new org.apache.thrift.meta_data.FieldMetaData("studentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getThreadByStudent_args.class, metaDataMap);
    }

    public getThreadByStudent_args() {
    }

    public getThreadByStudent_args(
      int studentId,
      String access_token)
    {
      this();
      this.studentId = studentId;
      setStudentIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getThreadByStudent_args(getThreadByStudent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.studentId = other.studentId;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public getThreadByStudent_args deepCopy() {
      return new getThreadByStudent_args(this);
    }

    @Override
    public void clear() {
      setStudentIdIsSet(false);
      this.studentId = 0;
      this.access_token = null;
    }

    public int getStudentId() {
      return this.studentId;
    }

    public getThreadByStudent_args setStudentId(int studentId) {
      this.studentId = studentId;
      setStudentIdIsSet(true);
      return this;
    }

    public void unsetStudentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUDENTID_ISSET_ID);
    }

    /** Returns true if field studentId is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUDENTID_ISSET_ID);
    }

    public void setStudentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUDENTID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public getThreadByStudent_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENT_ID:
        if (value == null) {
          unsetStudentId();
        } else {
          setStudentId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT_ID:
        return Integer.valueOf(getStudentId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT_ID:
        return isSetStudentId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getThreadByStudent_args)
        return this.equals((getThreadByStudent_args)that);
      return false;
    }

    public boolean equals(getThreadByStudent_args that) {
      if (that == null)
        return false;

      boolean this_present_studentId = true;
      boolean that_present_studentId = true;
      if (this_present_studentId || that_present_studentId) {
        if (!(this_present_studentId && that_present_studentId))
          return false;
        if (this.studentId != that.studentId)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getThreadByStudent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStudentId()).compareTo(other.isSetStudentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentId, other.studentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getThreadByStudent_args(");
      boolean first = true;

      sb.append("studentId:");
      sb.append(this.studentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getThreadByStudent_argsStandardSchemeFactory implements SchemeFactory {
      public getThreadByStudent_argsStandardScheme getScheme() {
        return new getThreadByStudent_argsStandardScheme();
      }
    }

    private static class getThreadByStudent_argsStandardScheme extends StandardScheme<getThreadByStudent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getThreadByStudent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.studentId = iprot.readI32();
                struct.setStudentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getThreadByStudent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STUDENT_ID_FIELD_DESC);
        oprot.writeI32(struct.studentId);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getThreadByStudent_argsTupleSchemeFactory implements SchemeFactory {
      public getThreadByStudent_argsTupleScheme getScheme() {
        return new getThreadByStudent_argsTupleScheme();
      }
    }

    private static class getThreadByStudent_argsTupleScheme extends TupleScheme<getThreadByStudent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getThreadByStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStudentId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStudentId()) {
          oprot.writeI32(struct.studentId);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getThreadByStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.studentId = iprot.readI32();
          struct.setStudentIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class getThreadByStudent_result implements org.apache.thrift.TBase<getThreadByStudent_result, getThreadByStudent_result._Fields>, java.io.Serializable, Cloneable, Comparable<getThreadByStudent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getThreadByStudent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getThreadByStudent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getThreadByStudent_resultTupleSchemeFactory());
    }

    public List<TQAThread> success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQAThread.class))));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getThreadByStudent_result.class, metaDataMap);
    }

    public getThreadByStudent_result() {
    }

    public getThreadByStudent_result(
      List<TQAThread> success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getThreadByStudent_result(getThreadByStudent_result other) {
      if (other.isSetSuccess()) {
        List<TQAThread> __this__success = new ArrayList<TQAThread>(other.success.size());
        for (TQAThread other_element : other.success) {
          __this__success.add(new TQAThread(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public getThreadByStudent_result deepCopy() {
      return new getThreadByStudent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TQAThread> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TQAThread elem) {
      if (this.success == null) {
        this.success = new ArrayList<TQAThread>();
      }
      this.success.add(elem);
    }

    public List<TQAThread> getSuccess() {
      return this.success;
    }

    public getThreadByStudent_result setSuccess(List<TQAThread> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public getThreadByStudent_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TQAThread>)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getThreadByStudent_result)
        return this.equals((getThreadByStudent_result)that);
      return false;
    }

    public boolean equals(getThreadByStudent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getThreadByStudent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getThreadByStudent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getThreadByStudent_resultStandardSchemeFactory implements SchemeFactory {
      public getThreadByStudent_resultStandardScheme getScheme() {
        return new getThreadByStudent_resultStandardScheme();
      }
    }

    private static class getThreadByStudent_resultStandardScheme extends StandardScheme<getThreadByStudent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getThreadByStudent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new ArrayList<TQAThread>(_list96.size);
                  for (int _i97 = 0; _i97 < _list96.size; ++_i97)
                  {
                    TQAThread _elem98;
                    _elem98 = new TQAThread();
                    _elem98.read(iprot);
                    struct.success.add(_elem98);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getThreadByStudent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TQAThread _iter99 : struct.success)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getThreadByStudent_resultTupleSchemeFactory implements SchemeFactory {
      public getThreadByStudent_resultTupleScheme getScheme() {
        return new getThreadByStudent_resultTupleScheme();
      }
    }

    private static class getThreadByStudent_resultTupleScheme extends TupleScheme<getThreadByStudent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getThreadByStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TQAThread _iter100 : struct.success)
            {
              _iter100.write(oprot);
            }
          }
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getThreadByStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TQAThread>(_list101.size);
            for (int _i102 = 0; _i102 < _list101.size; ++_i102)
            {
              TQAThread _elem103;
              _elem103 = new TQAThread();
              _elem103.read(iprot);
              struct.success.add(_elem103);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class getQADetailByThreadId_args implements org.apache.thrift.TBase<getQADetailByThreadId_args, getQADetailByThreadId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getQADetailByThreadId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQADetailByThreadId_args");

    private static final org.apache.thrift.protocol.TField THREAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("threadId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getQADetailByThreadId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getQADetailByThreadId_argsTupleSchemeFactory());
    }

    public int threadId; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      THREAD_ID((short)1, "threadId"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // THREAD_ID
            return THREAD_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __THREADID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.THREAD_ID, new org.apache.thrift.meta_data.FieldMetaData("threadId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQADetailByThreadId_args.class, metaDataMap);
    }

    public getQADetailByThreadId_args() {
    }

    public getQADetailByThreadId_args(
      int threadId,
      String access_token)
    {
      this();
      this.threadId = threadId;
      setThreadIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQADetailByThreadId_args(getQADetailByThreadId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.threadId = other.threadId;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public getQADetailByThreadId_args deepCopy() {
      return new getQADetailByThreadId_args(this);
    }

    @Override
    public void clear() {
      setThreadIdIsSet(false);
      this.threadId = 0;
      this.access_token = null;
    }

    public int getThreadId() {
      return this.threadId;
    }

    public getQADetailByThreadId_args setThreadId(int threadId) {
      this.threadId = threadId;
      setThreadIdIsSet(true);
      return this;
    }

    public void unsetThreadId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THREADID_ISSET_ID);
    }

    /** Returns true if field threadId is set (has been assigned a value) and false otherwise */
    public boolean isSetThreadId() {
      return EncodingUtils.testBit(__isset_bitfield, __THREADID_ISSET_ID);
    }

    public void setThreadIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THREADID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public getQADetailByThreadId_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case THREAD_ID:
        if (value == null) {
          unsetThreadId();
        } else {
          setThreadId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case THREAD_ID:
        return Integer.valueOf(getThreadId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case THREAD_ID:
        return isSetThreadId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getQADetailByThreadId_args)
        return this.equals((getQADetailByThreadId_args)that);
      return false;
    }

    public boolean equals(getQADetailByThreadId_args that) {
      if (that == null)
        return false;

      boolean this_present_threadId = true;
      boolean that_present_threadId = true;
      if (this_present_threadId || that_present_threadId) {
        if (!(this_present_threadId && that_present_threadId))
          return false;
        if (this.threadId != that.threadId)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getQADetailByThreadId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetThreadId()).compareTo(other.isSetThreadId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThreadId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadId, other.threadId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getQADetailByThreadId_args(");
      boolean first = true;

      sb.append("threadId:");
      sb.append(this.threadId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQADetailByThreadId_argsStandardSchemeFactory implements SchemeFactory {
      public getQADetailByThreadId_argsStandardScheme getScheme() {
        return new getQADetailByThreadId_argsStandardScheme();
      }
    }

    private static class getQADetailByThreadId_argsStandardScheme extends StandardScheme<getQADetailByThreadId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQADetailByThreadId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // THREAD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.threadId = iprot.readI32();
                struct.setThreadIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQADetailByThreadId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(THREAD_ID_FIELD_DESC);
        oprot.writeI32(struct.threadId);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQADetailByThreadId_argsTupleSchemeFactory implements SchemeFactory {
      public getQADetailByThreadId_argsTupleScheme getScheme() {
        return new getQADetailByThreadId_argsTupleScheme();
      }
    }

    private static class getQADetailByThreadId_argsTupleScheme extends TupleScheme<getQADetailByThreadId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQADetailByThreadId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetThreadId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetThreadId()) {
          oprot.writeI32(struct.threadId);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQADetailByThreadId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.threadId = iprot.readI32();
          struct.setThreadIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class getQADetailByThreadId_result implements org.apache.thrift.TBase<getQADetailByThreadId_result, getQADetailByThreadId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getQADetailByThreadId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQADetailByThreadId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getQADetailByThreadId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getQADetailByThreadId_resultTupleSchemeFactory());
    }

    public List<TQADetail> success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQADetail.class))));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQADetailByThreadId_result.class, metaDataMap);
    }

    public getQADetailByThreadId_result() {
    }

    public getQADetailByThreadId_result(
      List<TQADetail> success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQADetailByThreadId_result(getQADetailByThreadId_result other) {
      if (other.isSetSuccess()) {
        List<TQADetail> __this__success = new ArrayList<TQADetail>(other.success.size());
        for (TQADetail other_element : other.success) {
          __this__success.add(new TQADetail(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public getQADetailByThreadId_result deepCopy() {
      return new getQADetailByThreadId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TQADetail> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TQADetail elem) {
      if (this.success == null) {
        this.success = new ArrayList<TQADetail>();
      }
      this.success.add(elem);
    }

    public List<TQADetail> getSuccess() {
      return this.success;
    }

    public getQADetailByThreadId_result setSuccess(List<TQADetail> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public getQADetailByThreadId_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TQADetail>)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getQADetailByThreadId_result)
        return this.equals((getQADetailByThreadId_result)that);
      return false;
    }

    public boolean equals(getQADetailByThreadId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getQADetailByThreadId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getQADetailByThreadId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQADetailByThreadId_resultStandardSchemeFactory implements SchemeFactory {
      public getQADetailByThreadId_resultStandardScheme getScheme() {
        return new getQADetailByThreadId_resultStandardScheme();
      }
    }

    private static class getQADetailByThreadId_resultStandardScheme extends StandardScheme<getQADetailByThreadId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQADetailByThreadId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new ArrayList<TQADetail>(_list104.size);
                  for (int _i105 = 0; _i105 < _list104.size; ++_i105)
                  {
                    TQADetail _elem106;
                    _elem106 = new TQADetail();
                    _elem106.read(iprot);
                    struct.success.add(_elem106);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQADetailByThreadId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TQADetail _iter107 : struct.success)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQADetailByThreadId_resultTupleSchemeFactory implements SchemeFactory {
      public getQADetailByThreadId_resultTupleScheme getScheme() {
        return new getQADetailByThreadId_resultTupleScheme();
      }
    }

    private static class getQADetailByThreadId_resultTupleScheme extends TupleScheme<getQADetailByThreadId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQADetailByThreadId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TQADetail _iter108 : struct.success)
            {
              _iter108.write(oprot);
            }
          }
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQADetailByThreadId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TQADetail>(_list109.size);
            for (int _i110 = 0; _i110 < _list109.size; ++_i110)
            {
              TQADetail _elem111;
              _elem111 = new TQADetail();
              _elem111.read(iprot);
              struct.success.add(_elem111);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class createQAThread_args implements org.apache.thrift.TBase<createQAThread_args, createQAThread_args._Fields>, java.io.Serializable, Cloneable, Comparable<createQAThread_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createQAThread_args");

    private static final org.apache.thrift.protocol.TField QA_THREAD_FIELD_DESC = new org.apache.thrift.protocol.TField("qaThread", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createQAThread_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createQAThread_argsTupleSchemeFactory());
    }

    public TQAThread qaThread; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QA_THREAD((short)1, "qaThread"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QA_THREAD
            return QA_THREAD;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QA_THREAD, new org.apache.thrift.meta_data.FieldMetaData("qaThread", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQAThread.class)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createQAThread_args.class, metaDataMap);
    }

    public createQAThread_args() {
    }

    public createQAThread_args(
      TQAThread qaThread,
      String access_token)
    {
      this();
      this.qaThread = qaThread;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createQAThread_args(createQAThread_args other) {
      if (other.isSetQaThread()) {
        this.qaThread = new TQAThread(other.qaThread);
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public createQAThread_args deepCopy() {
      return new createQAThread_args(this);
    }

    @Override
    public void clear() {
      this.qaThread = null;
      this.access_token = null;
    }

    public TQAThread getQaThread() {
      return this.qaThread;
    }

    public createQAThread_args setQaThread(TQAThread qaThread) {
      this.qaThread = qaThread;
      return this;
    }

    public void unsetQaThread() {
      this.qaThread = null;
    }

    /** Returns true if field qaThread is set (has been assigned a value) and false otherwise */
    public boolean isSetQaThread() {
      return this.qaThread != null;
    }

    public void setQaThreadIsSet(boolean value) {
      if (!value) {
        this.qaThread = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public createQAThread_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QA_THREAD:
        if (value == null) {
          unsetQaThread();
        } else {
          setQaThread((TQAThread)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QA_THREAD:
        return getQaThread();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QA_THREAD:
        return isSetQaThread();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createQAThread_args)
        return this.equals((createQAThread_args)that);
      return false;
    }

    public boolean equals(createQAThread_args that) {
      if (that == null)
        return false;

      boolean this_present_qaThread = true && this.isSetQaThread();
      boolean that_present_qaThread = true && that.isSetQaThread();
      if (this_present_qaThread || that_present_qaThread) {
        if (!(this_present_qaThread && that_present_qaThread))
          return false;
        if (!this.qaThread.equals(that.qaThread))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createQAThread_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQaThread()).compareTo(other.isSetQaThread());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQaThread()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qaThread, other.qaThread);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createQAThread_args(");
      boolean first = true;

      sb.append("qaThread:");
      if (this.qaThread == null) {
        sb.append("null");
      } else {
        sb.append(this.qaThread);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (qaThread != null) {
        qaThread.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createQAThread_argsStandardSchemeFactory implements SchemeFactory {
      public createQAThread_argsStandardScheme getScheme() {
        return new createQAThread_argsStandardScheme();
      }
    }

    private static class createQAThread_argsStandardScheme extends StandardScheme<createQAThread_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createQAThread_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QA_THREAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qaThread = new TQAThread();
                struct.qaThread.read(iprot);
                struct.setQaThreadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createQAThread_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.qaThread != null) {
          oprot.writeFieldBegin(QA_THREAD_FIELD_DESC);
          struct.qaThread.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createQAThread_argsTupleSchemeFactory implements SchemeFactory {
      public createQAThread_argsTupleScheme getScheme() {
        return new createQAThread_argsTupleScheme();
      }
    }

    private static class createQAThread_argsTupleScheme extends TupleScheme<createQAThread_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createQAThread_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQaThread()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQaThread()) {
          struct.qaThread.write(oprot);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createQAThread_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.qaThread = new TQAThread();
          struct.qaThread.read(iprot);
          struct.setQaThreadIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class createQAThread_result implements org.apache.thrift.TBase<createQAThread_result, createQAThread_result._Fields>, java.io.Serializable, Cloneable, Comparable<createQAThread_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createQAThread_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createQAThread_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createQAThread_resultTupleSchemeFactory());
    }

    public TQAThread success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQAThread.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createQAThread_result.class, metaDataMap);
    }

    public createQAThread_result() {
    }

    public createQAThread_result(
      TQAThread success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createQAThread_result(createQAThread_result other) {
      if (other.isSetSuccess()) {
        this.success = new TQAThread(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public createQAThread_result deepCopy() {
      return new createQAThread_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TQAThread getSuccess() {
      return this.success;
    }

    public createQAThread_result setSuccess(TQAThread success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public createQAThread_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TQAThread)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createQAThread_result)
        return this.equals((createQAThread_result)that);
      return false;
    }

    public boolean equals(createQAThread_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createQAThread_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createQAThread_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createQAThread_resultStandardSchemeFactory implements SchemeFactory {
      public createQAThread_resultStandardScheme getScheme() {
        return new createQAThread_resultStandardScheme();
      }
    }

    private static class createQAThread_resultStandardScheme extends StandardScheme<createQAThread_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createQAThread_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TQAThread();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createQAThread_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createQAThread_resultTupleSchemeFactory implements SchemeFactory {
      public createQAThread_resultTupleScheme getScheme() {
        return new createQAThread_resultTupleScheme();
      }
    }

    private static class createQAThread_resultTupleScheme extends TupleScheme<createQAThread_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createQAThread_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createQAThread_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TQAThread();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class createQADetail_args implements org.apache.thrift.TBase<createQADetail_args, createQADetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<createQADetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createQADetail_args");

    private static final org.apache.thrift.protocol.TField DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("detail", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createQADetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createQADetail_argsTupleSchemeFactory());
    }

    public TQADetail detail; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DETAIL((short)1, "detail"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DETAIL
            return DETAIL;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DETAIL, new org.apache.thrift.meta_data.FieldMetaData("detail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQADetail.class)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createQADetail_args.class, metaDataMap);
    }

    public createQADetail_args() {
    }

    public createQADetail_args(
      TQADetail detail,
      String access_token)
    {
      this();
      this.detail = detail;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createQADetail_args(createQADetail_args other) {
      if (other.isSetDetail()) {
        this.detail = new TQADetail(other.detail);
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public createQADetail_args deepCopy() {
      return new createQADetail_args(this);
    }

    @Override
    public void clear() {
      this.detail = null;
      this.access_token = null;
    }

    public TQADetail getDetail() {
      return this.detail;
    }

    public createQADetail_args setDetail(TQADetail detail) {
      this.detail = detail;
      return this;
    }

    public void unsetDetail() {
      this.detail = null;
    }

    /** Returns true if field detail is set (has been assigned a value) and false otherwise */
    public boolean isSetDetail() {
      return this.detail != null;
    }

    public void setDetailIsSet(boolean value) {
      if (!value) {
        this.detail = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public createQADetail_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DETAIL:
        if (value == null) {
          unsetDetail();
        } else {
          setDetail((TQADetail)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DETAIL:
        return getDetail();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DETAIL:
        return isSetDetail();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createQADetail_args)
        return this.equals((createQADetail_args)that);
      return false;
    }

    public boolean equals(createQADetail_args that) {
      if (that == null)
        return false;

      boolean this_present_detail = true && this.isSetDetail();
      boolean that_present_detail = true && that.isSetDetail();
      if (this_present_detail || that_present_detail) {
        if (!(this_present_detail && that_present_detail))
          return false;
        if (!this.detail.equals(that.detail))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createQADetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDetail()).compareTo(other.isSetDetail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDetail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detail, other.detail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createQADetail_args(");
      boolean first = true;

      sb.append("detail:");
      if (this.detail == null) {
        sb.append("null");
      } else {
        sb.append(this.detail);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (detail != null) {
        detail.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createQADetail_argsStandardSchemeFactory implements SchemeFactory {
      public createQADetail_argsStandardScheme getScheme() {
        return new createQADetail_argsStandardScheme();
      }
    }

    private static class createQADetail_argsStandardScheme extends StandardScheme<createQADetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createQADetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DETAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.detail = new TQADetail();
                struct.detail.read(iprot);
                struct.setDetailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createQADetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.detail != null) {
          oprot.writeFieldBegin(DETAIL_FIELD_DESC);
          struct.detail.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createQADetail_argsTupleSchemeFactory implements SchemeFactory {
      public createQADetail_argsTupleScheme getScheme() {
        return new createQADetail_argsTupleScheme();
      }
    }

    private static class createQADetail_argsTupleScheme extends TupleScheme<createQADetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createQADetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDetail()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDetail()) {
          struct.detail.write(oprot);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createQADetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.detail = new TQADetail();
          struct.detail.read(iprot);
          struct.setDetailIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class createQADetail_result implements org.apache.thrift.TBase<createQADetail_result, createQADetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<createQADetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createQADetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createQADetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createQADetail_resultTupleSchemeFactory());
    }

    public TQADetail success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQADetail.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createQADetail_result.class, metaDataMap);
    }

    public createQADetail_result() {
    }

    public createQADetail_result(
      TQADetail success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createQADetail_result(createQADetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new TQADetail(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public createQADetail_result deepCopy() {
      return new createQADetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TQADetail getSuccess() {
      return this.success;
    }

    public createQADetail_result setSuccess(TQADetail success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public createQADetail_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TQADetail)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createQADetail_result)
        return this.equals((createQADetail_result)that);
      return false;
    }

    public boolean equals(createQADetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createQADetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createQADetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createQADetail_resultStandardSchemeFactory implements SchemeFactory {
      public createQADetail_resultStandardScheme getScheme() {
        return new createQADetail_resultStandardScheme();
      }
    }

    private static class createQADetail_resultStandardScheme extends StandardScheme<createQADetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createQADetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TQADetail();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createQADetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createQADetail_resultTupleSchemeFactory implements SchemeFactory {
      public createQADetail_resultTupleScheme getScheme() {
        return new createQADetail_resultTupleScheme();
      }
    }

    private static class createQADetail_resultTupleScheme extends TupleScheme<createQADetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createQADetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createQADetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TQADetail();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class deleteQAThread_args implements org.apache.thrift.TBase<deleteQAThread_args, deleteQAThread_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteQAThread_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteQAThread_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteQAThread_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteQAThread_argsTupleSchemeFactory());
    }

    public int id; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteQAThread_args.class, metaDataMap);
    }

    public deleteQAThread_args() {
    }

    public deleteQAThread_args(
      int id,
      String access_token)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteQAThread_args(deleteQAThread_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public deleteQAThread_args deepCopy() {
      return new deleteQAThread_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.access_token = null;
    }

    public int getId() {
      return this.id;
    }

    public deleteQAThread_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public deleteQAThread_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteQAThread_args)
        return this.equals((deleteQAThread_args)that);
      return false;
    }

    public boolean equals(deleteQAThread_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteQAThread_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteQAThread_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteQAThread_argsStandardSchemeFactory implements SchemeFactory {
      public deleteQAThread_argsStandardScheme getScheme() {
        return new deleteQAThread_argsStandardScheme();
      }
    }

    private static class deleteQAThread_argsStandardScheme extends StandardScheme<deleteQAThread_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteQAThread_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteQAThread_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteQAThread_argsTupleSchemeFactory implements SchemeFactory {
      public deleteQAThread_argsTupleScheme getScheme() {
        return new deleteQAThread_argsTupleScheme();
      }
    }

    private static class deleteQAThread_argsTupleScheme extends TupleScheme<deleteQAThread_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteQAThread_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteQAThread_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class deleteQAThread_result implements org.apache.thrift.TBase<deleteQAThread_result, deleteQAThread_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteQAThread_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteQAThread_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteQAThread_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteQAThread_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteQAThread_result.class, metaDataMap);
    }

    public deleteQAThread_result() {
    }

    public deleteQAThread_result(
      boolean success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteQAThread_result(deleteQAThread_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public deleteQAThread_result deepCopy() {
      return new deleteQAThread_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.myerror = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteQAThread_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public deleteQAThread_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteQAThread_result)
        return this.equals((deleteQAThread_result)that);
      return false;
    }

    public boolean equals(deleteQAThread_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteQAThread_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteQAThread_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteQAThread_resultStandardSchemeFactory implements SchemeFactory {
      public deleteQAThread_resultStandardScheme getScheme() {
        return new deleteQAThread_resultStandardScheme();
      }
    }

    private static class deleteQAThread_resultStandardScheme extends StandardScheme<deleteQAThread_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteQAThread_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteQAThread_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteQAThread_resultTupleSchemeFactory implements SchemeFactory {
      public deleteQAThread_resultTupleScheme getScheme() {
        return new deleteQAThread_resultTupleScheme();
      }
    }

    private static class deleteQAThread_resultTupleScheme extends TupleScheme<deleteQAThread_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteQAThread_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteQAThread_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class deleteQADetail_args implements org.apache.thrift.TBase<deleteQADetail_args, deleteQADetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteQADetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteQADetail_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteQADetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteQADetail_argsTupleSchemeFactory());
    }

    public int id; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteQADetail_args.class, metaDataMap);
    }

    public deleteQADetail_args() {
    }

    public deleteQADetail_args(
      int id,
      String access_token)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteQADetail_args(deleteQADetail_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public deleteQADetail_args deepCopy() {
      return new deleteQADetail_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.access_token = null;
    }

    public int getId() {
      return this.id;
    }

    public deleteQADetail_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public deleteQADetail_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteQADetail_args)
        return this.equals((deleteQADetail_args)that);
      return false;
    }

    public boolean equals(deleteQADetail_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteQADetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteQADetail_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteQADetail_argsStandardSchemeFactory implements SchemeFactory {
      public deleteQADetail_argsStandardScheme getScheme() {
        return new deleteQADetail_argsStandardScheme();
      }
    }

    private static class deleteQADetail_argsStandardScheme extends StandardScheme<deleteQADetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteQADetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteQADetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteQADetail_argsTupleSchemeFactory implements SchemeFactory {
      public deleteQADetail_argsTupleScheme getScheme() {
        return new deleteQADetail_argsTupleScheme();
      }
    }

    private static class deleteQADetail_argsTupleScheme extends TupleScheme<deleteQADetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteQADetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteQADetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class deleteQADetail_result implements org.apache.thrift.TBase<deleteQADetail_result, deleteQADetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteQADetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteQADetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteQADetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteQADetail_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteQADetail_result.class, metaDataMap);
    }

    public deleteQADetail_result() {
    }

    public deleteQADetail_result(
      boolean success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteQADetail_result(deleteQADetail_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public deleteQADetail_result deepCopy() {
      return new deleteQADetail_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.myerror = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteQADetail_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public deleteQADetail_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteQADetail_result)
        return this.equals((deleteQADetail_result)that);
      return false;
    }

    public boolean equals(deleteQADetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteQADetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteQADetail_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteQADetail_resultStandardSchemeFactory implements SchemeFactory {
      public deleteQADetail_resultStandardScheme getScheme() {
        return new deleteQADetail_resultStandardScheme();
      }
    }

    private static class deleteQADetail_resultStandardScheme extends StandardScheme<deleteQADetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteQADetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteQADetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteQADetail_resultTupleSchemeFactory implements SchemeFactory {
      public deleteQADetail_resultTupleScheme getScheme() {
        return new deleteQADetail_resultTupleScheme();
      }
    }

    private static class deleteQADetail_resultTupleScheme extends TupleScheme<deleteQADetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteQADetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteQADetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

}
