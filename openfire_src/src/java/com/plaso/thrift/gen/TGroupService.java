/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.plaso.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TGroupService {

  public interface Iface {

    public List<TGroup> getGroupByTeacher(int teacherId, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public List<TGroup> getGroupByStudent(int studentId, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public TGroup createGroup(TGroup myGroup, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public TGroup updateGroup(TGroup myGroup, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public boolean addStudent2Group(int studentId, int myGroupId, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public boolean delStudent4Group(int studentId, int myGroupId, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public List<TTeacher> getTeacherByGroup(int groupId, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public List<TStudent> getStudentByGroup(int groupId, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public boolean deleteGroup(int id, String access_token) throws TPlasoException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getGroupByTeacher(int teacherId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getGroupByStudent(int studentId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createGroup(TGroup myGroup, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateGroup(TGroup myGroup, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addStudent2Group(int studentId, int myGroupId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delStudent4Group(int studentId, int myGroupId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTeacherByGroup(int groupId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStudentByGroup(int groupId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteGroup(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<TGroup> getGroupByTeacher(int teacherId, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_getGroupByTeacher(teacherId, access_token);
      return recv_getGroupByTeacher();
    }

    public void send_getGroupByTeacher(int teacherId, String access_token) throws org.apache.thrift.TException
    {
      getGroupByTeacher_args args = new getGroupByTeacher_args();
      args.setTeacherId(teacherId);
      args.setAccess_token(access_token);
      sendBase("getGroupByTeacher", args);
    }

    public List<TGroup> recv_getGroupByTeacher() throws TPlasoException, org.apache.thrift.TException
    {
      getGroupByTeacher_result result = new getGroupByTeacher_result();
      receiveBase(result, "getGroupByTeacher");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGroupByTeacher failed: unknown result");
    }

    public List<TGroup> getGroupByStudent(int studentId, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_getGroupByStudent(studentId, access_token);
      return recv_getGroupByStudent();
    }

    public void send_getGroupByStudent(int studentId, String access_token) throws org.apache.thrift.TException
    {
      getGroupByStudent_args args = new getGroupByStudent_args();
      args.setStudentId(studentId);
      args.setAccess_token(access_token);
      sendBase("getGroupByStudent", args);
    }

    public List<TGroup> recv_getGroupByStudent() throws TPlasoException, org.apache.thrift.TException
    {
      getGroupByStudent_result result = new getGroupByStudent_result();
      receiveBase(result, "getGroupByStudent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGroupByStudent failed: unknown result");
    }

    public TGroup createGroup(TGroup myGroup, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_createGroup(myGroup, access_token);
      return recv_createGroup();
    }

    public void send_createGroup(TGroup myGroup, String access_token) throws org.apache.thrift.TException
    {
      createGroup_args args = new createGroup_args();
      args.setMyGroup(myGroup);
      args.setAccess_token(access_token);
      sendBase("createGroup", args);
    }

    public TGroup recv_createGroup() throws TPlasoException, org.apache.thrift.TException
    {
      createGroup_result result = new createGroup_result();
      receiveBase(result, "createGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createGroup failed: unknown result");
    }

    public TGroup updateGroup(TGroup myGroup, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_updateGroup(myGroup, access_token);
      return recv_updateGroup();
    }

    public void send_updateGroup(TGroup myGroup, String access_token) throws org.apache.thrift.TException
    {
      updateGroup_args args = new updateGroup_args();
      args.setMyGroup(myGroup);
      args.setAccess_token(access_token);
      sendBase("updateGroup", args);
    }

    public TGroup recv_updateGroup() throws TPlasoException, org.apache.thrift.TException
    {
      updateGroup_result result = new updateGroup_result();
      receiveBase(result, "updateGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateGroup failed: unknown result");
    }

    public boolean addStudent2Group(int studentId, int myGroupId, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_addStudent2Group(studentId, myGroupId, access_token);
      return recv_addStudent2Group();
    }

    public void send_addStudent2Group(int studentId, int myGroupId, String access_token) throws org.apache.thrift.TException
    {
      addStudent2Group_args args = new addStudent2Group_args();
      args.setStudentId(studentId);
      args.setMyGroupId(myGroupId);
      args.setAccess_token(access_token);
      sendBase("addStudent2Group", args);
    }

    public boolean recv_addStudent2Group() throws TPlasoException, org.apache.thrift.TException
    {
      addStudent2Group_result result = new addStudent2Group_result();
      receiveBase(result, "addStudent2Group");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addStudent2Group failed: unknown result");
    }

    public boolean delStudent4Group(int studentId, int myGroupId, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_delStudent4Group(studentId, myGroupId, access_token);
      return recv_delStudent4Group();
    }

    public void send_delStudent4Group(int studentId, int myGroupId, String access_token) throws org.apache.thrift.TException
    {
      delStudent4Group_args args = new delStudent4Group_args();
      args.setStudentId(studentId);
      args.setMyGroupId(myGroupId);
      args.setAccess_token(access_token);
      sendBase("delStudent4Group", args);
    }

    public boolean recv_delStudent4Group() throws TPlasoException, org.apache.thrift.TException
    {
      delStudent4Group_result result = new delStudent4Group_result();
      receiveBase(result, "delStudent4Group");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delStudent4Group failed: unknown result");
    }

    public List<TTeacher> getTeacherByGroup(int groupId, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_getTeacherByGroup(groupId, access_token);
      return recv_getTeacherByGroup();
    }

    public void send_getTeacherByGroup(int groupId, String access_token) throws org.apache.thrift.TException
    {
      getTeacherByGroup_args args = new getTeacherByGroup_args();
      args.setGroupId(groupId);
      args.setAccess_token(access_token);
      sendBase("getTeacherByGroup", args);
    }

    public List<TTeacher> recv_getTeacherByGroup() throws TPlasoException, org.apache.thrift.TException
    {
      getTeacherByGroup_result result = new getTeacherByGroup_result();
      receiveBase(result, "getTeacherByGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTeacherByGroup failed: unknown result");
    }

    public List<TStudent> getStudentByGroup(int groupId, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_getStudentByGroup(groupId, access_token);
      return recv_getStudentByGroup();
    }

    public void send_getStudentByGroup(int groupId, String access_token) throws org.apache.thrift.TException
    {
      getStudentByGroup_args args = new getStudentByGroup_args();
      args.setGroupId(groupId);
      args.setAccess_token(access_token);
      sendBase("getStudentByGroup", args);
    }

    public List<TStudent> recv_getStudentByGroup() throws TPlasoException, org.apache.thrift.TException
    {
      getStudentByGroup_result result = new getStudentByGroup_result();
      receiveBase(result, "getStudentByGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStudentByGroup failed: unknown result");
    }

    public boolean deleteGroup(int id, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_deleteGroup(id, access_token);
      return recv_deleteGroup();
    }

    public void send_deleteGroup(int id, String access_token) throws org.apache.thrift.TException
    {
      deleteGroup_args args = new deleteGroup_args();
      args.setId(id);
      args.setAccess_token(access_token);
      sendBase("deleteGroup", args);
    }

    public boolean recv_deleteGroup() throws TPlasoException, org.apache.thrift.TException
    {
      deleteGroup_result result = new deleteGroup_result();
      receiveBase(result, "deleteGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteGroup failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getGroupByTeacher(int teacherId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGroupByTeacher_call method_call = new getGroupByTeacher_call(teacherId, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGroupByTeacher_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int teacherId;
      private String access_token;
      public getGroupByTeacher_call(int teacherId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.teacherId = teacherId;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGroupByTeacher", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGroupByTeacher_args args = new getGroupByTeacher_args();
        args.setTeacherId(teacherId);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TGroup> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGroupByTeacher();
      }
    }

    public void getGroupByStudent(int studentId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGroupByStudent_call method_call = new getGroupByStudent_call(studentId, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGroupByStudent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int studentId;
      private String access_token;
      public getGroupByStudent_call(int studentId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.studentId = studentId;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGroupByStudent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGroupByStudent_args args = new getGroupByStudent_args();
        args.setStudentId(studentId);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TGroup> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGroupByStudent();
      }
    }

    public void createGroup(TGroup myGroup, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createGroup_call method_call = new createGroup_call(myGroup, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TGroup myGroup;
      private String access_token;
      public createGroup_call(TGroup myGroup, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.myGroup = myGroup;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createGroup_args args = new createGroup_args();
        args.setMyGroup(myGroup);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TGroup getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createGroup();
      }
    }

    public void updateGroup(TGroup myGroup, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateGroup_call method_call = new updateGroup_call(myGroup, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TGroup myGroup;
      private String access_token;
      public updateGroup_call(TGroup myGroup, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.myGroup = myGroup;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateGroup_args args = new updateGroup_args();
        args.setMyGroup(myGroup);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TGroup getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateGroup();
      }
    }

    public void addStudent2Group(int studentId, int myGroupId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addStudent2Group_call method_call = new addStudent2Group_call(studentId, myGroupId, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addStudent2Group_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int studentId;
      private int myGroupId;
      private String access_token;
      public addStudent2Group_call(int studentId, int myGroupId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.studentId = studentId;
        this.myGroupId = myGroupId;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addStudent2Group", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addStudent2Group_args args = new addStudent2Group_args();
        args.setStudentId(studentId);
        args.setMyGroupId(myGroupId);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addStudent2Group();
      }
    }

    public void delStudent4Group(int studentId, int myGroupId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delStudent4Group_call method_call = new delStudent4Group_call(studentId, myGroupId, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delStudent4Group_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int studentId;
      private int myGroupId;
      private String access_token;
      public delStudent4Group_call(int studentId, int myGroupId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.studentId = studentId;
        this.myGroupId = myGroupId;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delStudent4Group", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delStudent4Group_args args = new delStudent4Group_args();
        args.setStudentId(studentId);
        args.setMyGroupId(myGroupId);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delStudent4Group();
      }
    }

    public void getTeacherByGroup(int groupId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTeacherByGroup_call method_call = new getTeacherByGroup_call(groupId, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTeacherByGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int groupId;
      private String access_token;
      public getTeacherByGroup_call(int groupId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupId = groupId;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTeacherByGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTeacherByGroup_args args = new getTeacherByGroup_args();
        args.setGroupId(groupId);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TTeacher> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTeacherByGroup();
      }
    }

    public void getStudentByGroup(int groupId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStudentByGroup_call method_call = new getStudentByGroup_call(groupId, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStudentByGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int groupId;
      private String access_token;
      public getStudentByGroup_call(int groupId, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupId = groupId;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStudentByGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStudentByGroup_args args = new getStudentByGroup_args();
        args.setGroupId(groupId);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TStudent> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStudentByGroup();
      }
    }

    public void deleteGroup(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteGroup_call method_call = new deleteGroup_call(id, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      private String access_token;
      public deleteGroup_call(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteGroup_args args = new deleteGroup_args();
        args.setId(id);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteGroup();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getGroupByTeacher", new getGroupByTeacher());
      processMap.put("getGroupByStudent", new getGroupByStudent());
      processMap.put("createGroup", new createGroup());
      processMap.put("updateGroup", new updateGroup());
      processMap.put("addStudent2Group", new addStudent2Group());
      processMap.put("delStudent4Group", new delStudent4Group());
      processMap.put("getTeacherByGroup", new getTeacherByGroup());
      processMap.put("getStudentByGroup", new getStudentByGroup());
      processMap.put("deleteGroup", new deleteGroup());
      return processMap;
    }

    public static class getGroupByTeacher<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGroupByTeacher_args> {
      public getGroupByTeacher() {
        super("getGroupByTeacher");
      }

      public getGroupByTeacher_args getEmptyArgsInstance() {
        return new getGroupByTeacher_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getGroupByTeacher_result getResult(I iface, getGroupByTeacher_args args) throws org.apache.thrift.TException {
        getGroupByTeacher_result result = new getGroupByTeacher_result();
        try {
          result.success = iface.getGroupByTeacher(args.teacherId, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class getGroupByStudent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGroupByStudent_args> {
      public getGroupByStudent() {
        super("getGroupByStudent");
      }

      public getGroupByStudent_args getEmptyArgsInstance() {
        return new getGroupByStudent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getGroupByStudent_result getResult(I iface, getGroupByStudent_args args) throws org.apache.thrift.TException {
        getGroupByStudent_result result = new getGroupByStudent_result();
        try {
          result.success = iface.getGroupByStudent(args.studentId, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class createGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createGroup_args> {
      public createGroup() {
        super("createGroup");
      }

      public createGroup_args getEmptyArgsInstance() {
        return new createGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createGroup_result getResult(I iface, createGroup_args args) throws org.apache.thrift.TException {
        createGroup_result result = new createGroup_result();
        try {
          result.success = iface.createGroup(args.myGroup, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class updateGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateGroup_args> {
      public updateGroup() {
        super("updateGroup");
      }

      public updateGroup_args getEmptyArgsInstance() {
        return new updateGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateGroup_result getResult(I iface, updateGroup_args args) throws org.apache.thrift.TException {
        updateGroup_result result = new updateGroup_result();
        try {
          result.success = iface.updateGroup(args.myGroup, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class addStudent2Group<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addStudent2Group_args> {
      public addStudent2Group() {
        super("addStudent2Group");
      }

      public addStudent2Group_args getEmptyArgsInstance() {
        return new addStudent2Group_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addStudent2Group_result getResult(I iface, addStudent2Group_args args) throws org.apache.thrift.TException {
        addStudent2Group_result result = new addStudent2Group_result();
        try {
          result.success = iface.addStudent2Group(args.studentId, args.myGroupId, args.access_token);
          result.setSuccessIsSet(true);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class delStudent4Group<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delStudent4Group_args> {
      public delStudent4Group() {
        super("delStudent4Group");
      }

      public delStudent4Group_args getEmptyArgsInstance() {
        return new delStudent4Group_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delStudent4Group_result getResult(I iface, delStudent4Group_args args) throws org.apache.thrift.TException {
        delStudent4Group_result result = new delStudent4Group_result();
        try {
          result.success = iface.delStudent4Group(args.studentId, args.myGroupId, args.access_token);
          result.setSuccessIsSet(true);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class getTeacherByGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTeacherByGroup_args> {
      public getTeacherByGroup() {
        super("getTeacherByGroup");
      }

      public getTeacherByGroup_args getEmptyArgsInstance() {
        return new getTeacherByGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTeacherByGroup_result getResult(I iface, getTeacherByGroup_args args) throws org.apache.thrift.TException {
        getTeacherByGroup_result result = new getTeacherByGroup_result();
        try {
          result.success = iface.getTeacherByGroup(args.groupId, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class getStudentByGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStudentByGroup_args> {
      public getStudentByGroup() {
        super("getStudentByGroup");
      }

      public getStudentByGroup_args getEmptyArgsInstance() {
        return new getStudentByGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStudentByGroup_result getResult(I iface, getStudentByGroup_args args) throws org.apache.thrift.TException {
        getStudentByGroup_result result = new getStudentByGroup_result();
        try {
          result.success = iface.getStudentByGroup(args.groupId, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class deleteGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteGroup_args> {
      public deleteGroup() {
        super("deleteGroup");
      }

      public deleteGroup_args getEmptyArgsInstance() {
        return new deleteGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteGroup_result getResult(I iface, deleteGroup_args args) throws org.apache.thrift.TException {
        deleteGroup_result result = new deleteGroup_result();
        try {
          result.success = iface.deleteGroup(args.id, args.access_token);
          result.setSuccessIsSet(true);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getGroupByTeacher", new getGroupByTeacher());
      processMap.put("getGroupByStudent", new getGroupByStudent());
      processMap.put("createGroup", new createGroup());
      processMap.put("updateGroup", new updateGroup());
      processMap.put("addStudent2Group", new addStudent2Group());
      processMap.put("delStudent4Group", new delStudent4Group());
      processMap.put("getTeacherByGroup", new getTeacherByGroup());
      processMap.put("getStudentByGroup", new getStudentByGroup());
      processMap.put("deleteGroup", new deleteGroup());
      return processMap;
    }

    public static class getGroupByTeacher<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getGroupByTeacher_args, List<TGroup>> {
      public getGroupByTeacher() {
        super("getGroupByTeacher");
      }

      public getGroupByTeacher_args getEmptyArgsInstance() {
        return new getGroupByTeacher_args();
      }

      public AsyncMethodCallback<List<TGroup>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TGroup>>() { 
          public void onComplete(List<TGroup> o) {
            getGroupByTeacher_result result = new getGroupByTeacher_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getGroupByTeacher_result result = new getGroupByTeacher_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getGroupByTeacher_args args, org.apache.thrift.async.AsyncMethodCallback<List<TGroup>> resultHandler) throws TException {
        iface.getGroupByTeacher(args.teacherId, args.access_token,resultHandler);
      }
    }

    public static class getGroupByStudent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getGroupByStudent_args, List<TGroup>> {
      public getGroupByStudent() {
        super("getGroupByStudent");
      }

      public getGroupByStudent_args getEmptyArgsInstance() {
        return new getGroupByStudent_args();
      }

      public AsyncMethodCallback<List<TGroup>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TGroup>>() { 
          public void onComplete(List<TGroup> o) {
            getGroupByStudent_result result = new getGroupByStudent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getGroupByStudent_result result = new getGroupByStudent_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getGroupByStudent_args args, org.apache.thrift.async.AsyncMethodCallback<List<TGroup>> resultHandler) throws TException {
        iface.getGroupByStudent(args.studentId, args.access_token,resultHandler);
      }
    }

    public static class createGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createGroup_args, TGroup> {
      public createGroup() {
        super("createGroup");
      }

      public createGroup_args getEmptyArgsInstance() {
        return new createGroup_args();
      }

      public AsyncMethodCallback<TGroup> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TGroup>() { 
          public void onComplete(TGroup o) {
            createGroup_result result = new createGroup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createGroup_result result = new createGroup_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createGroup_args args, org.apache.thrift.async.AsyncMethodCallback<TGroup> resultHandler) throws TException {
        iface.createGroup(args.myGroup, args.access_token,resultHandler);
      }
    }

    public static class updateGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateGroup_args, TGroup> {
      public updateGroup() {
        super("updateGroup");
      }

      public updateGroup_args getEmptyArgsInstance() {
        return new updateGroup_args();
      }

      public AsyncMethodCallback<TGroup> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TGroup>() { 
          public void onComplete(TGroup o) {
            updateGroup_result result = new updateGroup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateGroup_result result = new updateGroup_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateGroup_args args, org.apache.thrift.async.AsyncMethodCallback<TGroup> resultHandler) throws TException {
        iface.updateGroup(args.myGroup, args.access_token,resultHandler);
      }
    }

    public static class addStudent2Group<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addStudent2Group_args, Boolean> {
      public addStudent2Group() {
        super("addStudent2Group");
      }

      public addStudent2Group_args getEmptyArgsInstance() {
        return new addStudent2Group_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addStudent2Group_result result = new addStudent2Group_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addStudent2Group_result result = new addStudent2Group_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addStudent2Group_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addStudent2Group(args.studentId, args.myGroupId, args.access_token,resultHandler);
      }
    }

    public static class delStudent4Group<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delStudent4Group_args, Boolean> {
      public delStudent4Group() {
        super("delStudent4Group");
      }

      public delStudent4Group_args getEmptyArgsInstance() {
        return new delStudent4Group_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            delStudent4Group_result result = new delStudent4Group_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delStudent4Group_result result = new delStudent4Group_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delStudent4Group_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.delStudent4Group(args.studentId, args.myGroupId, args.access_token,resultHandler);
      }
    }

    public static class getTeacherByGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTeacherByGroup_args, List<TTeacher>> {
      public getTeacherByGroup() {
        super("getTeacherByGroup");
      }

      public getTeacherByGroup_args getEmptyArgsInstance() {
        return new getTeacherByGroup_args();
      }

      public AsyncMethodCallback<List<TTeacher>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TTeacher>>() { 
          public void onComplete(List<TTeacher> o) {
            getTeacherByGroup_result result = new getTeacherByGroup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTeacherByGroup_result result = new getTeacherByGroup_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTeacherByGroup_args args, org.apache.thrift.async.AsyncMethodCallback<List<TTeacher>> resultHandler) throws TException {
        iface.getTeacherByGroup(args.groupId, args.access_token,resultHandler);
      }
    }

    public static class getStudentByGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStudentByGroup_args, List<TStudent>> {
      public getStudentByGroup() {
        super("getStudentByGroup");
      }

      public getStudentByGroup_args getEmptyArgsInstance() {
        return new getStudentByGroup_args();
      }

      public AsyncMethodCallback<List<TStudent>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TStudent>>() { 
          public void onComplete(List<TStudent> o) {
            getStudentByGroup_result result = new getStudentByGroup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStudentByGroup_result result = new getStudentByGroup_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStudentByGroup_args args, org.apache.thrift.async.AsyncMethodCallback<List<TStudent>> resultHandler) throws TException {
        iface.getStudentByGroup(args.groupId, args.access_token,resultHandler);
      }
    }

    public static class deleteGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteGroup_args, Boolean> {
      public deleteGroup() {
        super("deleteGroup");
      }

      public deleteGroup_args getEmptyArgsInstance() {
        return new deleteGroup_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteGroup_result result = new deleteGroup_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteGroup_result result = new deleteGroup_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteGroup_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteGroup(args.id, args.access_token,resultHandler);
      }
    }

  }

  public static class getGroupByTeacher_args implements org.apache.thrift.TBase<getGroupByTeacher_args, getGroupByTeacher_args._Fields>, java.io.Serializable, Cloneable, Comparable<getGroupByTeacher_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGroupByTeacher_args");

    private static final org.apache.thrift.protocol.TField TEACHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGroupByTeacher_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGroupByTeacher_argsTupleSchemeFactory());
    }

    public int teacherId; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEACHER_ID((short)1, "teacherId"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEACHER_ID
            return TEACHER_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TEACHERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEACHER_ID, new org.apache.thrift.meta_data.FieldMetaData("teacherId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGroupByTeacher_args.class, metaDataMap);
    }

    public getGroupByTeacher_args() {
    }

    public getGroupByTeacher_args(
      int teacherId,
      String access_token)
    {
      this();
      this.teacherId = teacherId;
      setTeacherIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupByTeacher_args(getGroupByTeacher_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.teacherId = other.teacherId;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public getGroupByTeacher_args deepCopy() {
      return new getGroupByTeacher_args(this);
    }

    @Override
    public void clear() {
      setTeacherIdIsSet(false);
      this.teacherId = 0;
      this.access_token = null;
    }

    public int getTeacherId() {
      return this.teacherId;
    }

    public getGroupByTeacher_args setTeacherId(int teacherId) {
      this.teacherId = teacherId;
      setTeacherIdIsSet(true);
      return this;
    }

    public void unsetTeacherId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEACHERID_ISSET_ID);
    }

    /** Returns true if field teacherId is set (has been assigned a value) and false otherwise */
    public boolean isSetTeacherId() {
      return EncodingUtils.testBit(__isset_bitfield, __TEACHERID_ISSET_ID);
    }

    public void setTeacherIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEACHERID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public getGroupByTeacher_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEACHER_ID:
        if (value == null) {
          unsetTeacherId();
        } else {
          setTeacherId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEACHER_ID:
        return Integer.valueOf(getTeacherId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEACHER_ID:
        return isSetTeacherId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupByTeacher_args)
        return this.equals((getGroupByTeacher_args)that);
      return false;
    }

    public boolean equals(getGroupByTeacher_args that) {
      if (that == null)
        return false;

      boolean this_present_teacherId = true;
      boolean that_present_teacherId = true;
      if (this_present_teacherId || that_present_teacherId) {
        if (!(this_present_teacherId && that_present_teacherId))
          return false;
        if (this.teacherId != that.teacherId)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getGroupByTeacher_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTeacherId()).compareTo(other.isSetTeacherId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeacherId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherId, other.teacherId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGroupByTeacher_args(");
      boolean first = true;

      sb.append("teacherId:");
      sb.append(this.teacherId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGroupByTeacher_argsStandardSchemeFactory implements SchemeFactory {
      public getGroupByTeacher_argsStandardScheme getScheme() {
        return new getGroupByTeacher_argsStandardScheme();
      }
    }

    private static class getGroupByTeacher_argsStandardScheme extends StandardScheme<getGroupByTeacher_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGroupByTeacher_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEACHER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.teacherId = iprot.readI32();
                struct.setTeacherIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGroupByTeacher_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TEACHER_ID_FIELD_DESC);
        oprot.writeI32(struct.teacherId);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGroupByTeacher_argsTupleSchemeFactory implements SchemeFactory {
      public getGroupByTeacher_argsTupleScheme getScheme() {
        return new getGroupByTeacher_argsTupleScheme();
      }
    }

    private static class getGroupByTeacher_argsTupleScheme extends TupleScheme<getGroupByTeacher_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGroupByTeacher_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTeacherId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTeacherId()) {
          oprot.writeI32(struct.teacherId);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGroupByTeacher_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.teacherId = iprot.readI32();
          struct.setTeacherIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class getGroupByTeacher_result implements org.apache.thrift.TBase<getGroupByTeacher_result, getGroupByTeacher_result._Fields>, java.io.Serializable, Cloneable, Comparable<getGroupByTeacher_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGroupByTeacher_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGroupByTeacher_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGroupByTeacher_resultTupleSchemeFactory());
    }

    public List<TGroup> success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGroup.class))));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGroupByTeacher_result.class, metaDataMap);
    }

    public getGroupByTeacher_result() {
    }

    public getGroupByTeacher_result(
      List<TGroup> success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupByTeacher_result(getGroupByTeacher_result other) {
      if (other.isSetSuccess()) {
        List<TGroup> __this__success = new ArrayList<TGroup>(other.success.size());
        for (TGroup other_element : other.success) {
          __this__success.add(new TGroup(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public getGroupByTeacher_result deepCopy() {
      return new getGroupByTeacher_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TGroup> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TGroup elem) {
      if (this.success == null) {
        this.success = new ArrayList<TGroup>();
      }
      this.success.add(elem);
    }

    public List<TGroup> getSuccess() {
      return this.success;
    }

    public getGroupByTeacher_result setSuccess(List<TGroup> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public getGroupByTeacher_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TGroup>)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupByTeacher_result)
        return this.equals((getGroupByTeacher_result)that);
      return false;
    }

    public boolean equals(getGroupByTeacher_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getGroupByTeacher_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGroupByTeacher_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGroupByTeacher_resultStandardSchemeFactory implements SchemeFactory {
      public getGroupByTeacher_resultStandardScheme getScheme() {
        return new getGroupByTeacher_resultStandardScheme();
      }
    }

    private static class getGroupByTeacher_resultStandardScheme extends StandardScheme<getGroupByTeacher_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGroupByTeacher_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                  struct.success = new ArrayList<TGroup>(_list168.size);
                  for (int _i169 = 0; _i169 < _list168.size; ++_i169)
                  {
                    TGroup _elem170;
                    _elem170 = new TGroup();
                    _elem170.read(iprot);
                    struct.success.add(_elem170);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGroupByTeacher_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TGroup _iter171 : struct.success)
            {
              _iter171.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGroupByTeacher_resultTupleSchemeFactory implements SchemeFactory {
      public getGroupByTeacher_resultTupleScheme getScheme() {
        return new getGroupByTeacher_resultTupleScheme();
      }
    }

    private static class getGroupByTeacher_resultTupleScheme extends TupleScheme<getGroupByTeacher_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGroupByTeacher_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TGroup _iter172 : struct.success)
            {
              _iter172.write(oprot);
            }
          }
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGroupByTeacher_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TGroup>(_list173.size);
            for (int _i174 = 0; _i174 < _list173.size; ++_i174)
            {
              TGroup _elem175;
              _elem175 = new TGroup();
              _elem175.read(iprot);
              struct.success.add(_elem175);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class getGroupByStudent_args implements org.apache.thrift.TBase<getGroupByStudent_args, getGroupByStudent_args._Fields>, java.io.Serializable, Cloneable, Comparable<getGroupByStudent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGroupByStudent_args");

    private static final org.apache.thrift.protocol.TField STUDENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("studentId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGroupByStudent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGroupByStudent_argsTupleSchemeFactory());
    }

    public int studentId; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT_ID((short)1, "studentId"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT_ID
            return STUDENT_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUDENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT_ID, new org.apache.thrift.meta_data.FieldMetaData("studentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGroupByStudent_args.class, metaDataMap);
    }

    public getGroupByStudent_args() {
    }

    public getGroupByStudent_args(
      int studentId,
      String access_token)
    {
      this();
      this.studentId = studentId;
      setStudentIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupByStudent_args(getGroupByStudent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.studentId = other.studentId;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public getGroupByStudent_args deepCopy() {
      return new getGroupByStudent_args(this);
    }

    @Override
    public void clear() {
      setStudentIdIsSet(false);
      this.studentId = 0;
      this.access_token = null;
    }

    public int getStudentId() {
      return this.studentId;
    }

    public getGroupByStudent_args setStudentId(int studentId) {
      this.studentId = studentId;
      setStudentIdIsSet(true);
      return this;
    }

    public void unsetStudentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUDENTID_ISSET_ID);
    }

    /** Returns true if field studentId is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUDENTID_ISSET_ID);
    }

    public void setStudentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUDENTID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public getGroupByStudent_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENT_ID:
        if (value == null) {
          unsetStudentId();
        } else {
          setStudentId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT_ID:
        return Integer.valueOf(getStudentId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT_ID:
        return isSetStudentId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupByStudent_args)
        return this.equals((getGroupByStudent_args)that);
      return false;
    }

    public boolean equals(getGroupByStudent_args that) {
      if (that == null)
        return false;

      boolean this_present_studentId = true;
      boolean that_present_studentId = true;
      if (this_present_studentId || that_present_studentId) {
        if (!(this_present_studentId && that_present_studentId))
          return false;
        if (this.studentId != that.studentId)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getGroupByStudent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStudentId()).compareTo(other.isSetStudentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentId, other.studentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGroupByStudent_args(");
      boolean first = true;

      sb.append("studentId:");
      sb.append(this.studentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGroupByStudent_argsStandardSchemeFactory implements SchemeFactory {
      public getGroupByStudent_argsStandardScheme getScheme() {
        return new getGroupByStudent_argsStandardScheme();
      }
    }

    private static class getGroupByStudent_argsStandardScheme extends StandardScheme<getGroupByStudent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGroupByStudent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.studentId = iprot.readI32();
                struct.setStudentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGroupByStudent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STUDENT_ID_FIELD_DESC);
        oprot.writeI32(struct.studentId);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGroupByStudent_argsTupleSchemeFactory implements SchemeFactory {
      public getGroupByStudent_argsTupleScheme getScheme() {
        return new getGroupByStudent_argsTupleScheme();
      }
    }

    private static class getGroupByStudent_argsTupleScheme extends TupleScheme<getGroupByStudent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGroupByStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStudentId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStudentId()) {
          oprot.writeI32(struct.studentId);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGroupByStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.studentId = iprot.readI32();
          struct.setStudentIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class getGroupByStudent_result implements org.apache.thrift.TBase<getGroupByStudent_result, getGroupByStudent_result._Fields>, java.io.Serializable, Cloneable, Comparable<getGroupByStudent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGroupByStudent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGroupByStudent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGroupByStudent_resultTupleSchemeFactory());
    }

    public List<TGroup> success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGroup.class))));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGroupByStudent_result.class, metaDataMap);
    }

    public getGroupByStudent_result() {
    }

    public getGroupByStudent_result(
      List<TGroup> success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupByStudent_result(getGroupByStudent_result other) {
      if (other.isSetSuccess()) {
        List<TGroup> __this__success = new ArrayList<TGroup>(other.success.size());
        for (TGroup other_element : other.success) {
          __this__success.add(new TGroup(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public getGroupByStudent_result deepCopy() {
      return new getGroupByStudent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TGroup> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TGroup elem) {
      if (this.success == null) {
        this.success = new ArrayList<TGroup>();
      }
      this.success.add(elem);
    }

    public List<TGroup> getSuccess() {
      return this.success;
    }

    public getGroupByStudent_result setSuccess(List<TGroup> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public getGroupByStudent_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TGroup>)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupByStudent_result)
        return this.equals((getGroupByStudent_result)that);
      return false;
    }

    public boolean equals(getGroupByStudent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getGroupByStudent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGroupByStudent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGroupByStudent_resultStandardSchemeFactory implements SchemeFactory {
      public getGroupByStudent_resultStandardScheme getScheme() {
        return new getGroupByStudent_resultStandardScheme();
      }
    }

    private static class getGroupByStudent_resultStandardScheme extends StandardScheme<getGroupByStudent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGroupByStudent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                  struct.success = new ArrayList<TGroup>(_list176.size);
                  for (int _i177 = 0; _i177 < _list176.size; ++_i177)
                  {
                    TGroup _elem178;
                    _elem178 = new TGroup();
                    _elem178.read(iprot);
                    struct.success.add(_elem178);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGroupByStudent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TGroup _iter179 : struct.success)
            {
              _iter179.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGroupByStudent_resultTupleSchemeFactory implements SchemeFactory {
      public getGroupByStudent_resultTupleScheme getScheme() {
        return new getGroupByStudent_resultTupleScheme();
      }
    }

    private static class getGroupByStudent_resultTupleScheme extends TupleScheme<getGroupByStudent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGroupByStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TGroup _iter180 : struct.success)
            {
              _iter180.write(oprot);
            }
          }
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGroupByStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TGroup>(_list181.size);
            for (int _i182 = 0; _i182 < _list181.size; ++_i182)
            {
              TGroup _elem183;
              _elem183 = new TGroup();
              _elem183.read(iprot);
              struct.success.add(_elem183);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class createGroup_args implements org.apache.thrift.TBase<createGroup_args, createGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<createGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createGroup_args");

    private static final org.apache.thrift.protocol.TField MY_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("myGroup", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createGroup_argsTupleSchemeFactory());
    }

    public TGroup myGroup; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MY_GROUP((short)1, "myGroup"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MY_GROUP
            return MY_GROUP;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MY_GROUP, new org.apache.thrift.meta_data.FieldMetaData("myGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGroup.class)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createGroup_args.class, metaDataMap);
    }

    public createGroup_args() {
    }

    public createGroup_args(
      TGroup myGroup,
      String access_token)
    {
      this();
      this.myGroup = myGroup;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createGroup_args(createGroup_args other) {
      if (other.isSetMyGroup()) {
        this.myGroup = new TGroup(other.myGroup);
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public createGroup_args deepCopy() {
      return new createGroup_args(this);
    }

    @Override
    public void clear() {
      this.myGroup = null;
      this.access_token = null;
    }

    public TGroup getMyGroup() {
      return this.myGroup;
    }

    public createGroup_args setMyGroup(TGroup myGroup) {
      this.myGroup = myGroup;
      return this;
    }

    public void unsetMyGroup() {
      this.myGroup = null;
    }

    /** Returns true if field myGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetMyGroup() {
      return this.myGroup != null;
    }

    public void setMyGroupIsSet(boolean value) {
      if (!value) {
        this.myGroup = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public createGroup_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MY_GROUP:
        if (value == null) {
          unsetMyGroup();
        } else {
          setMyGroup((TGroup)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MY_GROUP:
        return getMyGroup();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MY_GROUP:
        return isSetMyGroup();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createGroup_args)
        return this.equals((createGroup_args)that);
      return false;
    }

    public boolean equals(createGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_myGroup = true && this.isSetMyGroup();
      boolean that_present_myGroup = true && that.isSetMyGroup();
      if (this_present_myGroup || that_present_myGroup) {
        if (!(this_present_myGroup && that_present_myGroup))
          return false;
        if (!this.myGroup.equals(that.myGroup))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMyGroup()).compareTo(other.isSetMyGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myGroup, other.myGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createGroup_args(");
      boolean first = true;

      sb.append("myGroup:");
      if (this.myGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.myGroup);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (myGroup != null) {
        myGroup.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createGroup_argsStandardSchemeFactory implements SchemeFactory {
      public createGroup_argsStandardScheme getScheme() {
        return new createGroup_argsStandardScheme();
      }
    }

    private static class createGroup_argsStandardScheme extends StandardScheme<createGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MY_GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myGroup = new TGroup();
                struct.myGroup.read(iprot);
                struct.setMyGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.myGroup != null) {
          oprot.writeFieldBegin(MY_GROUP_FIELD_DESC);
          struct.myGroup.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createGroup_argsTupleSchemeFactory implements SchemeFactory {
      public createGroup_argsTupleScheme getScheme() {
        return new createGroup_argsTupleScheme();
      }
    }

    private static class createGroup_argsTupleScheme extends TupleScheme<createGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMyGroup()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMyGroup()) {
          struct.myGroup.write(oprot);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.myGroup = new TGroup();
          struct.myGroup.read(iprot);
          struct.setMyGroupIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class createGroup_result implements org.apache.thrift.TBase<createGroup_result, createGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<createGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createGroup_resultTupleSchemeFactory());
    }

    public TGroup success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGroup.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createGroup_result.class, metaDataMap);
    }

    public createGroup_result() {
    }

    public createGroup_result(
      TGroup success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createGroup_result(createGroup_result other) {
      if (other.isSetSuccess()) {
        this.success = new TGroup(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public createGroup_result deepCopy() {
      return new createGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TGroup getSuccess() {
      return this.success;
    }

    public createGroup_result setSuccess(TGroup success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public createGroup_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TGroup)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createGroup_result)
        return this.equals((createGroup_result)that);
      return false;
    }

    public boolean equals(createGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createGroup_resultStandardSchemeFactory implements SchemeFactory {
      public createGroup_resultStandardScheme getScheme() {
        return new createGroup_resultStandardScheme();
      }
    }

    private static class createGroup_resultStandardScheme extends StandardScheme<createGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TGroup();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createGroup_resultTupleSchemeFactory implements SchemeFactory {
      public createGroup_resultTupleScheme getScheme() {
        return new createGroup_resultTupleScheme();
      }
    }

    private static class createGroup_resultTupleScheme extends TupleScheme<createGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TGroup();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class updateGroup_args implements org.apache.thrift.TBase<updateGroup_args, updateGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGroup_args");

    private static final org.apache.thrift.protocol.TField MY_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("myGroup", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateGroup_argsTupleSchemeFactory());
    }

    public TGroup myGroup; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MY_GROUP((short)1, "myGroup"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MY_GROUP
            return MY_GROUP;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MY_GROUP, new org.apache.thrift.meta_data.FieldMetaData("myGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGroup.class)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGroup_args.class, metaDataMap);
    }

    public updateGroup_args() {
    }

    public updateGroup_args(
      TGroup myGroup,
      String access_token)
    {
      this();
      this.myGroup = myGroup;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGroup_args(updateGroup_args other) {
      if (other.isSetMyGroup()) {
        this.myGroup = new TGroup(other.myGroup);
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public updateGroup_args deepCopy() {
      return new updateGroup_args(this);
    }

    @Override
    public void clear() {
      this.myGroup = null;
      this.access_token = null;
    }

    public TGroup getMyGroup() {
      return this.myGroup;
    }

    public updateGroup_args setMyGroup(TGroup myGroup) {
      this.myGroup = myGroup;
      return this;
    }

    public void unsetMyGroup() {
      this.myGroup = null;
    }

    /** Returns true if field myGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetMyGroup() {
      return this.myGroup != null;
    }

    public void setMyGroupIsSet(boolean value) {
      if (!value) {
        this.myGroup = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public updateGroup_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MY_GROUP:
        if (value == null) {
          unsetMyGroup();
        } else {
          setMyGroup((TGroup)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MY_GROUP:
        return getMyGroup();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MY_GROUP:
        return isSetMyGroup();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGroup_args)
        return this.equals((updateGroup_args)that);
      return false;
    }

    public boolean equals(updateGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_myGroup = true && this.isSetMyGroup();
      boolean that_present_myGroup = true && that.isSetMyGroup();
      if (this_present_myGroup || that_present_myGroup) {
        if (!(this_present_myGroup && that_present_myGroup))
          return false;
        if (!this.myGroup.equals(that.myGroup))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMyGroup()).compareTo(other.isSetMyGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myGroup, other.myGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGroup_args(");
      boolean first = true;

      sb.append("myGroup:");
      if (this.myGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.myGroup);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (myGroup != null) {
        myGroup.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGroup_argsStandardSchemeFactory implements SchemeFactory {
      public updateGroup_argsStandardScheme getScheme() {
        return new updateGroup_argsStandardScheme();
      }
    }

    private static class updateGroup_argsStandardScheme extends StandardScheme<updateGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MY_GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myGroup = new TGroup();
                struct.myGroup.read(iprot);
                struct.setMyGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.myGroup != null) {
          oprot.writeFieldBegin(MY_GROUP_FIELD_DESC);
          struct.myGroup.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGroup_argsTupleSchemeFactory implements SchemeFactory {
      public updateGroup_argsTupleScheme getScheme() {
        return new updateGroup_argsTupleScheme();
      }
    }

    private static class updateGroup_argsTupleScheme extends TupleScheme<updateGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMyGroup()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMyGroup()) {
          struct.myGroup.write(oprot);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.myGroup = new TGroup();
          struct.myGroup.read(iprot);
          struct.setMyGroupIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class updateGroup_result implements org.apache.thrift.TBase<updateGroup_result, updateGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateGroup_resultTupleSchemeFactory());
    }

    public TGroup success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGroup.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGroup_result.class, metaDataMap);
    }

    public updateGroup_result() {
    }

    public updateGroup_result(
      TGroup success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGroup_result(updateGroup_result other) {
      if (other.isSetSuccess()) {
        this.success = new TGroup(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public updateGroup_result deepCopy() {
      return new updateGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TGroup getSuccess() {
      return this.success;
    }

    public updateGroup_result setSuccess(TGroup success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public updateGroup_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TGroup)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGroup_result)
        return this.equals((updateGroup_result)that);
      return false;
    }

    public boolean equals(updateGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGroup_resultStandardSchemeFactory implements SchemeFactory {
      public updateGroup_resultStandardScheme getScheme() {
        return new updateGroup_resultStandardScheme();
      }
    }

    private static class updateGroup_resultStandardScheme extends StandardScheme<updateGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TGroup();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGroup_resultTupleSchemeFactory implements SchemeFactory {
      public updateGroup_resultTupleScheme getScheme() {
        return new updateGroup_resultTupleScheme();
      }
    }

    private static class updateGroup_resultTupleScheme extends TupleScheme<updateGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TGroup();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class addStudent2Group_args implements org.apache.thrift.TBase<addStudent2Group_args, addStudent2Group_args._Fields>, java.io.Serializable, Cloneable, Comparable<addStudent2Group_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addStudent2Group_args");

    private static final org.apache.thrift.protocol.TField STUDENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("studentId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MY_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("myGroupId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addStudent2Group_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addStudent2Group_argsTupleSchemeFactory());
    }

    public int studentId; // required
    public int myGroupId; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT_ID((short)1, "studentId"),
      MY_GROUP_ID((short)2, "myGroupId"),
      ACCESS_TOKEN((short)3, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT_ID
            return STUDENT_ID;
          case 2: // MY_GROUP_ID
            return MY_GROUP_ID;
          case 3: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUDENTID_ISSET_ID = 0;
    private static final int __MYGROUPID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT_ID, new org.apache.thrift.meta_data.FieldMetaData("studentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MY_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("myGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addStudent2Group_args.class, metaDataMap);
    }

    public addStudent2Group_args() {
    }

    public addStudent2Group_args(
      int studentId,
      int myGroupId,
      String access_token)
    {
      this();
      this.studentId = studentId;
      setStudentIdIsSet(true);
      this.myGroupId = myGroupId;
      setMyGroupIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addStudent2Group_args(addStudent2Group_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.studentId = other.studentId;
      this.myGroupId = other.myGroupId;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public addStudent2Group_args deepCopy() {
      return new addStudent2Group_args(this);
    }

    @Override
    public void clear() {
      setStudentIdIsSet(false);
      this.studentId = 0;
      setMyGroupIdIsSet(false);
      this.myGroupId = 0;
      this.access_token = null;
    }

    public int getStudentId() {
      return this.studentId;
    }

    public addStudent2Group_args setStudentId(int studentId) {
      this.studentId = studentId;
      setStudentIdIsSet(true);
      return this;
    }

    public void unsetStudentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUDENTID_ISSET_ID);
    }

    /** Returns true if field studentId is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUDENTID_ISSET_ID);
    }

    public void setStudentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUDENTID_ISSET_ID, value);
    }

    public int getMyGroupId() {
      return this.myGroupId;
    }

    public addStudent2Group_args setMyGroupId(int myGroupId) {
      this.myGroupId = myGroupId;
      setMyGroupIdIsSet(true);
      return this;
    }

    public void unsetMyGroupId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYGROUPID_ISSET_ID);
    }

    /** Returns true if field myGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetMyGroupId() {
      return EncodingUtils.testBit(__isset_bitfield, __MYGROUPID_ISSET_ID);
    }

    public void setMyGroupIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYGROUPID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public addStudent2Group_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENT_ID:
        if (value == null) {
          unsetStudentId();
        } else {
          setStudentId((Integer)value);
        }
        break;

      case MY_GROUP_ID:
        if (value == null) {
          unsetMyGroupId();
        } else {
          setMyGroupId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT_ID:
        return Integer.valueOf(getStudentId());

      case MY_GROUP_ID:
        return Integer.valueOf(getMyGroupId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT_ID:
        return isSetStudentId();
      case MY_GROUP_ID:
        return isSetMyGroupId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addStudent2Group_args)
        return this.equals((addStudent2Group_args)that);
      return false;
    }

    public boolean equals(addStudent2Group_args that) {
      if (that == null)
        return false;

      boolean this_present_studentId = true;
      boolean that_present_studentId = true;
      if (this_present_studentId || that_present_studentId) {
        if (!(this_present_studentId && that_present_studentId))
          return false;
        if (this.studentId != that.studentId)
          return false;
      }

      boolean this_present_myGroupId = true;
      boolean that_present_myGroupId = true;
      if (this_present_myGroupId || that_present_myGroupId) {
        if (!(this_present_myGroupId && that_present_myGroupId))
          return false;
        if (this.myGroupId != that.myGroupId)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addStudent2Group_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStudentId()).compareTo(other.isSetStudentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentId, other.studentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyGroupId()).compareTo(other.isSetMyGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myGroupId, other.myGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addStudent2Group_args(");
      boolean first = true;

      sb.append("studentId:");
      sb.append(this.studentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("myGroupId:");
      sb.append(this.myGroupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addStudent2Group_argsStandardSchemeFactory implements SchemeFactory {
      public addStudent2Group_argsStandardScheme getScheme() {
        return new addStudent2Group_argsStandardScheme();
      }
    }

    private static class addStudent2Group_argsStandardScheme extends StandardScheme<addStudent2Group_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addStudent2Group_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.studentId = iprot.readI32();
                struct.setStudentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MY_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.myGroupId = iprot.readI32();
                struct.setMyGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addStudent2Group_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STUDENT_ID_FIELD_DESC);
        oprot.writeI32(struct.studentId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MY_GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.myGroupId);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addStudent2Group_argsTupleSchemeFactory implements SchemeFactory {
      public addStudent2Group_argsTupleScheme getScheme() {
        return new addStudent2Group_argsTupleScheme();
      }
    }

    private static class addStudent2Group_argsTupleScheme extends TupleScheme<addStudent2Group_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addStudent2Group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStudentId()) {
          optionals.set(0);
        }
        if (struct.isSetMyGroupId()) {
          optionals.set(1);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStudentId()) {
          oprot.writeI32(struct.studentId);
        }
        if (struct.isSetMyGroupId()) {
          oprot.writeI32(struct.myGroupId);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addStudent2Group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.studentId = iprot.readI32();
          struct.setStudentIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myGroupId = iprot.readI32();
          struct.setMyGroupIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class addStudent2Group_result implements org.apache.thrift.TBase<addStudent2Group_result, addStudent2Group_result._Fields>, java.io.Serializable, Cloneable, Comparable<addStudent2Group_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addStudent2Group_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addStudent2Group_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addStudent2Group_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addStudent2Group_result.class, metaDataMap);
    }

    public addStudent2Group_result() {
    }

    public addStudent2Group_result(
      boolean success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addStudent2Group_result(addStudent2Group_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public addStudent2Group_result deepCopy() {
      return new addStudent2Group_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.myerror = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addStudent2Group_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public addStudent2Group_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addStudent2Group_result)
        return this.equals((addStudent2Group_result)that);
      return false;
    }

    public boolean equals(addStudent2Group_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addStudent2Group_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addStudent2Group_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addStudent2Group_resultStandardSchemeFactory implements SchemeFactory {
      public addStudent2Group_resultStandardScheme getScheme() {
        return new addStudent2Group_resultStandardScheme();
      }
    }

    private static class addStudent2Group_resultStandardScheme extends StandardScheme<addStudent2Group_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addStudent2Group_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addStudent2Group_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addStudent2Group_resultTupleSchemeFactory implements SchemeFactory {
      public addStudent2Group_resultTupleScheme getScheme() {
        return new addStudent2Group_resultTupleScheme();
      }
    }

    private static class addStudent2Group_resultTupleScheme extends TupleScheme<addStudent2Group_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addStudent2Group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addStudent2Group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class delStudent4Group_args implements org.apache.thrift.TBase<delStudent4Group_args, delStudent4Group_args._Fields>, java.io.Serializable, Cloneable, Comparable<delStudent4Group_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delStudent4Group_args");

    private static final org.apache.thrift.protocol.TField STUDENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("studentId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MY_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("myGroupId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delStudent4Group_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delStudent4Group_argsTupleSchemeFactory());
    }

    public int studentId; // required
    public int myGroupId; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT_ID((short)1, "studentId"),
      MY_GROUP_ID((short)2, "myGroupId"),
      ACCESS_TOKEN((short)3, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT_ID
            return STUDENT_ID;
          case 2: // MY_GROUP_ID
            return MY_GROUP_ID;
          case 3: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUDENTID_ISSET_ID = 0;
    private static final int __MYGROUPID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT_ID, new org.apache.thrift.meta_data.FieldMetaData("studentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MY_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("myGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delStudent4Group_args.class, metaDataMap);
    }

    public delStudent4Group_args() {
    }

    public delStudent4Group_args(
      int studentId,
      int myGroupId,
      String access_token)
    {
      this();
      this.studentId = studentId;
      setStudentIdIsSet(true);
      this.myGroupId = myGroupId;
      setMyGroupIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delStudent4Group_args(delStudent4Group_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.studentId = other.studentId;
      this.myGroupId = other.myGroupId;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public delStudent4Group_args deepCopy() {
      return new delStudent4Group_args(this);
    }

    @Override
    public void clear() {
      setStudentIdIsSet(false);
      this.studentId = 0;
      setMyGroupIdIsSet(false);
      this.myGroupId = 0;
      this.access_token = null;
    }

    public int getStudentId() {
      return this.studentId;
    }

    public delStudent4Group_args setStudentId(int studentId) {
      this.studentId = studentId;
      setStudentIdIsSet(true);
      return this;
    }

    public void unsetStudentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUDENTID_ISSET_ID);
    }

    /** Returns true if field studentId is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUDENTID_ISSET_ID);
    }

    public void setStudentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUDENTID_ISSET_ID, value);
    }

    public int getMyGroupId() {
      return this.myGroupId;
    }

    public delStudent4Group_args setMyGroupId(int myGroupId) {
      this.myGroupId = myGroupId;
      setMyGroupIdIsSet(true);
      return this;
    }

    public void unsetMyGroupId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYGROUPID_ISSET_ID);
    }

    /** Returns true if field myGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetMyGroupId() {
      return EncodingUtils.testBit(__isset_bitfield, __MYGROUPID_ISSET_ID);
    }

    public void setMyGroupIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYGROUPID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public delStudent4Group_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENT_ID:
        if (value == null) {
          unsetStudentId();
        } else {
          setStudentId((Integer)value);
        }
        break;

      case MY_GROUP_ID:
        if (value == null) {
          unsetMyGroupId();
        } else {
          setMyGroupId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT_ID:
        return Integer.valueOf(getStudentId());

      case MY_GROUP_ID:
        return Integer.valueOf(getMyGroupId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT_ID:
        return isSetStudentId();
      case MY_GROUP_ID:
        return isSetMyGroupId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delStudent4Group_args)
        return this.equals((delStudent4Group_args)that);
      return false;
    }

    public boolean equals(delStudent4Group_args that) {
      if (that == null)
        return false;

      boolean this_present_studentId = true;
      boolean that_present_studentId = true;
      if (this_present_studentId || that_present_studentId) {
        if (!(this_present_studentId && that_present_studentId))
          return false;
        if (this.studentId != that.studentId)
          return false;
      }

      boolean this_present_myGroupId = true;
      boolean that_present_myGroupId = true;
      if (this_present_myGroupId || that_present_myGroupId) {
        if (!(this_present_myGroupId && that_present_myGroupId))
          return false;
        if (this.myGroupId != that.myGroupId)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(delStudent4Group_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStudentId()).compareTo(other.isSetStudentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentId, other.studentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyGroupId()).compareTo(other.isSetMyGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myGroupId, other.myGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delStudent4Group_args(");
      boolean first = true;

      sb.append("studentId:");
      sb.append(this.studentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("myGroupId:");
      sb.append(this.myGroupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delStudent4Group_argsStandardSchemeFactory implements SchemeFactory {
      public delStudent4Group_argsStandardScheme getScheme() {
        return new delStudent4Group_argsStandardScheme();
      }
    }

    private static class delStudent4Group_argsStandardScheme extends StandardScheme<delStudent4Group_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delStudent4Group_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.studentId = iprot.readI32();
                struct.setStudentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MY_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.myGroupId = iprot.readI32();
                struct.setMyGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delStudent4Group_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STUDENT_ID_FIELD_DESC);
        oprot.writeI32(struct.studentId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MY_GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.myGroupId);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delStudent4Group_argsTupleSchemeFactory implements SchemeFactory {
      public delStudent4Group_argsTupleScheme getScheme() {
        return new delStudent4Group_argsTupleScheme();
      }
    }

    private static class delStudent4Group_argsTupleScheme extends TupleScheme<delStudent4Group_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delStudent4Group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStudentId()) {
          optionals.set(0);
        }
        if (struct.isSetMyGroupId()) {
          optionals.set(1);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStudentId()) {
          oprot.writeI32(struct.studentId);
        }
        if (struct.isSetMyGroupId()) {
          oprot.writeI32(struct.myGroupId);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delStudent4Group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.studentId = iprot.readI32();
          struct.setStudentIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myGroupId = iprot.readI32();
          struct.setMyGroupIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class delStudent4Group_result implements org.apache.thrift.TBase<delStudent4Group_result, delStudent4Group_result._Fields>, java.io.Serializable, Cloneable, Comparable<delStudent4Group_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delStudent4Group_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delStudent4Group_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delStudent4Group_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delStudent4Group_result.class, metaDataMap);
    }

    public delStudent4Group_result() {
    }

    public delStudent4Group_result(
      boolean success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delStudent4Group_result(delStudent4Group_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public delStudent4Group_result deepCopy() {
      return new delStudent4Group_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.myerror = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public delStudent4Group_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public delStudent4Group_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delStudent4Group_result)
        return this.equals((delStudent4Group_result)that);
      return false;
    }

    public boolean equals(delStudent4Group_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(delStudent4Group_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delStudent4Group_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delStudent4Group_resultStandardSchemeFactory implements SchemeFactory {
      public delStudent4Group_resultStandardScheme getScheme() {
        return new delStudent4Group_resultStandardScheme();
      }
    }

    private static class delStudent4Group_resultStandardScheme extends StandardScheme<delStudent4Group_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delStudent4Group_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delStudent4Group_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delStudent4Group_resultTupleSchemeFactory implements SchemeFactory {
      public delStudent4Group_resultTupleScheme getScheme() {
        return new delStudent4Group_resultTupleScheme();
      }
    }

    private static class delStudent4Group_resultTupleScheme extends TupleScheme<delStudent4Group_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delStudent4Group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delStudent4Group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class getTeacherByGroup_args implements org.apache.thrift.TBase<getTeacherByGroup_args, getTeacherByGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTeacherByGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTeacherByGroup_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTeacherByGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTeacherByGroup_argsTupleSchemeFactory());
    }

    public int groupId; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "groupId"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTeacherByGroup_args.class, metaDataMap);
    }

    public getTeacherByGroup_args() {
    }

    public getTeacherByGroup_args(
      int groupId,
      String access_token)
    {
      this();
      this.groupId = groupId;
      setGroupIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTeacherByGroup_args(getTeacherByGroup_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.groupId = other.groupId;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public getTeacherByGroup_args deepCopy() {
      return new getTeacherByGroup_args(this);
    }

    @Override
    public void clear() {
      setGroupIdIsSet(false);
      this.groupId = 0;
      this.access_token = null;
    }

    public int getGroupId() {
      return this.groupId;
    }

    public getTeacherByGroup_args setGroupId(int groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public getTeacherByGroup_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return Integer.valueOf(getGroupId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroupId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTeacherByGroup_args)
        return this.equals((getTeacherByGroup_args)that);
      return false;
    }

    public boolean equals(getTeacherByGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTeacherByGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTeacherByGroup_args(");
      boolean first = true;

      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTeacherByGroup_argsStandardSchemeFactory implements SchemeFactory {
      public getTeacherByGroup_argsStandardScheme getScheme() {
        return new getTeacherByGroup_argsStandardScheme();
      }
    }

    private static class getTeacherByGroup_argsStandardScheme extends StandardScheme<getTeacherByGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTeacherByGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.groupId = iprot.readI32();
                struct.setGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTeacherByGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.groupId);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTeacherByGroup_argsTupleSchemeFactory implements SchemeFactory {
      public getTeacherByGroup_argsTupleScheme getScheme() {
        return new getTeacherByGroup_argsTupleScheme();
      }
    }

    private static class getTeacherByGroup_argsTupleScheme extends TupleScheme<getTeacherByGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTeacherByGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGroupId()) {
          oprot.writeI32(struct.groupId);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTeacherByGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.groupId = iprot.readI32();
          struct.setGroupIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class getTeacherByGroup_result implements org.apache.thrift.TBase<getTeacherByGroup_result, getTeacherByGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTeacherByGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTeacherByGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTeacherByGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTeacherByGroup_resultTupleSchemeFactory());
    }

    public List<TTeacher> success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeacher.class))));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTeacherByGroup_result.class, metaDataMap);
    }

    public getTeacherByGroup_result() {
    }

    public getTeacherByGroup_result(
      List<TTeacher> success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTeacherByGroup_result(getTeacherByGroup_result other) {
      if (other.isSetSuccess()) {
        List<TTeacher> __this__success = new ArrayList<TTeacher>(other.success.size());
        for (TTeacher other_element : other.success) {
          __this__success.add(new TTeacher(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public getTeacherByGroup_result deepCopy() {
      return new getTeacherByGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TTeacher> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TTeacher elem) {
      if (this.success == null) {
        this.success = new ArrayList<TTeacher>();
      }
      this.success.add(elem);
    }

    public List<TTeacher> getSuccess() {
      return this.success;
    }

    public getTeacherByGroup_result setSuccess(List<TTeacher> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public getTeacherByGroup_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TTeacher>)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTeacherByGroup_result)
        return this.equals((getTeacherByGroup_result)that);
      return false;
    }

    public boolean equals(getTeacherByGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTeacherByGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTeacherByGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTeacherByGroup_resultStandardSchemeFactory implements SchemeFactory {
      public getTeacherByGroup_resultStandardScheme getScheme() {
        return new getTeacherByGroup_resultStandardScheme();
      }
    }

    private static class getTeacherByGroup_resultStandardScheme extends StandardScheme<getTeacherByGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTeacherByGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                  struct.success = new ArrayList<TTeacher>(_list184.size);
                  for (int _i185 = 0; _i185 < _list184.size; ++_i185)
                  {
                    TTeacher _elem186;
                    _elem186 = new TTeacher();
                    _elem186.read(iprot);
                    struct.success.add(_elem186);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTeacherByGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TTeacher _iter187 : struct.success)
            {
              _iter187.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTeacherByGroup_resultTupleSchemeFactory implements SchemeFactory {
      public getTeacherByGroup_resultTupleScheme getScheme() {
        return new getTeacherByGroup_resultTupleScheme();
      }
    }

    private static class getTeacherByGroup_resultTupleScheme extends TupleScheme<getTeacherByGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTeacherByGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TTeacher _iter188 : struct.success)
            {
              _iter188.write(oprot);
            }
          }
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTeacherByGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TTeacher>(_list189.size);
            for (int _i190 = 0; _i190 < _list189.size; ++_i190)
            {
              TTeacher _elem191;
              _elem191 = new TTeacher();
              _elem191.read(iprot);
              struct.success.add(_elem191);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class getStudentByGroup_args implements org.apache.thrift.TBase<getStudentByGroup_args, getStudentByGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStudentByGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStudentByGroup_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStudentByGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStudentByGroup_argsTupleSchemeFactory());
    }

    public int groupId; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "groupId"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStudentByGroup_args.class, metaDataMap);
    }

    public getStudentByGroup_args() {
    }

    public getStudentByGroup_args(
      int groupId,
      String access_token)
    {
      this();
      this.groupId = groupId;
      setGroupIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStudentByGroup_args(getStudentByGroup_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.groupId = other.groupId;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public getStudentByGroup_args deepCopy() {
      return new getStudentByGroup_args(this);
    }

    @Override
    public void clear() {
      setGroupIdIsSet(false);
      this.groupId = 0;
      this.access_token = null;
    }

    public int getGroupId() {
      return this.groupId;
    }

    public getStudentByGroup_args setGroupId(int groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public getStudentByGroup_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return Integer.valueOf(getGroupId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroupId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStudentByGroup_args)
        return this.equals((getStudentByGroup_args)that);
      return false;
    }

    public boolean equals(getStudentByGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStudentByGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStudentByGroup_args(");
      boolean first = true;

      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStudentByGroup_argsStandardSchemeFactory implements SchemeFactory {
      public getStudentByGroup_argsStandardScheme getScheme() {
        return new getStudentByGroup_argsStandardScheme();
      }
    }

    private static class getStudentByGroup_argsStandardScheme extends StandardScheme<getStudentByGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStudentByGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.groupId = iprot.readI32();
                struct.setGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStudentByGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.groupId);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStudentByGroup_argsTupleSchemeFactory implements SchemeFactory {
      public getStudentByGroup_argsTupleScheme getScheme() {
        return new getStudentByGroup_argsTupleScheme();
      }
    }

    private static class getStudentByGroup_argsTupleScheme extends TupleScheme<getStudentByGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStudentByGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGroupId()) {
          oprot.writeI32(struct.groupId);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStudentByGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.groupId = iprot.readI32();
          struct.setGroupIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class getStudentByGroup_result implements org.apache.thrift.TBase<getStudentByGroup_result, getStudentByGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStudentByGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStudentByGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStudentByGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStudentByGroup_resultTupleSchemeFactory());
    }

    public List<TStudent> success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStudent.class))));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStudentByGroup_result.class, metaDataMap);
    }

    public getStudentByGroup_result() {
    }

    public getStudentByGroup_result(
      List<TStudent> success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStudentByGroup_result(getStudentByGroup_result other) {
      if (other.isSetSuccess()) {
        List<TStudent> __this__success = new ArrayList<TStudent>(other.success.size());
        for (TStudent other_element : other.success) {
          __this__success.add(new TStudent(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public getStudentByGroup_result deepCopy() {
      return new getStudentByGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TStudent> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TStudent elem) {
      if (this.success == null) {
        this.success = new ArrayList<TStudent>();
      }
      this.success.add(elem);
    }

    public List<TStudent> getSuccess() {
      return this.success;
    }

    public getStudentByGroup_result setSuccess(List<TStudent> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public getStudentByGroup_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TStudent>)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStudentByGroup_result)
        return this.equals((getStudentByGroup_result)that);
      return false;
    }

    public boolean equals(getStudentByGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStudentByGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStudentByGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStudentByGroup_resultStandardSchemeFactory implements SchemeFactory {
      public getStudentByGroup_resultStandardScheme getScheme() {
        return new getStudentByGroup_resultStandardScheme();
      }
    }

    private static class getStudentByGroup_resultStandardScheme extends StandardScheme<getStudentByGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStudentByGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                  struct.success = new ArrayList<TStudent>(_list192.size);
                  for (int _i193 = 0; _i193 < _list192.size; ++_i193)
                  {
                    TStudent _elem194;
                    _elem194 = new TStudent();
                    _elem194.read(iprot);
                    struct.success.add(_elem194);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStudentByGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TStudent _iter195 : struct.success)
            {
              _iter195.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStudentByGroup_resultTupleSchemeFactory implements SchemeFactory {
      public getStudentByGroup_resultTupleScheme getScheme() {
        return new getStudentByGroup_resultTupleScheme();
      }
    }

    private static class getStudentByGroup_resultTupleScheme extends TupleScheme<getStudentByGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStudentByGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TStudent _iter196 : struct.success)
            {
              _iter196.write(oprot);
            }
          }
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStudentByGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TStudent>(_list197.size);
            for (int _i198 = 0; _i198 < _list197.size; ++_i198)
            {
              TStudent _elem199;
              _elem199 = new TStudent();
              _elem199.read(iprot);
              struct.success.add(_elem199);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class deleteGroup_args implements org.apache.thrift.TBase<deleteGroup_args, deleteGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteGroup_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteGroup_argsTupleSchemeFactory());
    }

    public int id; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteGroup_args.class, metaDataMap);
    }

    public deleteGroup_args() {
    }

    public deleteGroup_args(
      int id,
      String access_token)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteGroup_args(deleteGroup_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public deleteGroup_args deepCopy() {
      return new deleteGroup_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.access_token = null;
    }

    public int getId() {
      return this.id;
    }

    public deleteGroup_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public deleteGroup_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteGroup_args)
        return this.equals((deleteGroup_args)that);
      return false;
    }

    public boolean equals(deleteGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteGroup_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteGroup_argsStandardSchemeFactory implements SchemeFactory {
      public deleteGroup_argsStandardScheme getScheme() {
        return new deleteGroup_argsStandardScheme();
      }
    }

    private static class deleteGroup_argsStandardScheme extends StandardScheme<deleteGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteGroup_argsTupleSchemeFactory implements SchemeFactory {
      public deleteGroup_argsTupleScheme getScheme() {
        return new deleteGroup_argsTupleScheme();
      }
    }

    private static class deleteGroup_argsTupleScheme extends TupleScheme<deleteGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class deleteGroup_result implements org.apache.thrift.TBase<deleteGroup_result, deleteGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteGroup_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteGroup_result.class, metaDataMap);
    }

    public deleteGroup_result() {
    }

    public deleteGroup_result(
      boolean success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteGroup_result(deleteGroup_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public deleteGroup_result deepCopy() {
      return new deleteGroup_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.myerror = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteGroup_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public deleteGroup_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteGroup_result)
        return this.equals((deleteGroup_result)that);
      return false;
    }

    public boolean equals(deleteGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteGroup_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteGroup_resultStandardSchemeFactory implements SchemeFactory {
      public deleteGroup_resultStandardScheme getScheme() {
        return new deleteGroup_resultStandardScheme();
      }
    }

    private static class deleteGroup_resultStandardScheme extends StandardScheme<deleteGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteGroup_resultTupleSchemeFactory implements SchemeFactory {
      public deleteGroup_resultTupleScheme getScheme() {
        return new deleteGroup_resultTupleScheme();
      }
    }

    private static class deleteGroup_resultTupleScheme extends TupleScheme<deleteGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

}
