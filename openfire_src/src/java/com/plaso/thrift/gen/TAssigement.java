/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.plaso.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TAssigement implements org.apache.thrift.TBase<TAssigement, TAssigement._Fields>, java.io.Serializable, Cloneable, Comparable<TAssigement> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAssigement");

  private static final org.apache.thrift.protocol.TField MYID_FIELD_DESC = new org.apache.thrift.protocol.TField("myid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TEACHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField A_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("aDesc", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EXERCISE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exerciseId", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField STUDENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("studentId", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createAt", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateAt", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAssigementStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAssigementTupleSchemeFactory());
  }

  public int myid; // required
  public int teacherId; // required
  public String aDesc; // required
  public List<Integer> exerciseId; // required
  public List<Integer> studentId; // required
  public String createAt; // required
  public String updateAt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MYID((short)1, "myid"),
    TEACHER_ID((short)2, "teacherId"),
    A_DESC((short)3, "aDesc"),
    EXERCISE_ID((short)4, "exerciseId"),
    STUDENT_ID((short)5, "studentId"),
    CREATE_AT((short)6, "createAt"),
    UPDATE_AT((short)7, "updateAt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MYID
          return MYID;
        case 2: // TEACHER_ID
          return TEACHER_ID;
        case 3: // A_DESC
          return A_DESC;
        case 4: // EXERCISE_ID
          return EXERCISE_ID;
        case 5: // STUDENT_ID
          return STUDENT_ID;
        case 6: // CREATE_AT
          return CREATE_AT;
        case 7: // UPDATE_AT
          return UPDATE_AT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MYID_ISSET_ID = 0;
  private static final int __TEACHERID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MYID, new org.apache.thrift.meta_data.FieldMetaData("myid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEACHER_ID, new org.apache.thrift.meta_data.FieldMetaData("teacherId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.A_DESC, new org.apache.thrift.meta_data.FieldMetaData("aDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXERCISE_ID, new org.apache.thrift.meta_data.FieldMetaData("exerciseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.STUDENT_ID, new org.apache.thrift.meta_data.FieldMetaData("studentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CREATE_AT, new org.apache.thrift.meta_data.FieldMetaData("createAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_AT, new org.apache.thrift.meta_data.FieldMetaData("updateAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAssigement.class, metaDataMap);
  }

  public TAssigement() {
  }

  public TAssigement(
    int myid,
    int teacherId,
    String aDesc,
    List<Integer> exerciseId,
    List<Integer> studentId,
    String createAt,
    String updateAt)
  {
    this();
    this.myid = myid;
    setMyidIsSet(true);
    this.teacherId = teacherId;
    setTeacherIdIsSet(true);
    this.aDesc = aDesc;
    this.exerciseId = exerciseId;
    this.studentId = studentId;
    this.createAt = createAt;
    this.updateAt = updateAt;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAssigement(TAssigement other) {
    __isset_bitfield = other.__isset_bitfield;
    this.myid = other.myid;
    this.teacherId = other.teacherId;
    if (other.isSetADesc()) {
      this.aDesc = other.aDesc;
    }
    if (other.isSetExerciseId()) {
      List<Integer> __this__exerciseId = new ArrayList<Integer>(other.exerciseId);
      this.exerciseId = __this__exerciseId;
    }
    if (other.isSetStudentId()) {
      List<Integer> __this__studentId = new ArrayList<Integer>(other.studentId);
      this.studentId = __this__studentId;
    }
    if (other.isSetCreateAt()) {
      this.createAt = other.createAt;
    }
    if (other.isSetUpdateAt()) {
      this.updateAt = other.updateAt;
    }
  }

  public TAssigement deepCopy() {
    return new TAssigement(this);
  }

  @Override
  public void clear() {
    setMyidIsSet(false);
    this.myid = 0;
    setTeacherIdIsSet(false);
    this.teacherId = 0;
    this.aDesc = null;
    this.exerciseId = null;
    this.studentId = null;
    this.createAt = null;
    this.updateAt = null;
  }

  public int getMyid() {
    return this.myid;
  }

  public TAssigement setMyid(int myid) {
    this.myid = myid;
    setMyidIsSet(true);
    return this;
  }

  public void unsetMyid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYID_ISSET_ID);
  }

  /** Returns true if field myid is set (has been assigned a value) and false otherwise */
  public boolean isSetMyid() {
    return EncodingUtils.testBit(__isset_bitfield, __MYID_ISSET_ID);
  }

  public void setMyidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYID_ISSET_ID, value);
  }

  public int getTeacherId() {
    return this.teacherId;
  }

  public TAssigement setTeacherId(int teacherId) {
    this.teacherId = teacherId;
    setTeacherIdIsSet(true);
    return this;
  }

  public void unsetTeacherId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEACHERID_ISSET_ID);
  }

  /** Returns true if field teacherId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherId() {
    return EncodingUtils.testBit(__isset_bitfield, __TEACHERID_ISSET_ID);
  }

  public void setTeacherIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEACHERID_ISSET_ID, value);
  }

  public String getADesc() {
    return this.aDesc;
  }

  public TAssigement setADesc(String aDesc) {
    this.aDesc = aDesc;
    return this;
  }

  public void unsetADesc() {
    this.aDesc = null;
  }

  /** Returns true if field aDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetADesc() {
    return this.aDesc != null;
  }

  public void setADescIsSet(boolean value) {
    if (!value) {
      this.aDesc = null;
    }
  }

  public int getExerciseIdSize() {
    return (this.exerciseId == null) ? 0 : this.exerciseId.size();
  }

  public java.util.Iterator<Integer> getExerciseIdIterator() {
    return (this.exerciseId == null) ? null : this.exerciseId.iterator();
  }

  public void addToExerciseId(int elem) {
    if (this.exerciseId == null) {
      this.exerciseId = new ArrayList<Integer>();
    }
    this.exerciseId.add(elem);
  }

  public List<Integer> getExerciseId() {
    return this.exerciseId;
  }

  public TAssigement setExerciseId(List<Integer> exerciseId) {
    this.exerciseId = exerciseId;
    return this;
  }

  public void unsetExerciseId() {
    this.exerciseId = null;
  }

  /** Returns true if field exerciseId is set (has been assigned a value) and false otherwise */
  public boolean isSetExerciseId() {
    return this.exerciseId != null;
  }

  public void setExerciseIdIsSet(boolean value) {
    if (!value) {
      this.exerciseId = null;
    }
  }

  public int getStudentIdSize() {
    return (this.studentId == null) ? 0 : this.studentId.size();
  }

  public java.util.Iterator<Integer> getStudentIdIterator() {
    return (this.studentId == null) ? null : this.studentId.iterator();
  }

  public void addToStudentId(int elem) {
    if (this.studentId == null) {
      this.studentId = new ArrayList<Integer>();
    }
    this.studentId.add(elem);
  }

  public List<Integer> getStudentId() {
    return this.studentId;
  }

  public TAssigement setStudentId(List<Integer> studentId) {
    this.studentId = studentId;
    return this;
  }

  public void unsetStudentId() {
    this.studentId = null;
  }

  /** Returns true if field studentId is set (has been assigned a value) and false otherwise */
  public boolean isSetStudentId() {
    return this.studentId != null;
  }

  public void setStudentIdIsSet(boolean value) {
    if (!value) {
      this.studentId = null;
    }
  }

  public String getCreateAt() {
    return this.createAt;
  }

  public TAssigement setCreateAt(String createAt) {
    this.createAt = createAt;
    return this;
  }

  public void unsetCreateAt() {
    this.createAt = null;
  }

  /** Returns true if field createAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateAt() {
    return this.createAt != null;
  }

  public void setCreateAtIsSet(boolean value) {
    if (!value) {
      this.createAt = null;
    }
  }

  public String getUpdateAt() {
    return this.updateAt;
  }

  public TAssigement setUpdateAt(String updateAt) {
    this.updateAt = updateAt;
    return this;
  }

  public void unsetUpdateAt() {
    this.updateAt = null;
  }

  /** Returns true if field updateAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateAt() {
    return this.updateAt != null;
  }

  public void setUpdateAtIsSet(boolean value) {
    if (!value) {
      this.updateAt = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MYID:
      if (value == null) {
        unsetMyid();
      } else {
        setMyid((Integer)value);
      }
      break;

    case TEACHER_ID:
      if (value == null) {
        unsetTeacherId();
      } else {
        setTeacherId((Integer)value);
      }
      break;

    case A_DESC:
      if (value == null) {
        unsetADesc();
      } else {
        setADesc((String)value);
      }
      break;

    case EXERCISE_ID:
      if (value == null) {
        unsetExerciseId();
      } else {
        setExerciseId((List<Integer>)value);
      }
      break;

    case STUDENT_ID:
      if (value == null) {
        unsetStudentId();
      } else {
        setStudentId((List<Integer>)value);
      }
      break;

    case CREATE_AT:
      if (value == null) {
        unsetCreateAt();
      } else {
        setCreateAt((String)value);
      }
      break;

    case UPDATE_AT:
      if (value == null) {
        unsetUpdateAt();
      } else {
        setUpdateAt((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MYID:
      return Integer.valueOf(getMyid());

    case TEACHER_ID:
      return Integer.valueOf(getTeacherId());

    case A_DESC:
      return getADesc();

    case EXERCISE_ID:
      return getExerciseId();

    case STUDENT_ID:
      return getStudentId();

    case CREATE_AT:
      return getCreateAt();

    case UPDATE_AT:
      return getUpdateAt();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MYID:
      return isSetMyid();
    case TEACHER_ID:
      return isSetTeacherId();
    case A_DESC:
      return isSetADesc();
    case EXERCISE_ID:
      return isSetExerciseId();
    case STUDENT_ID:
      return isSetStudentId();
    case CREATE_AT:
      return isSetCreateAt();
    case UPDATE_AT:
      return isSetUpdateAt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAssigement)
      return this.equals((TAssigement)that);
    return false;
  }

  public boolean equals(TAssigement that) {
    if (that == null)
      return false;

    boolean this_present_myid = true;
    boolean that_present_myid = true;
    if (this_present_myid || that_present_myid) {
      if (!(this_present_myid && that_present_myid))
        return false;
      if (this.myid != that.myid)
        return false;
    }

    boolean this_present_teacherId = true;
    boolean that_present_teacherId = true;
    if (this_present_teacherId || that_present_teacherId) {
      if (!(this_present_teacherId && that_present_teacherId))
        return false;
      if (this.teacherId != that.teacherId)
        return false;
    }

    boolean this_present_aDesc = true && this.isSetADesc();
    boolean that_present_aDesc = true && that.isSetADesc();
    if (this_present_aDesc || that_present_aDesc) {
      if (!(this_present_aDesc && that_present_aDesc))
        return false;
      if (!this.aDesc.equals(that.aDesc))
        return false;
    }

    boolean this_present_exerciseId = true && this.isSetExerciseId();
    boolean that_present_exerciseId = true && that.isSetExerciseId();
    if (this_present_exerciseId || that_present_exerciseId) {
      if (!(this_present_exerciseId && that_present_exerciseId))
        return false;
      if (!this.exerciseId.equals(that.exerciseId))
        return false;
    }

    boolean this_present_studentId = true && this.isSetStudentId();
    boolean that_present_studentId = true && that.isSetStudentId();
    if (this_present_studentId || that_present_studentId) {
      if (!(this_present_studentId && that_present_studentId))
        return false;
      if (!this.studentId.equals(that.studentId))
        return false;
    }

    boolean this_present_createAt = true && this.isSetCreateAt();
    boolean that_present_createAt = true && that.isSetCreateAt();
    if (this_present_createAt || that_present_createAt) {
      if (!(this_present_createAt && that_present_createAt))
        return false;
      if (!this.createAt.equals(that.createAt))
        return false;
    }

    boolean this_present_updateAt = true && this.isSetUpdateAt();
    boolean that_present_updateAt = true && that.isSetUpdateAt();
    if (this_present_updateAt || that_present_updateAt) {
      if (!(this_present_updateAt && that_present_updateAt))
        return false;
      if (!this.updateAt.equals(that.updateAt))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TAssigement other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMyid()).compareTo(other.isSetMyid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myid, other.myid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeacherId()).compareTo(other.isSetTeacherId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherId, other.teacherId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetADesc()).compareTo(other.isSetADesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetADesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aDesc, other.aDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExerciseId()).compareTo(other.isSetExerciseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExerciseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exerciseId, other.exerciseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStudentId()).compareTo(other.isSetStudentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentId, other.studentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateAt()).compareTo(other.isSetCreateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createAt, other.createAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateAt()).compareTo(other.isSetUpdateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateAt, other.updateAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAssigement(");
    boolean first = true;

    sb.append("myid:");
    sb.append(this.myid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherId:");
    sb.append(this.teacherId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aDesc:");
    if (this.aDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.aDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exerciseId:");
    if (this.exerciseId == null) {
      sb.append("null");
    } else {
      sb.append(this.exerciseId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("studentId:");
    if (this.studentId == null) {
      sb.append("null");
    } else {
      sb.append(this.studentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createAt:");
    if (this.createAt == null) {
      sb.append("null");
    } else {
      sb.append(this.createAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateAt:");
    if (this.updateAt == null) {
      sb.append("null");
    } else {
      sb.append(this.updateAt);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAssigementStandardSchemeFactory implements SchemeFactory {
    public TAssigementStandardScheme getScheme() {
      return new TAssigementStandardScheme();
    }
  }

  private static class TAssigementStandardScheme extends StandardScheme<TAssigement> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAssigement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MYID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.myid = iprot.readI32();
              struct.setMyidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEACHER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.teacherId = iprot.readI32();
              struct.setTeacherIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // A_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.aDesc = iprot.readString();
              struct.setADescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXERCISE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.exerciseId = new ArrayList<Integer>(_list48.size);
                for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                {
                  int _elem50;
                  _elem50 = iprot.readI32();
                  struct.exerciseId.add(_elem50);
                }
                iprot.readListEnd();
              }
              struct.setExerciseIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STUDENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                struct.studentId = new ArrayList<Integer>(_list51.size);
                for (int _i52 = 0; _i52 < _list51.size; ++_i52)
                {
                  int _elem53;
                  _elem53 = iprot.readI32();
                  struct.studentId.add(_elem53);
                }
                iprot.readListEnd();
              }
              struct.setStudentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createAt = iprot.readString();
              struct.setCreateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateAt = iprot.readString();
              struct.setUpdateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAssigement struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MYID_FIELD_DESC);
      oprot.writeI32(struct.myid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEACHER_ID_FIELD_DESC);
      oprot.writeI32(struct.teacherId);
      oprot.writeFieldEnd();
      if (struct.aDesc != null) {
        oprot.writeFieldBegin(A_DESC_FIELD_DESC);
        oprot.writeString(struct.aDesc);
        oprot.writeFieldEnd();
      }
      if (struct.exerciseId != null) {
        oprot.writeFieldBegin(EXERCISE_ID_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.exerciseId.size()));
          for (int _iter54 : struct.exerciseId)
          {
            oprot.writeI32(_iter54);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.studentId != null) {
        oprot.writeFieldBegin(STUDENT_ID_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.studentId.size()));
          for (int _iter55 : struct.studentId)
          {
            oprot.writeI32(_iter55);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.createAt != null) {
        oprot.writeFieldBegin(CREATE_AT_FIELD_DESC);
        oprot.writeString(struct.createAt);
        oprot.writeFieldEnd();
      }
      if (struct.updateAt != null) {
        oprot.writeFieldBegin(UPDATE_AT_FIELD_DESC);
        oprot.writeString(struct.updateAt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAssigementTupleSchemeFactory implements SchemeFactory {
    public TAssigementTupleScheme getScheme() {
      return new TAssigementTupleScheme();
    }
  }

  private static class TAssigementTupleScheme extends TupleScheme<TAssigement> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAssigement struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMyid()) {
        optionals.set(0);
      }
      if (struct.isSetTeacherId()) {
        optionals.set(1);
      }
      if (struct.isSetADesc()) {
        optionals.set(2);
      }
      if (struct.isSetExerciseId()) {
        optionals.set(3);
      }
      if (struct.isSetStudentId()) {
        optionals.set(4);
      }
      if (struct.isSetCreateAt()) {
        optionals.set(5);
      }
      if (struct.isSetUpdateAt()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetMyid()) {
        oprot.writeI32(struct.myid);
      }
      if (struct.isSetTeacherId()) {
        oprot.writeI32(struct.teacherId);
      }
      if (struct.isSetADesc()) {
        oprot.writeString(struct.aDesc);
      }
      if (struct.isSetExerciseId()) {
        {
          oprot.writeI32(struct.exerciseId.size());
          for (int _iter56 : struct.exerciseId)
          {
            oprot.writeI32(_iter56);
          }
        }
      }
      if (struct.isSetStudentId()) {
        {
          oprot.writeI32(struct.studentId.size());
          for (int _iter57 : struct.studentId)
          {
            oprot.writeI32(_iter57);
          }
        }
      }
      if (struct.isSetCreateAt()) {
        oprot.writeString(struct.createAt);
      }
      if (struct.isSetUpdateAt()) {
        oprot.writeString(struct.updateAt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAssigement struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.myid = iprot.readI32();
        struct.setMyidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.teacherId = iprot.readI32();
        struct.setTeacherIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.aDesc = iprot.readString();
        struct.setADescIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.exerciseId = new ArrayList<Integer>(_list58.size);
          for (int _i59 = 0; _i59 < _list58.size; ++_i59)
          {
            int _elem60;
            _elem60 = iprot.readI32();
            struct.exerciseId.add(_elem60);
          }
        }
        struct.setExerciseIdIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.studentId = new ArrayList<Integer>(_list61.size);
          for (int _i62 = 0; _i62 < _list61.size; ++_i62)
          {
            int _elem63;
            _elem63 = iprot.readI32();
            struct.studentId.add(_elem63);
          }
        }
        struct.setStudentIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createAt = iprot.readString();
        struct.setCreateAtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updateAt = iprot.readString();
        struct.setUpdateAtIsSet(true);
      }
    }
  }

}

