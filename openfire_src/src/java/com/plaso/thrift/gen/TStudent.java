/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.plaso.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TStudent implements org.apache.thrift.TBase<TStudent, TStudent._Fields>, java.io.Serializable, Cloneable, Comparable<TStudent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TStudent");

  private static final org.apache.thrift.protocol.TField MYID_FIELD_DESC = new org.apache.thrift.protocol.TField("myid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STUDENT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("studentNumber", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SCHOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("school", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField AVATAR_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarUrl", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CREATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createAt", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField UPDATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateAt", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField USER_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("userLevel", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("active", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("org_id", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField MYROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("myrole", org.apache.thrift.protocol.TType.I32, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TStudentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TStudentTupleSchemeFactory());
  }

  public int myid; // required
  public String studentNumber; // required
  public String loginName; // required
  public String password; // required
  public String email; // required
  public String mobile; // required
  public String name; // required
  public String country; // required
  public String state; // required
  public String city; // required
  public String school; // required
  public String signature; // required
  public String profile; // required
  public String avatarUrl; // required
  public String createAt; // required
  public String updateAt; // required
  public int userLevel; // required
  public boolean active; // required
  public int org_id; // required
  public String access_token; // required
  /**
   * 
   * @see TUSerRole
   */
  public TUSerRole myrole; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MYID((short)1, "myid"),
    STUDENT_NUMBER((short)2, "studentNumber"),
    LOGIN_NAME((short)3, "loginName"),
    PASSWORD((short)4, "password"),
    EMAIL((short)5, "email"),
    MOBILE((short)6, "mobile"),
    NAME((short)7, "name"),
    COUNTRY((short)8, "country"),
    STATE((short)9, "state"),
    CITY((short)10, "city"),
    SCHOOL((short)11, "school"),
    SIGNATURE((short)12, "signature"),
    PROFILE((short)13, "profile"),
    AVATAR_URL((short)14, "avatarUrl"),
    CREATE_AT((short)15, "createAt"),
    UPDATE_AT((short)16, "updateAt"),
    USER_LEVEL((short)17, "userLevel"),
    ACTIVE((short)18, "active"),
    ORG_ID((short)19, "org_id"),
    ACCESS_TOKEN((short)20, "access_token"),
    /**
     * 
     * @see TUSerRole
     */
    MYROLE((short)21, "myrole");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MYID
          return MYID;
        case 2: // STUDENT_NUMBER
          return STUDENT_NUMBER;
        case 3: // LOGIN_NAME
          return LOGIN_NAME;
        case 4: // PASSWORD
          return PASSWORD;
        case 5: // EMAIL
          return EMAIL;
        case 6: // MOBILE
          return MOBILE;
        case 7: // NAME
          return NAME;
        case 8: // COUNTRY
          return COUNTRY;
        case 9: // STATE
          return STATE;
        case 10: // CITY
          return CITY;
        case 11: // SCHOOL
          return SCHOOL;
        case 12: // SIGNATURE
          return SIGNATURE;
        case 13: // PROFILE
          return PROFILE;
        case 14: // AVATAR_URL
          return AVATAR_URL;
        case 15: // CREATE_AT
          return CREATE_AT;
        case 16: // UPDATE_AT
          return UPDATE_AT;
        case 17: // USER_LEVEL
          return USER_LEVEL;
        case 18: // ACTIVE
          return ACTIVE;
        case 19: // ORG_ID
          return ORG_ID;
        case 20: // ACCESS_TOKEN
          return ACCESS_TOKEN;
        case 21: // MYROLE
          return MYROLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MYID_ISSET_ID = 0;
  private static final int __USERLEVEL_ISSET_ID = 1;
  private static final int __ACTIVE_ISSET_ID = 2;
  private static final int __ORG_ID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MYID, new org.apache.thrift.meta_data.FieldMetaData("myid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STUDENT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("studentNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("loginName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCHOOL, new org.apache.thrift.meta_data.FieldMetaData("school", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVATAR_URL, new org.apache.thrift.meta_data.FieldMetaData("avatarUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_AT, new org.apache.thrift.meta_data.FieldMetaData("createAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_AT, new org.apache.thrift.meta_data.FieldMetaData("updateAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("userLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("active", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("org_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MYROLE, new org.apache.thrift.meta_data.FieldMetaData("myrole", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TUSerRole.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TStudent.class, metaDataMap);
  }

  public TStudent() {
  }

  public TStudent(
    int myid,
    String studentNumber,
    String loginName,
    String password,
    String email,
    String mobile,
    String name,
    String country,
    String state,
    String city,
    String school,
    String signature,
    String profile,
    String avatarUrl,
    String createAt,
    String updateAt,
    int userLevel,
    boolean active,
    int org_id,
    String access_token,
    TUSerRole myrole)
  {
    this();
    this.myid = myid;
    setMyidIsSet(true);
    this.studentNumber = studentNumber;
    this.loginName = loginName;
    this.password = password;
    this.email = email;
    this.mobile = mobile;
    this.name = name;
    this.country = country;
    this.state = state;
    this.city = city;
    this.school = school;
    this.signature = signature;
    this.profile = profile;
    this.avatarUrl = avatarUrl;
    this.createAt = createAt;
    this.updateAt = updateAt;
    this.userLevel = userLevel;
    setUserLevelIsSet(true);
    this.active = active;
    setActiveIsSet(true);
    this.org_id = org_id;
    setOrg_idIsSet(true);
    this.access_token = access_token;
    this.myrole = myrole;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TStudent(TStudent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.myid = other.myid;
    if (other.isSetStudentNumber()) {
      this.studentNumber = other.studentNumber;
    }
    if (other.isSetLoginName()) {
      this.loginName = other.loginName;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetCountry()) {
      this.country = other.country;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetSchool()) {
      this.school = other.school;
    }
    if (other.isSetSignature()) {
      this.signature = other.signature;
    }
    if (other.isSetProfile()) {
      this.profile = other.profile;
    }
    if (other.isSetAvatarUrl()) {
      this.avatarUrl = other.avatarUrl;
    }
    if (other.isSetCreateAt()) {
      this.createAt = other.createAt;
    }
    if (other.isSetUpdateAt()) {
      this.updateAt = other.updateAt;
    }
    this.userLevel = other.userLevel;
    this.active = other.active;
    this.org_id = other.org_id;
    if (other.isSetAccess_token()) {
      this.access_token = other.access_token;
    }
    if (other.isSetMyrole()) {
      this.myrole = other.myrole;
    }
  }

  public TStudent deepCopy() {
    return new TStudent(this);
  }

  @Override
  public void clear() {
    setMyidIsSet(false);
    this.myid = 0;
    this.studentNumber = null;
    this.loginName = null;
    this.password = null;
    this.email = null;
    this.mobile = null;
    this.name = null;
    this.country = null;
    this.state = null;
    this.city = null;
    this.school = null;
    this.signature = null;
    this.profile = null;
    this.avatarUrl = null;
    this.createAt = null;
    this.updateAt = null;
    setUserLevelIsSet(false);
    this.userLevel = 0;
    setActiveIsSet(false);
    this.active = false;
    setOrg_idIsSet(false);
    this.org_id = 0;
    this.access_token = null;
    this.myrole = null;
  }

  public int getMyid() {
    return this.myid;
  }

  public TStudent setMyid(int myid) {
    this.myid = myid;
    setMyidIsSet(true);
    return this;
  }

  public void unsetMyid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYID_ISSET_ID);
  }

  /** Returns true if field myid is set (has been assigned a value) and false otherwise */
  public boolean isSetMyid() {
    return EncodingUtils.testBit(__isset_bitfield, __MYID_ISSET_ID);
  }

  public void setMyidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYID_ISSET_ID, value);
  }

  public String getStudentNumber() {
    return this.studentNumber;
  }

  public TStudent setStudentNumber(String studentNumber) {
    this.studentNumber = studentNumber;
    return this;
  }

  public void unsetStudentNumber() {
    this.studentNumber = null;
  }

  /** Returns true if field studentNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetStudentNumber() {
    return this.studentNumber != null;
  }

  public void setStudentNumberIsSet(boolean value) {
    if (!value) {
      this.studentNumber = null;
    }
  }

  public String getLoginName() {
    return this.loginName;
  }

  public TStudent setLoginName(String loginName) {
    this.loginName = loginName;
    return this;
  }

  public void unsetLoginName() {
    this.loginName = null;
  }

  /** Returns true if field loginName is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginName() {
    return this.loginName != null;
  }

  public void setLoginNameIsSet(boolean value) {
    if (!value) {
      this.loginName = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public TStudent setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public TStudent setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getMobile() {
    return this.mobile;
  }

  public TStudent setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public TStudent setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getCountry() {
    return this.country;
  }

  public TStudent setCountry(String country) {
    this.country = country;
    return this;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public String getState() {
    return this.state;
  }

  public TStudent setState(String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public TStudent setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public String getSchool() {
    return this.school;
  }

  public TStudent setSchool(String school) {
    this.school = school;
    return this;
  }

  public void unsetSchool() {
    this.school = null;
  }

  /** Returns true if field school is set (has been assigned a value) and false otherwise */
  public boolean isSetSchool() {
    return this.school != null;
  }

  public void setSchoolIsSet(boolean value) {
    if (!value) {
      this.school = null;
    }
  }

  public String getSignature() {
    return this.signature;
  }

  public TStudent setSignature(String signature) {
    this.signature = signature;
    return this;
  }

  public void unsetSignature() {
    this.signature = null;
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return this.signature != null;
  }

  public void setSignatureIsSet(boolean value) {
    if (!value) {
      this.signature = null;
    }
  }

  public String getProfile() {
    return this.profile;
  }

  public TStudent setProfile(String profile) {
    this.profile = profile;
    return this;
  }

  public void unsetProfile() {
    this.profile = null;
  }

  /** Returns true if field profile is set (has been assigned a value) and false otherwise */
  public boolean isSetProfile() {
    return this.profile != null;
  }

  public void setProfileIsSet(boolean value) {
    if (!value) {
      this.profile = null;
    }
  }

  public String getAvatarUrl() {
    return this.avatarUrl;
  }

  public TStudent setAvatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
    return this;
  }

  public void unsetAvatarUrl() {
    this.avatarUrl = null;
  }

  /** Returns true if field avatarUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatarUrl() {
    return this.avatarUrl != null;
  }

  public void setAvatarUrlIsSet(boolean value) {
    if (!value) {
      this.avatarUrl = null;
    }
  }

  public String getCreateAt() {
    return this.createAt;
  }

  public TStudent setCreateAt(String createAt) {
    this.createAt = createAt;
    return this;
  }

  public void unsetCreateAt() {
    this.createAt = null;
  }

  /** Returns true if field createAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateAt() {
    return this.createAt != null;
  }

  public void setCreateAtIsSet(boolean value) {
    if (!value) {
      this.createAt = null;
    }
  }

  public String getUpdateAt() {
    return this.updateAt;
  }

  public TStudent setUpdateAt(String updateAt) {
    this.updateAt = updateAt;
    return this;
  }

  public void unsetUpdateAt() {
    this.updateAt = null;
  }

  /** Returns true if field updateAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateAt() {
    return this.updateAt != null;
  }

  public void setUpdateAtIsSet(boolean value) {
    if (!value) {
      this.updateAt = null;
    }
  }

  public int getUserLevel() {
    return this.userLevel;
  }

  public TStudent setUserLevel(int userLevel) {
    this.userLevel = userLevel;
    setUserLevelIsSet(true);
    return this;
  }

  public void unsetUserLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERLEVEL_ISSET_ID);
  }

  /** Returns true if field userLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetUserLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __USERLEVEL_ISSET_ID);
  }

  public void setUserLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERLEVEL_ISSET_ID, value);
  }

  public boolean isActive() {
    return this.active;
  }

  public TStudent setActive(boolean active) {
    this.active = active;
    setActiveIsSet(true);
    return this;
  }

  public void unsetActive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  /** Returns true if field active is set (has been assigned a value) and false otherwise */
  public boolean isSetActive() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  public void setActiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVE_ISSET_ID, value);
  }

  public int getOrg_id() {
    return this.org_id;
  }

  public TStudent setOrg_id(int org_id) {
    this.org_id = org_id;
    setOrg_idIsSet(true);
    return this;
  }

  public void unsetOrg_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORG_ID_ISSET_ID);
  }

  /** Returns true if field org_id is set (has been assigned a value) and false otherwise */
  public boolean isSetOrg_id() {
    return EncodingUtils.testBit(__isset_bitfield, __ORG_ID_ISSET_ID);
  }

  public void setOrg_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORG_ID_ISSET_ID, value);
  }

  public String getAccess_token() {
    return this.access_token;
  }

  public TStudent setAccess_token(String access_token) {
    this.access_token = access_token;
    return this;
  }

  public void unsetAccess_token() {
    this.access_token = null;
  }

  /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
  public boolean isSetAccess_token() {
    return this.access_token != null;
  }

  public void setAccess_tokenIsSet(boolean value) {
    if (!value) {
      this.access_token = null;
    }
  }

  /**
   * 
   * @see TUSerRole
   */
  public TUSerRole getMyrole() {
    return this.myrole;
  }

  /**
   * 
   * @see TUSerRole
   */
  public TStudent setMyrole(TUSerRole myrole) {
    this.myrole = myrole;
    return this;
  }

  public void unsetMyrole() {
    this.myrole = null;
  }

  /** Returns true if field myrole is set (has been assigned a value) and false otherwise */
  public boolean isSetMyrole() {
    return this.myrole != null;
  }

  public void setMyroleIsSet(boolean value) {
    if (!value) {
      this.myrole = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MYID:
      if (value == null) {
        unsetMyid();
      } else {
        setMyid((Integer)value);
      }
      break;

    case STUDENT_NUMBER:
      if (value == null) {
        unsetStudentNumber();
      } else {
        setStudentNumber((String)value);
      }
      break;

    case LOGIN_NAME:
      if (value == null) {
        unsetLoginName();
      } else {
        setLoginName((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case COUNTRY:
      if (value == null) {
        unsetCountry();
      } else {
        setCountry((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case SCHOOL:
      if (value == null) {
        unsetSchool();
      } else {
        setSchool((String)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        setSignature((String)value);
      }
      break;

    case PROFILE:
      if (value == null) {
        unsetProfile();
      } else {
        setProfile((String)value);
      }
      break;

    case AVATAR_URL:
      if (value == null) {
        unsetAvatarUrl();
      } else {
        setAvatarUrl((String)value);
      }
      break;

    case CREATE_AT:
      if (value == null) {
        unsetCreateAt();
      } else {
        setCreateAt((String)value);
      }
      break;

    case UPDATE_AT:
      if (value == null) {
        unsetUpdateAt();
      } else {
        setUpdateAt((String)value);
      }
      break;

    case USER_LEVEL:
      if (value == null) {
        unsetUserLevel();
      } else {
        setUserLevel((Integer)value);
      }
      break;

    case ACTIVE:
      if (value == null) {
        unsetActive();
      } else {
        setActive((Boolean)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrg_id();
      } else {
        setOrg_id((Integer)value);
      }
      break;

    case ACCESS_TOKEN:
      if (value == null) {
        unsetAccess_token();
      } else {
        setAccess_token((String)value);
      }
      break;

    case MYROLE:
      if (value == null) {
        unsetMyrole();
      } else {
        setMyrole((TUSerRole)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MYID:
      return Integer.valueOf(getMyid());

    case STUDENT_NUMBER:
      return getStudentNumber();

    case LOGIN_NAME:
      return getLoginName();

    case PASSWORD:
      return getPassword();

    case EMAIL:
      return getEmail();

    case MOBILE:
      return getMobile();

    case NAME:
      return getName();

    case COUNTRY:
      return getCountry();

    case STATE:
      return getState();

    case CITY:
      return getCity();

    case SCHOOL:
      return getSchool();

    case SIGNATURE:
      return getSignature();

    case PROFILE:
      return getProfile();

    case AVATAR_URL:
      return getAvatarUrl();

    case CREATE_AT:
      return getCreateAt();

    case UPDATE_AT:
      return getUpdateAt();

    case USER_LEVEL:
      return Integer.valueOf(getUserLevel());

    case ACTIVE:
      return Boolean.valueOf(isActive());

    case ORG_ID:
      return Integer.valueOf(getOrg_id());

    case ACCESS_TOKEN:
      return getAccess_token();

    case MYROLE:
      return getMyrole();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MYID:
      return isSetMyid();
    case STUDENT_NUMBER:
      return isSetStudentNumber();
    case LOGIN_NAME:
      return isSetLoginName();
    case PASSWORD:
      return isSetPassword();
    case EMAIL:
      return isSetEmail();
    case MOBILE:
      return isSetMobile();
    case NAME:
      return isSetName();
    case COUNTRY:
      return isSetCountry();
    case STATE:
      return isSetState();
    case CITY:
      return isSetCity();
    case SCHOOL:
      return isSetSchool();
    case SIGNATURE:
      return isSetSignature();
    case PROFILE:
      return isSetProfile();
    case AVATAR_URL:
      return isSetAvatarUrl();
    case CREATE_AT:
      return isSetCreateAt();
    case UPDATE_AT:
      return isSetUpdateAt();
    case USER_LEVEL:
      return isSetUserLevel();
    case ACTIVE:
      return isSetActive();
    case ORG_ID:
      return isSetOrg_id();
    case ACCESS_TOKEN:
      return isSetAccess_token();
    case MYROLE:
      return isSetMyrole();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TStudent)
      return this.equals((TStudent)that);
    return false;
  }

  public boolean equals(TStudent that) {
    if (that == null)
      return false;

    boolean this_present_myid = true;
    boolean that_present_myid = true;
    if (this_present_myid || that_present_myid) {
      if (!(this_present_myid && that_present_myid))
        return false;
      if (this.myid != that.myid)
        return false;
    }

    boolean this_present_studentNumber = true && this.isSetStudentNumber();
    boolean that_present_studentNumber = true && that.isSetStudentNumber();
    if (this_present_studentNumber || that_present_studentNumber) {
      if (!(this_present_studentNumber && that_present_studentNumber))
        return false;
      if (!this.studentNumber.equals(that.studentNumber))
        return false;
    }

    boolean this_present_loginName = true && this.isSetLoginName();
    boolean that_present_loginName = true && that.isSetLoginName();
    if (this_present_loginName || that_present_loginName) {
      if (!(this_present_loginName && that_present_loginName))
        return false;
      if (!this.loginName.equals(that.loginName))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_school = true && this.isSetSchool();
    boolean that_present_school = true && that.isSetSchool();
    if (this_present_school || that_present_school) {
      if (!(this_present_school && that_present_school))
        return false;
      if (!this.school.equals(that.school))
        return false;
    }

    boolean this_present_signature = true && this.isSetSignature();
    boolean that_present_signature = true && that.isSetSignature();
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (!this.signature.equals(that.signature))
        return false;
    }

    boolean this_present_profile = true && this.isSetProfile();
    boolean that_present_profile = true && that.isSetProfile();
    if (this_present_profile || that_present_profile) {
      if (!(this_present_profile && that_present_profile))
        return false;
      if (!this.profile.equals(that.profile))
        return false;
    }

    boolean this_present_avatarUrl = true && this.isSetAvatarUrl();
    boolean that_present_avatarUrl = true && that.isSetAvatarUrl();
    if (this_present_avatarUrl || that_present_avatarUrl) {
      if (!(this_present_avatarUrl && that_present_avatarUrl))
        return false;
      if (!this.avatarUrl.equals(that.avatarUrl))
        return false;
    }

    boolean this_present_createAt = true && this.isSetCreateAt();
    boolean that_present_createAt = true && that.isSetCreateAt();
    if (this_present_createAt || that_present_createAt) {
      if (!(this_present_createAt && that_present_createAt))
        return false;
      if (!this.createAt.equals(that.createAt))
        return false;
    }

    boolean this_present_updateAt = true && this.isSetUpdateAt();
    boolean that_present_updateAt = true && that.isSetUpdateAt();
    if (this_present_updateAt || that_present_updateAt) {
      if (!(this_present_updateAt && that_present_updateAt))
        return false;
      if (!this.updateAt.equals(that.updateAt))
        return false;
    }

    boolean this_present_userLevel = true;
    boolean that_present_userLevel = true;
    if (this_present_userLevel || that_present_userLevel) {
      if (!(this_present_userLevel && that_present_userLevel))
        return false;
      if (this.userLevel != that.userLevel)
        return false;
    }

    boolean this_present_active = true;
    boolean that_present_active = true;
    if (this_present_active || that_present_active) {
      if (!(this_present_active && that_present_active))
        return false;
      if (this.active != that.active)
        return false;
    }

    boolean this_present_org_id = true;
    boolean that_present_org_id = true;
    if (this_present_org_id || that_present_org_id) {
      if (!(this_present_org_id && that_present_org_id))
        return false;
      if (this.org_id != that.org_id)
        return false;
    }

    boolean this_present_access_token = true && this.isSetAccess_token();
    boolean that_present_access_token = true && that.isSetAccess_token();
    if (this_present_access_token || that_present_access_token) {
      if (!(this_present_access_token && that_present_access_token))
        return false;
      if (!this.access_token.equals(that.access_token))
        return false;
    }

    boolean this_present_myrole = true && this.isSetMyrole();
    boolean that_present_myrole = true && that.isSetMyrole();
    if (this_present_myrole || that_present_myrole) {
      if (!(this_present_myrole && that_present_myrole))
        return false;
      if (!this.myrole.equals(that.myrole))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TStudent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMyid()).compareTo(other.isSetMyid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myid, other.myid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStudentNumber()).compareTo(other.isSetStudentNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudentNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentNumber, other.studentNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginName()).compareTo(other.isSetLoginName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginName, other.loginName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountry()).compareTo(other.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, other.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchool()).compareTo(other.isSetSchool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.school, other.school);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignature()).compareTo(other.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvatarUrl()).compareTo(other.isSetAvatarUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatarUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarUrl, other.avatarUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateAt()).compareTo(other.isSetCreateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createAt, other.createAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateAt()).compareTo(other.isSetUpdateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateAt, other.updateAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserLevel()).compareTo(other.isSetUserLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLevel, other.userLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActive()).compareTo(other.isSetActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.active, other.active);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrg_id()).compareTo(other.isSetOrg_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrg_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.org_id, other.org_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccess_token()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyrole()).compareTo(other.isSetMyrole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyrole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myrole, other.myrole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TStudent(");
    boolean first = true;

    sb.append("myid:");
    sb.append(this.myid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("studentNumber:");
    if (this.studentNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.studentNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginName:");
    if (this.loginName == null) {
      sb.append("null");
    } else {
      sb.append(this.loginName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("country:");
    if (this.country == null) {
      sb.append("null");
    } else {
      sb.append(this.country);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("school:");
    if (this.school == null) {
      sb.append("null");
    } else {
      sb.append(this.school);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("signature:");
    if (this.signature == null) {
      sb.append("null");
    } else {
      sb.append(this.signature);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profile:");
    if (this.profile == null) {
      sb.append("null");
    } else {
      sb.append(this.profile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("avatarUrl:");
    if (this.avatarUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.avatarUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createAt:");
    if (this.createAt == null) {
      sb.append("null");
    } else {
      sb.append(this.createAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateAt:");
    if (this.updateAt == null) {
      sb.append("null");
    } else {
      sb.append(this.updateAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userLevel:");
    sb.append(this.userLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("active:");
    sb.append(this.active);
    first = false;
    if (!first) sb.append(", ");
    sb.append("org_id:");
    sb.append(this.org_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("access_token:");
    if (this.access_token == null) {
      sb.append("null");
    } else {
      sb.append(this.access_token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myrole:");
    if (this.myrole == null) {
      sb.append("null");
    } else {
      sb.append(this.myrole);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TStudentStandardSchemeFactory implements SchemeFactory {
    public TStudentStandardScheme getScheme() {
      return new TStudentStandardScheme();
    }
  }

  private static class TStudentStandardScheme extends StandardScheme<TStudent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TStudent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MYID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.myid = iprot.readI32();
              struct.setMyidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STUDENT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.studentNumber = iprot.readString();
              struct.setStudentNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOGIN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginName = iprot.readString();
              struct.setLoginNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.country = iprot.readString();
              struct.setCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SCHOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.school = iprot.readString();
              struct.setSchoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signature = iprot.readString();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profile = iprot.readString();
              struct.setProfileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // AVATAR_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avatarUrl = iprot.readString();
              struct.setAvatarUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createAt = iprot.readString();
              struct.setCreateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UPDATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateAt = iprot.readString();
              struct.setUpdateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // USER_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userLevel = iprot.readI32();
              struct.setUserLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.active = iprot.readBool();
              struct.setActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.org_id = iprot.readI32();
              struct.setOrg_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ACCESS_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.access_token = iprot.readString();
              struct.setAccess_tokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MYROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.myrole = TUSerRole.findByValue(iprot.readI32());
              struct.setMyroleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TStudent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MYID_FIELD_DESC);
      oprot.writeI32(struct.myid);
      oprot.writeFieldEnd();
      if (struct.studentNumber != null) {
        oprot.writeFieldBegin(STUDENT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.studentNumber);
        oprot.writeFieldEnd();
      }
      if (struct.loginName != null) {
        oprot.writeFieldBegin(LOGIN_NAME_FIELD_DESC);
        oprot.writeString(struct.loginName);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(struct.country);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeString(struct.state);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      if (struct.school != null) {
        oprot.writeFieldBegin(SCHOOL_FIELD_DESC);
        oprot.writeString(struct.school);
        oprot.writeFieldEnd();
      }
      if (struct.signature != null) {
        oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
        oprot.writeString(struct.signature);
        oprot.writeFieldEnd();
      }
      if (struct.profile != null) {
        oprot.writeFieldBegin(PROFILE_FIELD_DESC);
        oprot.writeString(struct.profile);
        oprot.writeFieldEnd();
      }
      if (struct.avatarUrl != null) {
        oprot.writeFieldBegin(AVATAR_URL_FIELD_DESC);
        oprot.writeString(struct.avatarUrl);
        oprot.writeFieldEnd();
      }
      if (struct.createAt != null) {
        oprot.writeFieldBegin(CREATE_AT_FIELD_DESC);
        oprot.writeString(struct.createAt);
        oprot.writeFieldEnd();
      }
      if (struct.updateAt != null) {
        oprot.writeFieldBegin(UPDATE_AT_FIELD_DESC);
        oprot.writeString(struct.updateAt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.userLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVE_FIELD_DESC);
      oprot.writeBool(struct.active);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.org_id);
      oprot.writeFieldEnd();
      if (struct.access_token != null) {
        oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
        oprot.writeString(struct.access_token);
        oprot.writeFieldEnd();
      }
      if (struct.myrole != null) {
        oprot.writeFieldBegin(MYROLE_FIELD_DESC);
        oprot.writeI32(struct.myrole.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TStudentTupleSchemeFactory implements SchemeFactory {
    public TStudentTupleScheme getScheme() {
      return new TStudentTupleScheme();
    }
  }

  private static class TStudentTupleScheme extends TupleScheme<TStudent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TStudent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMyid()) {
        optionals.set(0);
      }
      if (struct.isSetStudentNumber()) {
        optionals.set(1);
      }
      if (struct.isSetLoginName()) {
        optionals.set(2);
      }
      if (struct.isSetPassword()) {
        optionals.set(3);
      }
      if (struct.isSetEmail()) {
        optionals.set(4);
      }
      if (struct.isSetMobile()) {
        optionals.set(5);
      }
      if (struct.isSetName()) {
        optionals.set(6);
      }
      if (struct.isSetCountry()) {
        optionals.set(7);
      }
      if (struct.isSetState()) {
        optionals.set(8);
      }
      if (struct.isSetCity()) {
        optionals.set(9);
      }
      if (struct.isSetSchool()) {
        optionals.set(10);
      }
      if (struct.isSetSignature()) {
        optionals.set(11);
      }
      if (struct.isSetProfile()) {
        optionals.set(12);
      }
      if (struct.isSetAvatarUrl()) {
        optionals.set(13);
      }
      if (struct.isSetCreateAt()) {
        optionals.set(14);
      }
      if (struct.isSetUpdateAt()) {
        optionals.set(15);
      }
      if (struct.isSetUserLevel()) {
        optionals.set(16);
      }
      if (struct.isSetActive()) {
        optionals.set(17);
      }
      if (struct.isSetOrg_id()) {
        optionals.set(18);
      }
      if (struct.isSetAccess_token()) {
        optionals.set(19);
      }
      if (struct.isSetMyrole()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetMyid()) {
        oprot.writeI32(struct.myid);
      }
      if (struct.isSetStudentNumber()) {
        oprot.writeString(struct.studentNumber);
      }
      if (struct.isSetLoginName()) {
        oprot.writeString(struct.loginName);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCountry()) {
        oprot.writeString(struct.country);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetSchool()) {
        oprot.writeString(struct.school);
      }
      if (struct.isSetSignature()) {
        oprot.writeString(struct.signature);
      }
      if (struct.isSetProfile()) {
        oprot.writeString(struct.profile);
      }
      if (struct.isSetAvatarUrl()) {
        oprot.writeString(struct.avatarUrl);
      }
      if (struct.isSetCreateAt()) {
        oprot.writeString(struct.createAt);
      }
      if (struct.isSetUpdateAt()) {
        oprot.writeString(struct.updateAt);
      }
      if (struct.isSetUserLevel()) {
        oprot.writeI32(struct.userLevel);
      }
      if (struct.isSetActive()) {
        oprot.writeBool(struct.active);
      }
      if (struct.isSetOrg_id()) {
        oprot.writeI32(struct.org_id);
      }
      if (struct.isSetAccess_token()) {
        oprot.writeString(struct.access_token);
      }
      if (struct.isSetMyrole()) {
        oprot.writeI32(struct.myrole.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TStudent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.myid = iprot.readI32();
        struct.setMyidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.studentNumber = iprot.readString();
        struct.setStudentNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.loginName = iprot.readString();
        struct.setLoginNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(4)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(6)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.country = iprot.readString();
        struct.setCountryIsSet(true);
      }
      if (incoming.get(8)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(10)) {
        struct.school = iprot.readString();
        struct.setSchoolIsSet(true);
      }
      if (incoming.get(11)) {
        struct.signature = iprot.readString();
        struct.setSignatureIsSet(true);
      }
      if (incoming.get(12)) {
        struct.profile = iprot.readString();
        struct.setProfileIsSet(true);
      }
      if (incoming.get(13)) {
        struct.avatarUrl = iprot.readString();
        struct.setAvatarUrlIsSet(true);
      }
      if (incoming.get(14)) {
        struct.createAt = iprot.readString();
        struct.setCreateAtIsSet(true);
      }
      if (incoming.get(15)) {
        struct.updateAt = iprot.readString();
        struct.setUpdateAtIsSet(true);
      }
      if (incoming.get(16)) {
        struct.userLevel = iprot.readI32();
        struct.setUserLevelIsSet(true);
      }
      if (incoming.get(17)) {
        struct.active = iprot.readBool();
        struct.setActiveIsSet(true);
      }
      if (incoming.get(18)) {
        struct.org_id = iprot.readI32();
        struct.setOrg_idIsSet(true);
      }
      if (incoming.get(19)) {
        struct.access_token = iprot.readString();
        struct.setAccess_tokenIsSet(true);
      }
      if (incoming.get(20)) {
        struct.myrole = TUSerRole.findByValue(iprot.readI32());
        struct.setMyroleIsSet(true);
      }
    }
  }

}

