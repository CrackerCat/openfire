/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.plaso.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TExercise implements org.apache.thrift.TBase<TExercise, TExercise._Fields>, java.io.Serializable, Cloneable, Comparable<TExercise> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExercise");

  private static final org.apache.thrift.protocol.TField MYID_FIELD_DESC = new org.apache.thrift.protocol.TField("myid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("typeId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField E_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("eHead", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField E_OPITON_FIELD_DESC = new org.apache.thrift.protocol.TField("eOpiton", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField E_ANSWER_FIELD_DESC = new org.apache.thrift.protocol.TField("eAnswer", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField E_COMMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("eComments", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField E_KNOWLEDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("eKnowledge", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField E_KEYWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("eKeyword", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField E_DIFFICULTY_FIELD_DESC = new org.apache.thrift.protocol.TField("eDifficulty", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField E_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("eFrom", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField E_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("eParams", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CREATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createAt", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField UPDATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateAt", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("active", org.apache.thrift.protocol.TType.BOOL, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TExerciseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TExerciseTupleSchemeFactory());
  }

  public int myid; // required
  public int orgId; // required
  public int typeId; // required
  public String eHead; // required
  public String eOpiton; // required
  public String eAnswer; // required
  public String eComments; // required
  public List<Integer> eKnowledge; // required
  public String eKeyword; // required
  public int eDifficulty; // required
  public String eFrom; // required
  public String eParams; // required
  public String createAt; // required
  public String updateAt; // required
  public boolean active; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MYID((short)1, "myid"),
    ORG_ID((short)2, "orgId"),
    TYPE_ID((short)3, "typeId"),
    E_HEAD((short)4, "eHead"),
    E_OPITON((short)5, "eOpiton"),
    E_ANSWER((short)6, "eAnswer"),
    E_COMMENTS((short)7, "eComments"),
    E_KNOWLEDGE((short)8, "eKnowledge"),
    E_KEYWORD((short)9, "eKeyword"),
    E_DIFFICULTY((short)10, "eDifficulty"),
    E_FROM((short)11, "eFrom"),
    E_PARAMS((short)12, "eParams"),
    CREATE_AT((short)13, "createAt"),
    UPDATE_AT((short)14, "updateAt"),
    ACTIVE((short)15, "active");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MYID
          return MYID;
        case 2: // ORG_ID
          return ORG_ID;
        case 3: // TYPE_ID
          return TYPE_ID;
        case 4: // E_HEAD
          return E_HEAD;
        case 5: // E_OPITON
          return E_OPITON;
        case 6: // E_ANSWER
          return E_ANSWER;
        case 7: // E_COMMENTS
          return E_COMMENTS;
        case 8: // E_KNOWLEDGE
          return E_KNOWLEDGE;
        case 9: // E_KEYWORD
          return E_KEYWORD;
        case 10: // E_DIFFICULTY
          return E_DIFFICULTY;
        case 11: // E_FROM
          return E_FROM;
        case 12: // E_PARAMS
          return E_PARAMS;
        case 13: // CREATE_AT
          return CREATE_AT;
        case 14: // UPDATE_AT
          return UPDATE_AT;
        case 15: // ACTIVE
          return ACTIVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MYID_ISSET_ID = 0;
  private static final int __ORGID_ISSET_ID = 1;
  private static final int __TYPEID_ISSET_ID = 2;
  private static final int __EDIFFICULTY_ISSET_ID = 3;
  private static final int __ACTIVE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MYID, new org.apache.thrift.meta_data.FieldMetaData("myid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("typeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.E_HEAD, new org.apache.thrift.meta_data.FieldMetaData("eHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.E_OPITON, new org.apache.thrift.meta_data.FieldMetaData("eOpiton", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.E_ANSWER, new org.apache.thrift.meta_data.FieldMetaData("eAnswer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.E_COMMENTS, new org.apache.thrift.meta_data.FieldMetaData("eComments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.E_KNOWLEDGE, new org.apache.thrift.meta_data.FieldMetaData("eKnowledge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.E_KEYWORD, new org.apache.thrift.meta_data.FieldMetaData("eKeyword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.E_DIFFICULTY, new org.apache.thrift.meta_data.FieldMetaData("eDifficulty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.E_FROM, new org.apache.thrift.meta_data.FieldMetaData("eFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.E_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("eParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_AT, new org.apache.thrift.meta_data.FieldMetaData("createAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_AT, new org.apache.thrift.meta_data.FieldMetaData("updateAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("active", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExercise.class, metaDataMap);
  }

  public TExercise() {
  }

  public TExercise(
    int myid,
    int orgId,
    int typeId,
    String eHead,
    String eOpiton,
    String eAnswer,
    String eComments,
    List<Integer> eKnowledge,
    String eKeyword,
    int eDifficulty,
    String eFrom,
    String eParams,
    String createAt,
    String updateAt,
    boolean active)
  {
    this();
    this.myid = myid;
    setMyidIsSet(true);
    this.orgId = orgId;
    setOrgIdIsSet(true);
    this.typeId = typeId;
    setTypeIdIsSet(true);
    this.eHead = eHead;
    this.eOpiton = eOpiton;
    this.eAnswer = eAnswer;
    this.eComments = eComments;
    this.eKnowledge = eKnowledge;
    this.eKeyword = eKeyword;
    this.eDifficulty = eDifficulty;
    setEDifficultyIsSet(true);
    this.eFrom = eFrom;
    this.eParams = eParams;
    this.createAt = createAt;
    this.updateAt = updateAt;
    this.active = active;
    setActiveIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExercise(TExercise other) {
    __isset_bitfield = other.__isset_bitfield;
    this.myid = other.myid;
    this.orgId = other.orgId;
    this.typeId = other.typeId;
    if (other.isSetEHead()) {
      this.eHead = other.eHead;
    }
    if (other.isSetEOpiton()) {
      this.eOpiton = other.eOpiton;
    }
    if (other.isSetEAnswer()) {
      this.eAnswer = other.eAnswer;
    }
    if (other.isSetEComments()) {
      this.eComments = other.eComments;
    }
    if (other.isSetEKnowledge()) {
      List<Integer> __this__eKnowledge = new ArrayList<Integer>(other.eKnowledge);
      this.eKnowledge = __this__eKnowledge;
    }
    if (other.isSetEKeyword()) {
      this.eKeyword = other.eKeyword;
    }
    this.eDifficulty = other.eDifficulty;
    if (other.isSetEFrom()) {
      this.eFrom = other.eFrom;
    }
    if (other.isSetEParams()) {
      this.eParams = other.eParams;
    }
    if (other.isSetCreateAt()) {
      this.createAt = other.createAt;
    }
    if (other.isSetUpdateAt()) {
      this.updateAt = other.updateAt;
    }
    this.active = other.active;
  }

  public TExercise deepCopy() {
    return new TExercise(this);
  }

  @Override
  public void clear() {
    setMyidIsSet(false);
    this.myid = 0;
    setOrgIdIsSet(false);
    this.orgId = 0;
    setTypeIdIsSet(false);
    this.typeId = 0;
    this.eHead = null;
    this.eOpiton = null;
    this.eAnswer = null;
    this.eComments = null;
    this.eKnowledge = null;
    this.eKeyword = null;
    setEDifficultyIsSet(false);
    this.eDifficulty = 0;
    this.eFrom = null;
    this.eParams = null;
    this.createAt = null;
    this.updateAt = null;
    setActiveIsSet(false);
    this.active = false;
  }

  public int getMyid() {
    return this.myid;
  }

  public TExercise setMyid(int myid) {
    this.myid = myid;
    setMyidIsSet(true);
    return this;
  }

  public void unsetMyid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYID_ISSET_ID);
  }

  /** Returns true if field myid is set (has been assigned a value) and false otherwise */
  public boolean isSetMyid() {
    return EncodingUtils.testBit(__isset_bitfield, __MYID_ISSET_ID);
  }

  public void setMyidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYID_ISSET_ID, value);
  }

  public int getOrgId() {
    return this.orgId;
  }

  public TExercise setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGID_ISSET_ID, value);
  }

  public int getTypeId() {
    return this.typeId;
  }

  public TExercise setTypeId(int typeId) {
    this.typeId = typeId;
    setTypeIdIsSet(true);
    return this;
  }

  public void unsetTypeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPEID_ISSET_ID);
  }

  /** Returns true if field typeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTypeId() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPEID_ISSET_ID);
  }

  public void setTypeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPEID_ISSET_ID, value);
  }

  public String getEHead() {
    return this.eHead;
  }

  public TExercise setEHead(String eHead) {
    this.eHead = eHead;
    return this;
  }

  public void unsetEHead() {
    this.eHead = null;
  }

  /** Returns true if field eHead is set (has been assigned a value) and false otherwise */
  public boolean isSetEHead() {
    return this.eHead != null;
  }

  public void setEHeadIsSet(boolean value) {
    if (!value) {
      this.eHead = null;
    }
  }

  public String getEOpiton() {
    return this.eOpiton;
  }

  public TExercise setEOpiton(String eOpiton) {
    this.eOpiton = eOpiton;
    return this;
  }

  public void unsetEOpiton() {
    this.eOpiton = null;
  }

  /** Returns true if field eOpiton is set (has been assigned a value) and false otherwise */
  public boolean isSetEOpiton() {
    return this.eOpiton != null;
  }

  public void setEOpitonIsSet(boolean value) {
    if (!value) {
      this.eOpiton = null;
    }
  }

  public String getEAnswer() {
    return this.eAnswer;
  }

  public TExercise setEAnswer(String eAnswer) {
    this.eAnswer = eAnswer;
    return this;
  }

  public void unsetEAnswer() {
    this.eAnswer = null;
  }

  /** Returns true if field eAnswer is set (has been assigned a value) and false otherwise */
  public boolean isSetEAnswer() {
    return this.eAnswer != null;
  }

  public void setEAnswerIsSet(boolean value) {
    if (!value) {
      this.eAnswer = null;
    }
  }

  public String getEComments() {
    return this.eComments;
  }

  public TExercise setEComments(String eComments) {
    this.eComments = eComments;
    return this;
  }

  public void unsetEComments() {
    this.eComments = null;
  }

  /** Returns true if field eComments is set (has been assigned a value) and false otherwise */
  public boolean isSetEComments() {
    return this.eComments != null;
  }

  public void setECommentsIsSet(boolean value) {
    if (!value) {
      this.eComments = null;
    }
  }

  public int getEKnowledgeSize() {
    return (this.eKnowledge == null) ? 0 : this.eKnowledge.size();
  }

  public java.util.Iterator<Integer> getEKnowledgeIterator() {
    return (this.eKnowledge == null) ? null : this.eKnowledge.iterator();
  }

  public void addToEKnowledge(int elem) {
    if (this.eKnowledge == null) {
      this.eKnowledge = new ArrayList<Integer>();
    }
    this.eKnowledge.add(elem);
  }

  public List<Integer> getEKnowledge() {
    return this.eKnowledge;
  }

  public TExercise setEKnowledge(List<Integer> eKnowledge) {
    this.eKnowledge = eKnowledge;
    return this;
  }

  public void unsetEKnowledge() {
    this.eKnowledge = null;
  }

  /** Returns true if field eKnowledge is set (has been assigned a value) and false otherwise */
  public boolean isSetEKnowledge() {
    return this.eKnowledge != null;
  }

  public void setEKnowledgeIsSet(boolean value) {
    if (!value) {
      this.eKnowledge = null;
    }
  }

  public String getEKeyword() {
    return this.eKeyword;
  }

  public TExercise setEKeyword(String eKeyword) {
    this.eKeyword = eKeyword;
    return this;
  }

  public void unsetEKeyword() {
    this.eKeyword = null;
  }

  /** Returns true if field eKeyword is set (has been assigned a value) and false otherwise */
  public boolean isSetEKeyword() {
    return this.eKeyword != null;
  }

  public void setEKeywordIsSet(boolean value) {
    if (!value) {
      this.eKeyword = null;
    }
  }

  public int getEDifficulty() {
    return this.eDifficulty;
  }

  public TExercise setEDifficulty(int eDifficulty) {
    this.eDifficulty = eDifficulty;
    setEDifficultyIsSet(true);
    return this;
  }

  public void unsetEDifficulty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EDIFFICULTY_ISSET_ID);
  }

  /** Returns true if field eDifficulty is set (has been assigned a value) and false otherwise */
  public boolean isSetEDifficulty() {
    return EncodingUtils.testBit(__isset_bitfield, __EDIFFICULTY_ISSET_ID);
  }

  public void setEDifficultyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EDIFFICULTY_ISSET_ID, value);
  }

  public String getEFrom() {
    return this.eFrom;
  }

  public TExercise setEFrom(String eFrom) {
    this.eFrom = eFrom;
    return this;
  }

  public void unsetEFrom() {
    this.eFrom = null;
  }

  /** Returns true if field eFrom is set (has been assigned a value) and false otherwise */
  public boolean isSetEFrom() {
    return this.eFrom != null;
  }

  public void setEFromIsSet(boolean value) {
    if (!value) {
      this.eFrom = null;
    }
  }

  public String getEParams() {
    return this.eParams;
  }

  public TExercise setEParams(String eParams) {
    this.eParams = eParams;
    return this;
  }

  public void unsetEParams() {
    this.eParams = null;
  }

  /** Returns true if field eParams is set (has been assigned a value) and false otherwise */
  public boolean isSetEParams() {
    return this.eParams != null;
  }

  public void setEParamsIsSet(boolean value) {
    if (!value) {
      this.eParams = null;
    }
  }

  public String getCreateAt() {
    return this.createAt;
  }

  public TExercise setCreateAt(String createAt) {
    this.createAt = createAt;
    return this;
  }

  public void unsetCreateAt() {
    this.createAt = null;
  }

  /** Returns true if field createAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateAt() {
    return this.createAt != null;
  }

  public void setCreateAtIsSet(boolean value) {
    if (!value) {
      this.createAt = null;
    }
  }

  public String getUpdateAt() {
    return this.updateAt;
  }

  public TExercise setUpdateAt(String updateAt) {
    this.updateAt = updateAt;
    return this;
  }

  public void unsetUpdateAt() {
    this.updateAt = null;
  }

  /** Returns true if field updateAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateAt() {
    return this.updateAt != null;
  }

  public void setUpdateAtIsSet(boolean value) {
    if (!value) {
      this.updateAt = null;
    }
  }

  public boolean isActive() {
    return this.active;
  }

  public TExercise setActive(boolean active) {
    this.active = active;
    setActiveIsSet(true);
    return this;
  }

  public void unsetActive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  /** Returns true if field active is set (has been assigned a value) and false otherwise */
  public boolean isSetActive() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  public void setActiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MYID:
      if (value == null) {
        unsetMyid();
      } else {
        setMyid((Integer)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((Integer)value);
      }
      break;

    case TYPE_ID:
      if (value == null) {
        unsetTypeId();
      } else {
        setTypeId((Integer)value);
      }
      break;

    case E_HEAD:
      if (value == null) {
        unsetEHead();
      } else {
        setEHead((String)value);
      }
      break;

    case E_OPITON:
      if (value == null) {
        unsetEOpiton();
      } else {
        setEOpiton((String)value);
      }
      break;

    case E_ANSWER:
      if (value == null) {
        unsetEAnswer();
      } else {
        setEAnswer((String)value);
      }
      break;

    case E_COMMENTS:
      if (value == null) {
        unsetEComments();
      } else {
        setEComments((String)value);
      }
      break;

    case E_KNOWLEDGE:
      if (value == null) {
        unsetEKnowledge();
      } else {
        setEKnowledge((List<Integer>)value);
      }
      break;

    case E_KEYWORD:
      if (value == null) {
        unsetEKeyword();
      } else {
        setEKeyword((String)value);
      }
      break;

    case E_DIFFICULTY:
      if (value == null) {
        unsetEDifficulty();
      } else {
        setEDifficulty((Integer)value);
      }
      break;

    case E_FROM:
      if (value == null) {
        unsetEFrom();
      } else {
        setEFrom((String)value);
      }
      break;

    case E_PARAMS:
      if (value == null) {
        unsetEParams();
      } else {
        setEParams((String)value);
      }
      break;

    case CREATE_AT:
      if (value == null) {
        unsetCreateAt();
      } else {
        setCreateAt((String)value);
      }
      break;

    case UPDATE_AT:
      if (value == null) {
        unsetUpdateAt();
      } else {
        setUpdateAt((String)value);
      }
      break;

    case ACTIVE:
      if (value == null) {
        unsetActive();
      } else {
        setActive((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MYID:
      return Integer.valueOf(getMyid());

    case ORG_ID:
      return Integer.valueOf(getOrgId());

    case TYPE_ID:
      return Integer.valueOf(getTypeId());

    case E_HEAD:
      return getEHead();

    case E_OPITON:
      return getEOpiton();

    case E_ANSWER:
      return getEAnswer();

    case E_COMMENTS:
      return getEComments();

    case E_KNOWLEDGE:
      return getEKnowledge();

    case E_KEYWORD:
      return getEKeyword();

    case E_DIFFICULTY:
      return Integer.valueOf(getEDifficulty());

    case E_FROM:
      return getEFrom();

    case E_PARAMS:
      return getEParams();

    case CREATE_AT:
      return getCreateAt();

    case UPDATE_AT:
      return getUpdateAt();

    case ACTIVE:
      return Boolean.valueOf(isActive());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MYID:
      return isSetMyid();
    case ORG_ID:
      return isSetOrgId();
    case TYPE_ID:
      return isSetTypeId();
    case E_HEAD:
      return isSetEHead();
    case E_OPITON:
      return isSetEOpiton();
    case E_ANSWER:
      return isSetEAnswer();
    case E_COMMENTS:
      return isSetEComments();
    case E_KNOWLEDGE:
      return isSetEKnowledge();
    case E_KEYWORD:
      return isSetEKeyword();
    case E_DIFFICULTY:
      return isSetEDifficulty();
    case E_FROM:
      return isSetEFrom();
    case E_PARAMS:
      return isSetEParams();
    case CREATE_AT:
      return isSetCreateAt();
    case UPDATE_AT:
      return isSetUpdateAt();
    case ACTIVE:
      return isSetActive();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TExercise)
      return this.equals((TExercise)that);
    return false;
  }

  public boolean equals(TExercise that) {
    if (that == null)
      return false;

    boolean this_present_myid = true;
    boolean that_present_myid = true;
    if (this_present_myid || that_present_myid) {
      if (!(this_present_myid && that_present_myid))
        return false;
      if (this.myid != that.myid)
        return false;
    }

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    boolean this_present_typeId = true;
    boolean that_present_typeId = true;
    if (this_present_typeId || that_present_typeId) {
      if (!(this_present_typeId && that_present_typeId))
        return false;
      if (this.typeId != that.typeId)
        return false;
    }

    boolean this_present_eHead = true && this.isSetEHead();
    boolean that_present_eHead = true && that.isSetEHead();
    if (this_present_eHead || that_present_eHead) {
      if (!(this_present_eHead && that_present_eHead))
        return false;
      if (!this.eHead.equals(that.eHead))
        return false;
    }

    boolean this_present_eOpiton = true && this.isSetEOpiton();
    boolean that_present_eOpiton = true && that.isSetEOpiton();
    if (this_present_eOpiton || that_present_eOpiton) {
      if (!(this_present_eOpiton && that_present_eOpiton))
        return false;
      if (!this.eOpiton.equals(that.eOpiton))
        return false;
    }

    boolean this_present_eAnswer = true && this.isSetEAnswer();
    boolean that_present_eAnswer = true && that.isSetEAnswer();
    if (this_present_eAnswer || that_present_eAnswer) {
      if (!(this_present_eAnswer && that_present_eAnswer))
        return false;
      if (!this.eAnswer.equals(that.eAnswer))
        return false;
    }

    boolean this_present_eComments = true && this.isSetEComments();
    boolean that_present_eComments = true && that.isSetEComments();
    if (this_present_eComments || that_present_eComments) {
      if (!(this_present_eComments && that_present_eComments))
        return false;
      if (!this.eComments.equals(that.eComments))
        return false;
    }

    boolean this_present_eKnowledge = true && this.isSetEKnowledge();
    boolean that_present_eKnowledge = true && that.isSetEKnowledge();
    if (this_present_eKnowledge || that_present_eKnowledge) {
      if (!(this_present_eKnowledge && that_present_eKnowledge))
        return false;
      if (!this.eKnowledge.equals(that.eKnowledge))
        return false;
    }

    boolean this_present_eKeyword = true && this.isSetEKeyword();
    boolean that_present_eKeyword = true && that.isSetEKeyword();
    if (this_present_eKeyword || that_present_eKeyword) {
      if (!(this_present_eKeyword && that_present_eKeyword))
        return false;
      if (!this.eKeyword.equals(that.eKeyword))
        return false;
    }

    boolean this_present_eDifficulty = true;
    boolean that_present_eDifficulty = true;
    if (this_present_eDifficulty || that_present_eDifficulty) {
      if (!(this_present_eDifficulty && that_present_eDifficulty))
        return false;
      if (this.eDifficulty != that.eDifficulty)
        return false;
    }

    boolean this_present_eFrom = true && this.isSetEFrom();
    boolean that_present_eFrom = true && that.isSetEFrom();
    if (this_present_eFrom || that_present_eFrom) {
      if (!(this_present_eFrom && that_present_eFrom))
        return false;
      if (!this.eFrom.equals(that.eFrom))
        return false;
    }

    boolean this_present_eParams = true && this.isSetEParams();
    boolean that_present_eParams = true && that.isSetEParams();
    if (this_present_eParams || that_present_eParams) {
      if (!(this_present_eParams && that_present_eParams))
        return false;
      if (!this.eParams.equals(that.eParams))
        return false;
    }

    boolean this_present_createAt = true && this.isSetCreateAt();
    boolean that_present_createAt = true && that.isSetCreateAt();
    if (this_present_createAt || that_present_createAt) {
      if (!(this_present_createAt && that_present_createAt))
        return false;
      if (!this.createAt.equals(that.createAt))
        return false;
    }

    boolean this_present_updateAt = true && this.isSetUpdateAt();
    boolean that_present_updateAt = true && that.isSetUpdateAt();
    if (this_present_updateAt || that_present_updateAt) {
      if (!(this_present_updateAt && that_present_updateAt))
        return false;
      if (!this.updateAt.equals(that.updateAt))
        return false;
    }

    boolean this_present_active = true;
    boolean that_present_active = true;
    if (this_present_active || that_present_active) {
      if (!(this_present_active && that_present_active))
        return false;
      if (this.active != that.active)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TExercise other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMyid()).compareTo(other.isSetMyid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myid, other.myid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTypeId()).compareTo(other.isSetTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeId, other.typeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEHead()).compareTo(other.isSetEHead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEHead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eHead, other.eHead);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEOpiton()).compareTo(other.isSetEOpiton());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEOpiton()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eOpiton, other.eOpiton);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEAnswer()).compareTo(other.isSetEAnswer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEAnswer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eAnswer, other.eAnswer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEComments()).compareTo(other.isSetEComments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEComments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eComments, other.eComments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEKnowledge()).compareTo(other.isSetEKnowledge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEKnowledge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eKnowledge, other.eKnowledge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEKeyword()).compareTo(other.isSetEKeyword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEKeyword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eKeyword, other.eKeyword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEDifficulty()).compareTo(other.isSetEDifficulty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEDifficulty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eDifficulty, other.eDifficulty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEFrom()).compareTo(other.isSetEFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eFrom, other.eFrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEParams()).compareTo(other.isSetEParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eParams, other.eParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateAt()).compareTo(other.isSetCreateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createAt, other.createAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateAt()).compareTo(other.isSetUpdateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateAt, other.updateAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActive()).compareTo(other.isSetActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.active, other.active);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TExercise(");
    boolean first = true;

    sb.append("myid:");
    sb.append(this.myid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("typeId:");
    sb.append(this.typeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eHead:");
    if (this.eHead == null) {
      sb.append("null");
    } else {
      sb.append(this.eHead);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eOpiton:");
    if (this.eOpiton == null) {
      sb.append("null");
    } else {
      sb.append(this.eOpiton);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eAnswer:");
    if (this.eAnswer == null) {
      sb.append("null");
    } else {
      sb.append(this.eAnswer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eComments:");
    if (this.eComments == null) {
      sb.append("null");
    } else {
      sb.append(this.eComments);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eKnowledge:");
    if (this.eKnowledge == null) {
      sb.append("null");
    } else {
      sb.append(this.eKnowledge);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eKeyword:");
    if (this.eKeyword == null) {
      sb.append("null");
    } else {
      sb.append(this.eKeyword);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eDifficulty:");
    sb.append(this.eDifficulty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eFrom:");
    if (this.eFrom == null) {
      sb.append("null");
    } else {
      sb.append(this.eFrom);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eParams:");
    if (this.eParams == null) {
      sb.append("null");
    } else {
      sb.append(this.eParams);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createAt:");
    if (this.createAt == null) {
      sb.append("null");
    } else {
      sb.append(this.createAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateAt:");
    if (this.updateAt == null) {
      sb.append("null");
    } else {
      sb.append(this.updateAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("active:");
    sb.append(this.active);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExerciseStandardSchemeFactory implements SchemeFactory {
    public TExerciseStandardScheme getScheme() {
      return new TExerciseStandardScheme();
    }
  }

  private static class TExerciseStandardScheme extends StandardScheme<TExercise> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TExercise struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MYID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.myid = iprot.readI32();
              struct.setMyidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.typeId = iprot.readI32();
              struct.setTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // E_HEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eHead = iprot.readString();
              struct.setEHeadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // E_OPITON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eOpiton = iprot.readString();
              struct.setEOpitonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // E_ANSWER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eAnswer = iprot.readString();
              struct.setEAnswerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // E_COMMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eComments = iprot.readString();
              struct.setECommentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // E_KNOWLEDGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.eKnowledge = new ArrayList<Integer>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  int _elem42;
                  _elem42 = iprot.readI32();
                  struct.eKnowledge.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setEKnowledgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // E_KEYWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eKeyword = iprot.readString();
              struct.setEKeywordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // E_DIFFICULTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eDifficulty = iprot.readI32();
              struct.setEDifficultyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // E_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eFrom = iprot.readString();
              struct.setEFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // E_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eParams = iprot.readString();
              struct.setEParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CREATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createAt = iprot.readString();
              struct.setCreateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UPDATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateAt = iprot.readString();
              struct.setUpdateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.active = iprot.readBool();
              struct.setActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TExercise struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MYID_FIELD_DESC);
      oprot.writeI32(struct.myid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_ID_FIELD_DESC);
      oprot.writeI32(struct.typeId);
      oprot.writeFieldEnd();
      if (struct.eHead != null) {
        oprot.writeFieldBegin(E_HEAD_FIELD_DESC);
        oprot.writeString(struct.eHead);
        oprot.writeFieldEnd();
      }
      if (struct.eOpiton != null) {
        oprot.writeFieldBegin(E_OPITON_FIELD_DESC);
        oprot.writeString(struct.eOpiton);
        oprot.writeFieldEnd();
      }
      if (struct.eAnswer != null) {
        oprot.writeFieldBegin(E_ANSWER_FIELD_DESC);
        oprot.writeString(struct.eAnswer);
        oprot.writeFieldEnd();
      }
      if (struct.eComments != null) {
        oprot.writeFieldBegin(E_COMMENTS_FIELD_DESC);
        oprot.writeString(struct.eComments);
        oprot.writeFieldEnd();
      }
      if (struct.eKnowledge != null) {
        oprot.writeFieldBegin(E_KNOWLEDGE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.eKnowledge.size()));
          for (int _iter43 : struct.eKnowledge)
          {
            oprot.writeI32(_iter43);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.eKeyword != null) {
        oprot.writeFieldBegin(E_KEYWORD_FIELD_DESC);
        oprot.writeString(struct.eKeyword);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(E_DIFFICULTY_FIELD_DESC);
      oprot.writeI32(struct.eDifficulty);
      oprot.writeFieldEnd();
      if (struct.eFrom != null) {
        oprot.writeFieldBegin(E_FROM_FIELD_DESC);
        oprot.writeString(struct.eFrom);
        oprot.writeFieldEnd();
      }
      if (struct.eParams != null) {
        oprot.writeFieldBegin(E_PARAMS_FIELD_DESC);
        oprot.writeString(struct.eParams);
        oprot.writeFieldEnd();
      }
      if (struct.createAt != null) {
        oprot.writeFieldBegin(CREATE_AT_FIELD_DESC);
        oprot.writeString(struct.createAt);
        oprot.writeFieldEnd();
      }
      if (struct.updateAt != null) {
        oprot.writeFieldBegin(UPDATE_AT_FIELD_DESC);
        oprot.writeString(struct.updateAt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACTIVE_FIELD_DESC);
      oprot.writeBool(struct.active);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExerciseTupleSchemeFactory implements SchemeFactory {
    public TExerciseTupleScheme getScheme() {
      return new TExerciseTupleScheme();
    }
  }

  private static class TExerciseTupleScheme extends TupleScheme<TExercise> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExercise struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMyid()) {
        optionals.set(0);
      }
      if (struct.isSetOrgId()) {
        optionals.set(1);
      }
      if (struct.isSetTypeId()) {
        optionals.set(2);
      }
      if (struct.isSetEHead()) {
        optionals.set(3);
      }
      if (struct.isSetEOpiton()) {
        optionals.set(4);
      }
      if (struct.isSetEAnswer()) {
        optionals.set(5);
      }
      if (struct.isSetEComments()) {
        optionals.set(6);
      }
      if (struct.isSetEKnowledge()) {
        optionals.set(7);
      }
      if (struct.isSetEKeyword()) {
        optionals.set(8);
      }
      if (struct.isSetEDifficulty()) {
        optionals.set(9);
      }
      if (struct.isSetEFrom()) {
        optionals.set(10);
      }
      if (struct.isSetEParams()) {
        optionals.set(11);
      }
      if (struct.isSetCreateAt()) {
        optionals.set(12);
      }
      if (struct.isSetUpdateAt()) {
        optionals.set(13);
      }
      if (struct.isSetActive()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetMyid()) {
        oprot.writeI32(struct.myid);
      }
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
      if (struct.isSetTypeId()) {
        oprot.writeI32(struct.typeId);
      }
      if (struct.isSetEHead()) {
        oprot.writeString(struct.eHead);
      }
      if (struct.isSetEOpiton()) {
        oprot.writeString(struct.eOpiton);
      }
      if (struct.isSetEAnswer()) {
        oprot.writeString(struct.eAnswer);
      }
      if (struct.isSetEComments()) {
        oprot.writeString(struct.eComments);
      }
      if (struct.isSetEKnowledge()) {
        {
          oprot.writeI32(struct.eKnowledge.size());
          for (int _iter44 : struct.eKnowledge)
          {
            oprot.writeI32(_iter44);
          }
        }
      }
      if (struct.isSetEKeyword()) {
        oprot.writeString(struct.eKeyword);
      }
      if (struct.isSetEDifficulty()) {
        oprot.writeI32(struct.eDifficulty);
      }
      if (struct.isSetEFrom()) {
        oprot.writeString(struct.eFrom);
      }
      if (struct.isSetEParams()) {
        oprot.writeString(struct.eParams);
      }
      if (struct.isSetCreateAt()) {
        oprot.writeString(struct.createAt);
      }
      if (struct.isSetUpdateAt()) {
        oprot.writeString(struct.updateAt);
      }
      if (struct.isSetActive()) {
        oprot.writeBool(struct.active);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExercise struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.myid = iprot.readI32();
        struct.setMyidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.typeId = iprot.readI32();
        struct.setTypeIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.eHead = iprot.readString();
        struct.setEHeadIsSet(true);
      }
      if (incoming.get(4)) {
        struct.eOpiton = iprot.readString();
        struct.setEOpitonIsSet(true);
      }
      if (incoming.get(5)) {
        struct.eAnswer = iprot.readString();
        struct.setEAnswerIsSet(true);
      }
      if (incoming.get(6)) {
        struct.eComments = iprot.readString();
        struct.setECommentsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.eKnowledge = new ArrayList<Integer>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            int _elem47;
            _elem47 = iprot.readI32();
            struct.eKnowledge.add(_elem47);
          }
        }
        struct.setEKnowledgeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.eKeyword = iprot.readString();
        struct.setEKeywordIsSet(true);
      }
      if (incoming.get(9)) {
        struct.eDifficulty = iprot.readI32();
        struct.setEDifficultyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.eFrom = iprot.readString();
        struct.setEFromIsSet(true);
      }
      if (incoming.get(11)) {
        struct.eParams = iprot.readString();
        struct.setEParamsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.createAt = iprot.readString();
        struct.setCreateAtIsSet(true);
      }
      if (incoming.get(13)) {
        struct.updateAt = iprot.readString();
        struct.setUpdateAtIsSet(true);
      }
      if (incoming.get(14)) {
        struct.active = iprot.readBool();
        struct.setActiveIsSet(true);
      }
    }
  }

}

