/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.plaso.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TQAThread implements org.apache.thrift.TBase<TQAThread, TQAThread._Fields>, java.io.Serializable, Cloneable, Comparable<TQAThread> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQAThread");

  private static final org.apache.thrift.protocol.TField MYID_FIELD_DESC = new org.apache.thrift.protocol.TField("myid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField THREAD_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("threadCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STUDENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("studentId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STUDENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("studentName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TEACHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TEACHER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField KNOWLEDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("knowledge", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createAt", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateAt", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField STUDENT_AVATAR_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("studentAvatarUrl", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TEACHER_AVATAR_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherAvatarUrl", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField STUDENT_OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("studentObj", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField TEACHER_OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherObj", org.apache.thrift.protocol.TType.STRUCT, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TQAThreadStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TQAThreadTupleSchemeFactory());
  }

  public int myid; // required
  public String threadCode; // required
  public int studentId; // required
  public String studentName; // required
  public int teacherId; // required
  public String teacherName; // required
  public String topic; // required
  public List<TKnowledge> knowledge; // required
  public String createAt; // required
  public String updateAt; // required
  public String studentAvatarUrl; // required
  public String teacherAvatarUrl; // required
  public TStudent studentObj; // required
  public TTeacher teacherObj; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MYID((short)1, "myid"),
    THREAD_CODE((short)2, "threadCode"),
    STUDENT_ID((short)3, "studentId"),
    STUDENT_NAME((short)4, "studentName"),
    TEACHER_ID((short)5, "teacherId"),
    TEACHER_NAME((short)6, "teacherName"),
    TOPIC((short)7, "topic"),
    KNOWLEDGE((short)8, "knowledge"),
    CREATE_AT((short)9, "createAt"),
    UPDATE_AT((short)10, "updateAt"),
    STUDENT_AVATAR_URL((short)11, "studentAvatarUrl"),
    TEACHER_AVATAR_URL((short)12, "teacherAvatarUrl"),
    STUDENT_OBJ((short)13, "studentObj"),
    TEACHER_OBJ((short)14, "teacherObj");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MYID
          return MYID;
        case 2: // THREAD_CODE
          return THREAD_CODE;
        case 3: // STUDENT_ID
          return STUDENT_ID;
        case 4: // STUDENT_NAME
          return STUDENT_NAME;
        case 5: // TEACHER_ID
          return TEACHER_ID;
        case 6: // TEACHER_NAME
          return TEACHER_NAME;
        case 7: // TOPIC
          return TOPIC;
        case 8: // KNOWLEDGE
          return KNOWLEDGE;
        case 9: // CREATE_AT
          return CREATE_AT;
        case 10: // UPDATE_AT
          return UPDATE_AT;
        case 11: // STUDENT_AVATAR_URL
          return STUDENT_AVATAR_URL;
        case 12: // TEACHER_AVATAR_URL
          return TEACHER_AVATAR_URL;
        case 13: // STUDENT_OBJ
          return STUDENT_OBJ;
        case 14: // TEACHER_OBJ
          return TEACHER_OBJ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MYID_ISSET_ID = 0;
  private static final int __STUDENTID_ISSET_ID = 1;
  private static final int __TEACHERID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MYID, new org.apache.thrift.meta_data.FieldMetaData("myid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THREAD_CODE, new org.apache.thrift.meta_data.FieldMetaData("threadCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STUDENT_ID, new org.apache.thrift.meta_data.FieldMetaData("studentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STUDENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("studentName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEACHER_ID, new org.apache.thrift.meta_data.FieldMetaData("teacherId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEACHER_NAME, new org.apache.thrift.meta_data.FieldMetaData("teacherName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KNOWLEDGE, new org.apache.thrift.meta_data.FieldMetaData("knowledge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TKnowledge.class))));
    tmpMap.put(_Fields.CREATE_AT, new org.apache.thrift.meta_data.FieldMetaData("createAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_AT, new org.apache.thrift.meta_data.FieldMetaData("updateAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STUDENT_AVATAR_URL, new org.apache.thrift.meta_data.FieldMetaData("studentAvatarUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEACHER_AVATAR_URL, new org.apache.thrift.meta_data.FieldMetaData("teacherAvatarUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STUDENT_OBJ, new org.apache.thrift.meta_data.FieldMetaData("studentObj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStudent.class)));
    tmpMap.put(_Fields.TEACHER_OBJ, new org.apache.thrift.meta_data.FieldMetaData("teacherObj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeacher.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQAThread.class, metaDataMap);
  }

  public TQAThread() {
  }

  public TQAThread(
    int myid,
    String threadCode,
    int studentId,
    String studentName,
    int teacherId,
    String teacherName,
    String topic,
    List<TKnowledge> knowledge,
    String createAt,
    String updateAt,
    String studentAvatarUrl,
    String teacherAvatarUrl,
    TStudent studentObj,
    TTeacher teacherObj)
  {
    this();
    this.myid = myid;
    setMyidIsSet(true);
    this.threadCode = threadCode;
    this.studentId = studentId;
    setStudentIdIsSet(true);
    this.studentName = studentName;
    this.teacherId = teacherId;
    setTeacherIdIsSet(true);
    this.teacherName = teacherName;
    this.topic = topic;
    this.knowledge = knowledge;
    this.createAt = createAt;
    this.updateAt = updateAt;
    this.studentAvatarUrl = studentAvatarUrl;
    this.teacherAvatarUrl = teacherAvatarUrl;
    this.studentObj = studentObj;
    this.teacherObj = teacherObj;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQAThread(TQAThread other) {
    __isset_bitfield = other.__isset_bitfield;
    this.myid = other.myid;
    if (other.isSetThreadCode()) {
      this.threadCode = other.threadCode;
    }
    this.studentId = other.studentId;
    if (other.isSetStudentName()) {
      this.studentName = other.studentName;
    }
    this.teacherId = other.teacherId;
    if (other.isSetTeacherName()) {
      this.teacherName = other.teacherName;
    }
    if (other.isSetTopic()) {
      this.topic = other.topic;
    }
    if (other.isSetKnowledge()) {
      List<TKnowledge> __this__knowledge = new ArrayList<TKnowledge>(other.knowledge.size());
      for (TKnowledge other_element : other.knowledge) {
        __this__knowledge.add(new TKnowledge(other_element));
      }
      this.knowledge = __this__knowledge;
    }
    if (other.isSetCreateAt()) {
      this.createAt = other.createAt;
    }
    if (other.isSetUpdateAt()) {
      this.updateAt = other.updateAt;
    }
    if (other.isSetStudentAvatarUrl()) {
      this.studentAvatarUrl = other.studentAvatarUrl;
    }
    if (other.isSetTeacherAvatarUrl()) {
      this.teacherAvatarUrl = other.teacherAvatarUrl;
    }
    if (other.isSetStudentObj()) {
      this.studentObj = new TStudent(other.studentObj);
    }
    if (other.isSetTeacherObj()) {
      this.teacherObj = new TTeacher(other.teacherObj);
    }
  }

  public TQAThread deepCopy() {
    return new TQAThread(this);
  }

  @Override
  public void clear() {
    setMyidIsSet(false);
    this.myid = 0;
    this.threadCode = null;
    setStudentIdIsSet(false);
    this.studentId = 0;
    this.studentName = null;
    setTeacherIdIsSet(false);
    this.teacherId = 0;
    this.teacherName = null;
    this.topic = null;
    this.knowledge = null;
    this.createAt = null;
    this.updateAt = null;
    this.studentAvatarUrl = null;
    this.teacherAvatarUrl = null;
    this.studentObj = null;
    this.teacherObj = null;
  }

  public int getMyid() {
    return this.myid;
  }

  public TQAThread setMyid(int myid) {
    this.myid = myid;
    setMyidIsSet(true);
    return this;
  }

  public void unsetMyid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYID_ISSET_ID);
  }

  /** Returns true if field myid is set (has been assigned a value) and false otherwise */
  public boolean isSetMyid() {
    return EncodingUtils.testBit(__isset_bitfield, __MYID_ISSET_ID);
  }

  public void setMyidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYID_ISSET_ID, value);
  }

  public String getThreadCode() {
    return this.threadCode;
  }

  public TQAThread setThreadCode(String threadCode) {
    this.threadCode = threadCode;
    return this;
  }

  public void unsetThreadCode() {
    this.threadCode = null;
  }

  /** Returns true if field threadCode is set (has been assigned a value) and false otherwise */
  public boolean isSetThreadCode() {
    return this.threadCode != null;
  }

  public void setThreadCodeIsSet(boolean value) {
    if (!value) {
      this.threadCode = null;
    }
  }

  public int getStudentId() {
    return this.studentId;
  }

  public TQAThread setStudentId(int studentId) {
    this.studentId = studentId;
    setStudentIdIsSet(true);
    return this;
  }

  public void unsetStudentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUDENTID_ISSET_ID);
  }

  /** Returns true if field studentId is set (has been assigned a value) and false otherwise */
  public boolean isSetStudentId() {
    return EncodingUtils.testBit(__isset_bitfield, __STUDENTID_ISSET_ID);
  }

  public void setStudentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUDENTID_ISSET_ID, value);
  }

  public String getStudentName() {
    return this.studentName;
  }

  public TQAThread setStudentName(String studentName) {
    this.studentName = studentName;
    return this;
  }

  public void unsetStudentName() {
    this.studentName = null;
  }

  /** Returns true if field studentName is set (has been assigned a value) and false otherwise */
  public boolean isSetStudentName() {
    return this.studentName != null;
  }

  public void setStudentNameIsSet(boolean value) {
    if (!value) {
      this.studentName = null;
    }
  }

  public int getTeacherId() {
    return this.teacherId;
  }

  public TQAThread setTeacherId(int teacherId) {
    this.teacherId = teacherId;
    setTeacherIdIsSet(true);
    return this;
  }

  public void unsetTeacherId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEACHERID_ISSET_ID);
  }

  /** Returns true if field teacherId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherId() {
    return EncodingUtils.testBit(__isset_bitfield, __TEACHERID_ISSET_ID);
  }

  public void setTeacherIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEACHERID_ISSET_ID, value);
  }

  public String getTeacherName() {
    return this.teacherName;
  }

  public TQAThread setTeacherName(String teacherName) {
    this.teacherName = teacherName;
    return this;
  }

  public void unsetTeacherName() {
    this.teacherName = null;
  }

  /** Returns true if field teacherName is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherName() {
    return this.teacherName != null;
  }

  public void setTeacherNameIsSet(boolean value) {
    if (!value) {
      this.teacherName = null;
    }
  }

  public String getTopic() {
    return this.topic;
  }

  public TQAThread setTopic(String topic) {
    this.topic = topic;
    return this;
  }

  public void unsetTopic() {
    this.topic = null;
  }

  /** Returns true if field topic is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic() {
    return this.topic != null;
  }

  public void setTopicIsSet(boolean value) {
    if (!value) {
      this.topic = null;
    }
  }

  public int getKnowledgeSize() {
    return (this.knowledge == null) ? 0 : this.knowledge.size();
  }

  public java.util.Iterator<TKnowledge> getKnowledgeIterator() {
    return (this.knowledge == null) ? null : this.knowledge.iterator();
  }

  public void addToKnowledge(TKnowledge elem) {
    if (this.knowledge == null) {
      this.knowledge = new ArrayList<TKnowledge>();
    }
    this.knowledge.add(elem);
  }

  public List<TKnowledge> getKnowledge() {
    return this.knowledge;
  }

  public TQAThread setKnowledge(List<TKnowledge> knowledge) {
    this.knowledge = knowledge;
    return this;
  }

  public void unsetKnowledge() {
    this.knowledge = null;
  }

  /** Returns true if field knowledge is set (has been assigned a value) and false otherwise */
  public boolean isSetKnowledge() {
    return this.knowledge != null;
  }

  public void setKnowledgeIsSet(boolean value) {
    if (!value) {
      this.knowledge = null;
    }
  }

  public String getCreateAt() {
    return this.createAt;
  }

  public TQAThread setCreateAt(String createAt) {
    this.createAt = createAt;
    return this;
  }

  public void unsetCreateAt() {
    this.createAt = null;
  }

  /** Returns true if field createAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateAt() {
    return this.createAt != null;
  }

  public void setCreateAtIsSet(boolean value) {
    if (!value) {
      this.createAt = null;
    }
  }

  public String getUpdateAt() {
    return this.updateAt;
  }

  public TQAThread setUpdateAt(String updateAt) {
    this.updateAt = updateAt;
    return this;
  }

  public void unsetUpdateAt() {
    this.updateAt = null;
  }

  /** Returns true if field updateAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateAt() {
    return this.updateAt != null;
  }

  public void setUpdateAtIsSet(boolean value) {
    if (!value) {
      this.updateAt = null;
    }
  }

  public String getStudentAvatarUrl() {
    return this.studentAvatarUrl;
  }

  public TQAThread setStudentAvatarUrl(String studentAvatarUrl) {
    this.studentAvatarUrl = studentAvatarUrl;
    return this;
  }

  public void unsetStudentAvatarUrl() {
    this.studentAvatarUrl = null;
  }

  /** Returns true if field studentAvatarUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetStudentAvatarUrl() {
    return this.studentAvatarUrl != null;
  }

  public void setStudentAvatarUrlIsSet(boolean value) {
    if (!value) {
      this.studentAvatarUrl = null;
    }
  }

  public String getTeacherAvatarUrl() {
    return this.teacherAvatarUrl;
  }

  public TQAThread setTeacherAvatarUrl(String teacherAvatarUrl) {
    this.teacherAvatarUrl = teacherAvatarUrl;
    return this;
  }

  public void unsetTeacherAvatarUrl() {
    this.teacherAvatarUrl = null;
  }

  /** Returns true if field teacherAvatarUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherAvatarUrl() {
    return this.teacherAvatarUrl != null;
  }

  public void setTeacherAvatarUrlIsSet(boolean value) {
    if (!value) {
      this.teacherAvatarUrl = null;
    }
  }

  public TStudent getStudentObj() {
    return this.studentObj;
  }

  public TQAThread setStudentObj(TStudent studentObj) {
    this.studentObj = studentObj;
    return this;
  }

  public void unsetStudentObj() {
    this.studentObj = null;
  }

  /** Returns true if field studentObj is set (has been assigned a value) and false otherwise */
  public boolean isSetStudentObj() {
    return this.studentObj != null;
  }

  public void setStudentObjIsSet(boolean value) {
    if (!value) {
      this.studentObj = null;
    }
  }

  public TTeacher getTeacherObj() {
    return this.teacherObj;
  }

  public TQAThread setTeacherObj(TTeacher teacherObj) {
    this.teacherObj = teacherObj;
    return this;
  }

  public void unsetTeacherObj() {
    this.teacherObj = null;
  }

  /** Returns true if field teacherObj is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherObj() {
    return this.teacherObj != null;
  }

  public void setTeacherObjIsSet(boolean value) {
    if (!value) {
      this.teacherObj = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MYID:
      if (value == null) {
        unsetMyid();
      } else {
        setMyid((Integer)value);
      }
      break;

    case THREAD_CODE:
      if (value == null) {
        unsetThreadCode();
      } else {
        setThreadCode((String)value);
      }
      break;

    case STUDENT_ID:
      if (value == null) {
        unsetStudentId();
      } else {
        setStudentId((Integer)value);
      }
      break;

    case STUDENT_NAME:
      if (value == null) {
        unsetStudentName();
      } else {
        setStudentName((String)value);
      }
      break;

    case TEACHER_ID:
      if (value == null) {
        unsetTeacherId();
      } else {
        setTeacherId((Integer)value);
      }
      break;

    case TEACHER_NAME:
      if (value == null) {
        unsetTeacherName();
      } else {
        setTeacherName((String)value);
      }
      break;

    case TOPIC:
      if (value == null) {
        unsetTopic();
      } else {
        setTopic((String)value);
      }
      break;

    case KNOWLEDGE:
      if (value == null) {
        unsetKnowledge();
      } else {
        setKnowledge((List<TKnowledge>)value);
      }
      break;

    case CREATE_AT:
      if (value == null) {
        unsetCreateAt();
      } else {
        setCreateAt((String)value);
      }
      break;

    case UPDATE_AT:
      if (value == null) {
        unsetUpdateAt();
      } else {
        setUpdateAt((String)value);
      }
      break;

    case STUDENT_AVATAR_URL:
      if (value == null) {
        unsetStudentAvatarUrl();
      } else {
        setStudentAvatarUrl((String)value);
      }
      break;

    case TEACHER_AVATAR_URL:
      if (value == null) {
        unsetTeacherAvatarUrl();
      } else {
        setTeacherAvatarUrl((String)value);
      }
      break;

    case STUDENT_OBJ:
      if (value == null) {
        unsetStudentObj();
      } else {
        setStudentObj((TStudent)value);
      }
      break;

    case TEACHER_OBJ:
      if (value == null) {
        unsetTeacherObj();
      } else {
        setTeacherObj((TTeacher)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MYID:
      return Integer.valueOf(getMyid());

    case THREAD_CODE:
      return getThreadCode();

    case STUDENT_ID:
      return Integer.valueOf(getStudentId());

    case STUDENT_NAME:
      return getStudentName();

    case TEACHER_ID:
      return Integer.valueOf(getTeacherId());

    case TEACHER_NAME:
      return getTeacherName();

    case TOPIC:
      return getTopic();

    case KNOWLEDGE:
      return getKnowledge();

    case CREATE_AT:
      return getCreateAt();

    case UPDATE_AT:
      return getUpdateAt();

    case STUDENT_AVATAR_URL:
      return getStudentAvatarUrl();

    case TEACHER_AVATAR_URL:
      return getTeacherAvatarUrl();

    case STUDENT_OBJ:
      return getStudentObj();

    case TEACHER_OBJ:
      return getTeacherObj();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MYID:
      return isSetMyid();
    case THREAD_CODE:
      return isSetThreadCode();
    case STUDENT_ID:
      return isSetStudentId();
    case STUDENT_NAME:
      return isSetStudentName();
    case TEACHER_ID:
      return isSetTeacherId();
    case TEACHER_NAME:
      return isSetTeacherName();
    case TOPIC:
      return isSetTopic();
    case KNOWLEDGE:
      return isSetKnowledge();
    case CREATE_AT:
      return isSetCreateAt();
    case UPDATE_AT:
      return isSetUpdateAt();
    case STUDENT_AVATAR_URL:
      return isSetStudentAvatarUrl();
    case TEACHER_AVATAR_URL:
      return isSetTeacherAvatarUrl();
    case STUDENT_OBJ:
      return isSetStudentObj();
    case TEACHER_OBJ:
      return isSetTeacherObj();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TQAThread)
      return this.equals((TQAThread)that);
    return false;
  }

  public boolean equals(TQAThread that) {
    if (that == null)
      return false;

    boolean this_present_myid = true;
    boolean that_present_myid = true;
    if (this_present_myid || that_present_myid) {
      if (!(this_present_myid && that_present_myid))
        return false;
      if (this.myid != that.myid)
        return false;
    }

    boolean this_present_threadCode = true && this.isSetThreadCode();
    boolean that_present_threadCode = true && that.isSetThreadCode();
    if (this_present_threadCode || that_present_threadCode) {
      if (!(this_present_threadCode && that_present_threadCode))
        return false;
      if (!this.threadCode.equals(that.threadCode))
        return false;
    }

    boolean this_present_studentId = true;
    boolean that_present_studentId = true;
    if (this_present_studentId || that_present_studentId) {
      if (!(this_present_studentId && that_present_studentId))
        return false;
      if (this.studentId != that.studentId)
        return false;
    }

    boolean this_present_studentName = true && this.isSetStudentName();
    boolean that_present_studentName = true && that.isSetStudentName();
    if (this_present_studentName || that_present_studentName) {
      if (!(this_present_studentName && that_present_studentName))
        return false;
      if (!this.studentName.equals(that.studentName))
        return false;
    }

    boolean this_present_teacherId = true;
    boolean that_present_teacherId = true;
    if (this_present_teacherId || that_present_teacherId) {
      if (!(this_present_teacherId && that_present_teacherId))
        return false;
      if (this.teacherId != that.teacherId)
        return false;
    }

    boolean this_present_teacherName = true && this.isSetTeacherName();
    boolean that_present_teacherName = true && that.isSetTeacherName();
    if (this_present_teacherName || that_present_teacherName) {
      if (!(this_present_teacherName && that_present_teacherName))
        return false;
      if (!this.teacherName.equals(that.teacherName))
        return false;
    }

    boolean this_present_topic = true && this.isSetTopic();
    boolean that_present_topic = true && that.isSetTopic();
    if (this_present_topic || that_present_topic) {
      if (!(this_present_topic && that_present_topic))
        return false;
      if (!this.topic.equals(that.topic))
        return false;
    }

    boolean this_present_knowledge = true && this.isSetKnowledge();
    boolean that_present_knowledge = true && that.isSetKnowledge();
    if (this_present_knowledge || that_present_knowledge) {
      if (!(this_present_knowledge && that_present_knowledge))
        return false;
      if (!this.knowledge.equals(that.knowledge))
        return false;
    }

    boolean this_present_createAt = true && this.isSetCreateAt();
    boolean that_present_createAt = true && that.isSetCreateAt();
    if (this_present_createAt || that_present_createAt) {
      if (!(this_present_createAt && that_present_createAt))
        return false;
      if (!this.createAt.equals(that.createAt))
        return false;
    }

    boolean this_present_updateAt = true && this.isSetUpdateAt();
    boolean that_present_updateAt = true && that.isSetUpdateAt();
    if (this_present_updateAt || that_present_updateAt) {
      if (!(this_present_updateAt && that_present_updateAt))
        return false;
      if (!this.updateAt.equals(that.updateAt))
        return false;
    }

    boolean this_present_studentAvatarUrl = true && this.isSetStudentAvatarUrl();
    boolean that_present_studentAvatarUrl = true && that.isSetStudentAvatarUrl();
    if (this_present_studentAvatarUrl || that_present_studentAvatarUrl) {
      if (!(this_present_studentAvatarUrl && that_present_studentAvatarUrl))
        return false;
      if (!this.studentAvatarUrl.equals(that.studentAvatarUrl))
        return false;
    }

    boolean this_present_teacherAvatarUrl = true && this.isSetTeacherAvatarUrl();
    boolean that_present_teacherAvatarUrl = true && that.isSetTeacherAvatarUrl();
    if (this_present_teacherAvatarUrl || that_present_teacherAvatarUrl) {
      if (!(this_present_teacherAvatarUrl && that_present_teacherAvatarUrl))
        return false;
      if (!this.teacherAvatarUrl.equals(that.teacherAvatarUrl))
        return false;
    }

    boolean this_present_studentObj = true && this.isSetStudentObj();
    boolean that_present_studentObj = true && that.isSetStudentObj();
    if (this_present_studentObj || that_present_studentObj) {
      if (!(this_present_studentObj && that_present_studentObj))
        return false;
      if (!this.studentObj.equals(that.studentObj))
        return false;
    }

    boolean this_present_teacherObj = true && this.isSetTeacherObj();
    boolean that_present_teacherObj = true && that.isSetTeacherObj();
    if (this_present_teacherObj || that_present_teacherObj) {
      if (!(this_present_teacherObj && that_present_teacherObj))
        return false;
      if (!this.teacherObj.equals(that.teacherObj))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TQAThread other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMyid()).compareTo(other.isSetMyid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myid, other.myid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThreadCode()).compareTo(other.isSetThreadCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreadCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadCode, other.threadCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStudentId()).compareTo(other.isSetStudentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentId, other.studentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStudentName()).compareTo(other.isSetStudentName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudentName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentName, other.studentName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeacherId()).compareTo(other.isSetTeacherId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherId, other.teacherId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeacherName()).compareTo(other.isSetTeacherName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherName, other.teacherName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKnowledge()).compareTo(other.isSetKnowledge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKnowledge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knowledge, other.knowledge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateAt()).compareTo(other.isSetCreateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createAt, other.createAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateAt()).compareTo(other.isSetUpdateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateAt, other.updateAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStudentAvatarUrl()).compareTo(other.isSetStudentAvatarUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudentAvatarUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentAvatarUrl, other.studentAvatarUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeacherAvatarUrl()).compareTo(other.isSetTeacherAvatarUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherAvatarUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherAvatarUrl, other.teacherAvatarUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStudentObj()).compareTo(other.isSetStudentObj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudentObj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentObj, other.studentObj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeacherObj()).compareTo(other.isSetTeacherObj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherObj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherObj, other.teacherObj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TQAThread(");
    boolean first = true;

    sb.append("myid:");
    sb.append(this.myid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("threadCode:");
    if (this.threadCode == null) {
      sb.append("null");
    } else {
      sb.append(this.threadCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("studentId:");
    sb.append(this.studentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("studentName:");
    if (this.studentName == null) {
      sb.append("null");
    } else {
      sb.append(this.studentName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherId:");
    sb.append(this.teacherId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherName:");
    if (this.teacherName == null) {
      sb.append("null");
    } else {
      sb.append(this.teacherName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topic:");
    if (this.topic == null) {
      sb.append("null");
    } else {
      sb.append(this.topic);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("knowledge:");
    if (this.knowledge == null) {
      sb.append("null");
    } else {
      sb.append(this.knowledge);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createAt:");
    if (this.createAt == null) {
      sb.append("null");
    } else {
      sb.append(this.createAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateAt:");
    if (this.updateAt == null) {
      sb.append("null");
    } else {
      sb.append(this.updateAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("studentAvatarUrl:");
    if (this.studentAvatarUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.studentAvatarUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherAvatarUrl:");
    if (this.teacherAvatarUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.teacherAvatarUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("studentObj:");
    if (this.studentObj == null) {
      sb.append("null");
    } else {
      sb.append(this.studentObj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherObj:");
    if (this.teacherObj == null) {
      sb.append("null");
    } else {
      sb.append(this.teacherObj);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (studentObj != null) {
      studentObj.validate();
    }
    if (teacherObj != null) {
      teacherObj.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQAThreadStandardSchemeFactory implements SchemeFactory {
    public TQAThreadStandardScheme getScheme() {
      return new TQAThreadStandardScheme();
    }
  }

  private static class TQAThreadStandardScheme extends StandardScheme<TQAThread> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQAThread struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MYID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.myid = iprot.readI32();
              struct.setMyidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // THREAD_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.threadCode = iprot.readString();
              struct.setThreadCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STUDENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.studentId = iprot.readI32();
              struct.setStudentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STUDENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.studentName = iprot.readString();
              struct.setStudentNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TEACHER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.teacherId = iprot.readI32();
              struct.setTeacherIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TEACHER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teacherName = iprot.readString();
              struct.setTeacherNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOPIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topic = iprot.readString();
              struct.setTopicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // KNOWLEDGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.knowledge = new ArrayList<TKnowledge>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  TKnowledge _elem2;
                  _elem2 = new TKnowledge();
                  _elem2.read(iprot);
                  struct.knowledge.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setKnowledgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createAt = iprot.readString();
              struct.setCreateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPDATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateAt = iprot.readString();
              struct.setUpdateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STUDENT_AVATAR_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.studentAvatarUrl = iprot.readString();
              struct.setStudentAvatarUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TEACHER_AVATAR_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teacherAvatarUrl = iprot.readString();
              struct.setTeacherAvatarUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STUDENT_OBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.studentObj = new TStudent();
              struct.studentObj.read(iprot);
              struct.setStudentObjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TEACHER_OBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.teacherObj = new TTeacher();
              struct.teacherObj.read(iprot);
              struct.setTeacherObjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQAThread struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MYID_FIELD_DESC);
      oprot.writeI32(struct.myid);
      oprot.writeFieldEnd();
      if (struct.threadCode != null) {
        oprot.writeFieldBegin(THREAD_CODE_FIELD_DESC);
        oprot.writeString(struct.threadCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STUDENT_ID_FIELD_DESC);
      oprot.writeI32(struct.studentId);
      oprot.writeFieldEnd();
      if (struct.studentName != null) {
        oprot.writeFieldBegin(STUDENT_NAME_FIELD_DESC);
        oprot.writeString(struct.studentName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TEACHER_ID_FIELD_DESC);
      oprot.writeI32(struct.teacherId);
      oprot.writeFieldEnd();
      if (struct.teacherName != null) {
        oprot.writeFieldBegin(TEACHER_NAME_FIELD_DESC);
        oprot.writeString(struct.teacherName);
        oprot.writeFieldEnd();
      }
      if (struct.topic != null) {
        oprot.writeFieldBegin(TOPIC_FIELD_DESC);
        oprot.writeString(struct.topic);
        oprot.writeFieldEnd();
      }
      if (struct.knowledge != null) {
        oprot.writeFieldBegin(KNOWLEDGE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.knowledge.size()));
          for (TKnowledge _iter3 : struct.knowledge)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.createAt != null) {
        oprot.writeFieldBegin(CREATE_AT_FIELD_DESC);
        oprot.writeString(struct.createAt);
        oprot.writeFieldEnd();
      }
      if (struct.updateAt != null) {
        oprot.writeFieldBegin(UPDATE_AT_FIELD_DESC);
        oprot.writeString(struct.updateAt);
        oprot.writeFieldEnd();
      }
      if (struct.studentAvatarUrl != null) {
        oprot.writeFieldBegin(STUDENT_AVATAR_URL_FIELD_DESC);
        oprot.writeString(struct.studentAvatarUrl);
        oprot.writeFieldEnd();
      }
      if (struct.teacherAvatarUrl != null) {
        oprot.writeFieldBegin(TEACHER_AVATAR_URL_FIELD_DESC);
        oprot.writeString(struct.teacherAvatarUrl);
        oprot.writeFieldEnd();
      }
      if (struct.studentObj != null) {
        oprot.writeFieldBegin(STUDENT_OBJ_FIELD_DESC);
        struct.studentObj.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.teacherObj != null) {
        oprot.writeFieldBegin(TEACHER_OBJ_FIELD_DESC);
        struct.teacherObj.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQAThreadTupleSchemeFactory implements SchemeFactory {
    public TQAThreadTupleScheme getScheme() {
      return new TQAThreadTupleScheme();
    }
  }

  private static class TQAThreadTupleScheme extends TupleScheme<TQAThread> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQAThread struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMyid()) {
        optionals.set(0);
      }
      if (struct.isSetThreadCode()) {
        optionals.set(1);
      }
      if (struct.isSetStudentId()) {
        optionals.set(2);
      }
      if (struct.isSetStudentName()) {
        optionals.set(3);
      }
      if (struct.isSetTeacherId()) {
        optionals.set(4);
      }
      if (struct.isSetTeacherName()) {
        optionals.set(5);
      }
      if (struct.isSetTopic()) {
        optionals.set(6);
      }
      if (struct.isSetKnowledge()) {
        optionals.set(7);
      }
      if (struct.isSetCreateAt()) {
        optionals.set(8);
      }
      if (struct.isSetUpdateAt()) {
        optionals.set(9);
      }
      if (struct.isSetStudentAvatarUrl()) {
        optionals.set(10);
      }
      if (struct.isSetTeacherAvatarUrl()) {
        optionals.set(11);
      }
      if (struct.isSetStudentObj()) {
        optionals.set(12);
      }
      if (struct.isSetTeacherObj()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetMyid()) {
        oprot.writeI32(struct.myid);
      }
      if (struct.isSetThreadCode()) {
        oprot.writeString(struct.threadCode);
      }
      if (struct.isSetStudentId()) {
        oprot.writeI32(struct.studentId);
      }
      if (struct.isSetStudentName()) {
        oprot.writeString(struct.studentName);
      }
      if (struct.isSetTeacherId()) {
        oprot.writeI32(struct.teacherId);
      }
      if (struct.isSetTeacherName()) {
        oprot.writeString(struct.teacherName);
      }
      if (struct.isSetTopic()) {
        oprot.writeString(struct.topic);
      }
      if (struct.isSetKnowledge()) {
        {
          oprot.writeI32(struct.knowledge.size());
          for (TKnowledge _iter4 : struct.knowledge)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetCreateAt()) {
        oprot.writeString(struct.createAt);
      }
      if (struct.isSetUpdateAt()) {
        oprot.writeString(struct.updateAt);
      }
      if (struct.isSetStudentAvatarUrl()) {
        oprot.writeString(struct.studentAvatarUrl);
      }
      if (struct.isSetTeacherAvatarUrl()) {
        oprot.writeString(struct.teacherAvatarUrl);
      }
      if (struct.isSetStudentObj()) {
        struct.studentObj.write(oprot);
      }
      if (struct.isSetTeacherObj()) {
        struct.teacherObj.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQAThread struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.myid = iprot.readI32();
        struct.setMyidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.threadCode = iprot.readString();
        struct.setThreadCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.studentId = iprot.readI32();
        struct.setStudentIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.studentName = iprot.readString();
        struct.setStudentNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.teacherId = iprot.readI32();
        struct.setTeacherIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.teacherName = iprot.readString();
        struct.setTeacherNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.topic = iprot.readString();
        struct.setTopicIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.knowledge = new ArrayList<TKnowledge>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            TKnowledge _elem7;
            _elem7 = new TKnowledge();
            _elem7.read(iprot);
            struct.knowledge.add(_elem7);
          }
        }
        struct.setKnowledgeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createAt = iprot.readString();
        struct.setCreateAtIsSet(true);
      }
      if (incoming.get(9)) {
        struct.updateAt = iprot.readString();
        struct.setUpdateAtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.studentAvatarUrl = iprot.readString();
        struct.setStudentAvatarUrlIsSet(true);
      }
      if (incoming.get(11)) {
        struct.teacherAvatarUrl = iprot.readString();
        struct.setTeacherAvatarUrlIsSet(true);
      }
      if (incoming.get(12)) {
        struct.studentObj = new TStudent();
        struct.studentObj.read(iprot);
        struct.setStudentObjIsSet(true);
      }
      if (incoming.get(13)) {
        struct.teacherObj = new TTeacher();
        struct.teacherObj.read(iprot);
        struct.setTeacherObjIsSet(true);
      }
    }
  }

}

