/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.plaso.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TGroup implements org.apache.thrift.TBase<TGroup, TGroup._Fields>, java.io.Serializable, Cloneable, Comparable<TGroup> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGroup");

  private static final org.apache.thrift.protocol.TField MYID_FIELD_DESC = new org.apache.thrift.protocol.TField("myid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ORGANIZE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("organizeId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TEACHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ASSISTANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("assistantId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField GROUP_REMARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("groupRemarks", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ANNOUNCEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("announcement", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createAt", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateAt", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("active", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField TEACHER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TEACHER_OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherObj", org.apache.thrift.protocol.TType.STRUCT, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TGroupStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TGroupTupleSchemeFactory());
  }

  public int myid; // required
  public String groupName; // required
  public int organizeId; // required
  public int teacherId; // required
  public int assistantId; // required
  public String groupRemarks; // required
  public String announcement; // required
  public String createAt; // required
  public String updateAt; // required
  public boolean active; // required
  public String teacherName; // required
  public TTeacher teacherObj; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MYID((short)1, "myid"),
    GROUP_NAME((short)2, "groupName"),
    ORGANIZE_ID((short)3, "organizeId"),
    TEACHER_ID((short)4, "teacherId"),
    ASSISTANT_ID((short)5, "assistantId"),
    GROUP_REMARKS((short)6, "groupRemarks"),
    ANNOUNCEMENT((short)7, "announcement"),
    CREATE_AT((short)8, "createAt"),
    UPDATE_AT((short)9, "updateAt"),
    ACTIVE((short)10, "active"),
    TEACHER_NAME((short)11, "teacherName"),
    TEACHER_OBJ((short)12, "teacherObj");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MYID
          return MYID;
        case 2: // GROUP_NAME
          return GROUP_NAME;
        case 3: // ORGANIZE_ID
          return ORGANIZE_ID;
        case 4: // TEACHER_ID
          return TEACHER_ID;
        case 5: // ASSISTANT_ID
          return ASSISTANT_ID;
        case 6: // GROUP_REMARKS
          return GROUP_REMARKS;
        case 7: // ANNOUNCEMENT
          return ANNOUNCEMENT;
        case 8: // CREATE_AT
          return CREATE_AT;
        case 9: // UPDATE_AT
          return UPDATE_AT;
        case 10: // ACTIVE
          return ACTIVE;
        case 11: // TEACHER_NAME
          return TEACHER_NAME;
        case 12: // TEACHER_OBJ
          return TEACHER_OBJ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MYID_ISSET_ID = 0;
  private static final int __ORGANIZEID_ISSET_ID = 1;
  private static final int __TEACHERID_ISSET_ID = 2;
  private static final int __ASSISTANTID_ISSET_ID = 3;
  private static final int __ACTIVE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MYID, new org.apache.thrift.meta_data.FieldMetaData("myid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORGANIZE_ID, new org.apache.thrift.meta_data.FieldMetaData("organizeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEACHER_ID, new org.apache.thrift.meta_data.FieldMetaData("teacherId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ASSISTANT_ID, new org.apache.thrift.meta_data.FieldMetaData("assistantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_REMARKS, new org.apache.thrift.meta_data.FieldMetaData("groupRemarks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANNOUNCEMENT, new org.apache.thrift.meta_data.FieldMetaData("announcement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_AT, new org.apache.thrift.meta_data.FieldMetaData("createAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_AT, new org.apache.thrift.meta_data.FieldMetaData("updateAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("active", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TEACHER_NAME, new org.apache.thrift.meta_data.FieldMetaData("teacherName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEACHER_OBJ, new org.apache.thrift.meta_data.FieldMetaData("teacherObj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeacher.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGroup.class, metaDataMap);
  }

  public TGroup() {
  }

  public TGroup(
    int myid,
    String groupName,
    int organizeId,
    int teacherId,
    int assistantId,
    String groupRemarks,
    String announcement,
    String createAt,
    String updateAt,
    boolean active,
    String teacherName,
    TTeacher teacherObj)
  {
    this();
    this.myid = myid;
    setMyidIsSet(true);
    this.groupName = groupName;
    this.organizeId = organizeId;
    setOrganizeIdIsSet(true);
    this.teacherId = teacherId;
    setTeacherIdIsSet(true);
    this.assistantId = assistantId;
    setAssistantIdIsSet(true);
    this.groupRemarks = groupRemarks;
    this.announcement = announcement;
    this.createAt = createAt;
    this.updateAt = updateAt;
    this.active = active;
    setActiveIsSet(true);
    this.teacherName = teacherName;
    this.teacherObj = teacherObj;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGroup(TGroup other) {
    __isset_bitfield = other.__isset_bitfield;
    this.myid = other.myid;
    if (other.isSetGroupName()) {
      this.groupName = other.groupName;
    }
    this.organizeId = other.organizeId;
    this.teacherId = other.teacherId;
    this.assistantId = other.assistantId;
    if (other.isSetGroupRemarks()) {
      this.groupRemarks = other.groupRemarks;
    }
    if (other.isSetAnnouncement()) {
      this.announcement = other.announcement;
    }
    if (other.isSetCreateAt()) {
      this.createAt = other.createAt;
    }
    if (other.isSetUpdateAt()) {
      this.updateAt = other.updateAt;
    }
    this.active = other.active;
    if (other.isSetTeacherName()) {
      this.teacherName = other.teacherName;
    }
    if (other.isSetTeacherObj()) {
      this.teacherObj = new TTeacher(other.teacherObj);
    }
  }

  public TGroup deepCopy() {
    return new TGroup(this);
  }

  @Override
  public void clear() {
    setMyidIsSet(false);
    this.myid = 0;
    this.groupName = null;
    setOrganizeIdIsSet(false);
    this.organizeId = 0;
    setTeacherIdIsSet(false);
    this.teacherId = 0;
    setAssistantIdIsSet(false);
    this.assistantId = 0;
    this.groupRemarks = null;
    this.announcement = null;
    this.createAt = null;
    this.updateAt = null;
    setActiveIsSet(false);
    this.active = false;
    this.teacherName = null;
    this.teacherObj = null;
  }

  public int getMyid() {
    return this.myid;
  }

  public TGroup setMyid(int myid) {
    this.myid = myid;
    setMyidIsSet(true);
    return this;
  }

  public void unsetMyid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYID_ISSET_ID);
  }

  /** Returns true if field myid is set (has been assigned a value) and false otherwise */
  public boolean isSetMyid() {
    return EncodingUtils.testBit(__isset_bitfield, __MYID_ISSET_ID);
  }

  public void setMyidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYID_ISSET_ID, value);
  }

  public String getGroupName() {
    return this.groupName;
  }

  public TGroup setGroupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  public void unsetGroupName() {
    this.groupName = null;
  }

  /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupName() {
    return this.groupName != null;
  }

  public void setGroupNameIsSet(boolean value) {
    if (!value) {
      this.groupName = null;
    }
  }

  public int getOrganizeId() {
    return this.organizeId;
  }

  public TGroup setOrganizeId(int organizeId) {
    this.organizeId = organizeId;
    setOrganizeIdIsSet(true);
    return this;
  }

  public void unsetOrganizeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGANIZEID_ISSET_ID);
  }

  /** Returns true if field organizeId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganizeId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGANIZEID_ISSET_ID);
  }

  public void setOrganizeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGANIZEID_ISSET_ID, value);
  }

  public int getTeacherId() {
    return this.teacherId;
  }

  public TGroup setTeacherId(int teacherId) {
    this.teacherId = teacherId;
    setTeacherIdIsSet(true);
    return this;
  }

  public void unsetTeacherId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEACHERID_ISSET_ID);
  }

  /** Returns true if field teacherId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherId() {
    return EncodingUtils.testBit(__isset_bitfield, __TEACHERID_ISSET_ID);
  }

  public void setTeacherIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEACHERID_ISSET_ID, value);
  }

  public int getAssistantId() {
    return this.assistantId;
  }

  public TGroup setAssistantId(int assistantId) {
    this.assistantId = assistantId;
    setAssistantIdIsSet(true);
    return this;
  }

  public void unsetAssistantId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSISTANTID_ISSET_ID);
  }

  /** Returns true if field assistantId is set (has been assigned a value) and false otherwise */
  public boolean isSetAssistantId() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSISTANTID_ISSET_ID);
  }

  public void setAssistantIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSISTANTID_ISSET_ID, value);
  }

  public String getGroupRemarks() {
    return this.groupRemarks;
  }

  public TGroup setGroupRemarks(String groupRemarks) {
    this.groupRemarks = groupRemarks;
    return this;
  }

  public void unsetGroupRemarks() {
    this.groupRemarks = null;
  }

  /** Returns true if field groupRemarks is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupRemarks() {
    return this.groupRemarks != null;
  }

  public void setGroupRemarksIsSet(boolean value) {
    if (!value) {
      this.groupRemarks = null;
    }
  }

  public String getAnnouncement() {
    return this.announcement;
  }

  public TGroup setAnnouncement(String announcement) {
    this.announcement = announcement;
    return this;
  }

  public void unsetAnnouncement() {
    this.announcement = null;
  }

  /** Returns true if field announcement is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnouncement() {
    return this.announcement != null;
  }

  public void setAnnouncementIsSet(boolean value) {
    if (!value) {
      this.announcement = null;
    }
  }

  public String getCreateAt() {
    return this.createAt;
  }

  public TGroup setCreateAt(String createAt) {
    this.createAt = createAt;
    return this;
  }

  public void unsetCreateAt() {
    this.createAt = null;
  }

  /** Returns true if field createAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateAt() {
    return this.createAt != null;
  }

  public void setCreateAtIsSet(boolean value) {
    if (!value) {
      this.createAt = null;
    }
  }

  public String getUpdateAt() {
    return this.updateAt;
  }

  public TGroup setUpdateAt(String updateAt) {
    this.updateAt = updateAt;
    return this;
  }

  public void unsetUpdateAt() {
    this.updateAt = null;
  }

  /** Returns true if field updateAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateAt() {
    return this.updateAt != null;
  }

  public void setUpdateAtIsSet(boolean value) {
    if (!value) {
      this.updateAt = null;
    }
  }

  public boolean isActive() {
    return this.active;
  }

  public TGroup setActive(boolean active) {
    this.active = active;
    setActiveIsSet(true);
    return this;
  }

  public void unsetActive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  /** Returns true if field active is set (has been assigned a value) and false otherwise */
  public boolean isSetActive() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  public void setActiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVE_ISSET_ID, value);
  }

  public String getTeacherName() {
    return this.teacherName;
  }

  public TGroup setTeacherName(String teacherName) {
    this.teacherName = teacherName;
    return this;
  }

  public void unsetTeacherName() {
    this.teacherName = null;
  }

  /** Returns true if field teacherName is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherName() {
    return this.teacherName != null;
  }

  public void setTeacherNameIsSet(boolean value) {
    if (!value) {
      this.teacherName = null;
    }
  }

  public TTeacher getTeacherObj() {
    return this.teacherObj;
  }

  public TGroup setTeacherObj(TTeacher teacherObj) {
    this.teacherObj = teacherObj;
    return this;
  }

  public void unsetTeacherObj() {
    this.teacherObj = null;
  }

  /** Returns true if field teacherObj is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherObj() {
    return this.teacherObj != null;
  }

  public void setTeacherObjIsSet(boolean value) {
    if (!value) {
      this.teacherObj = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MYID:
      if (value == null) {
        unsetMyid();
      } else {
        setMyid((Integer)value);
      }
      break;

    case GROUP_NAME:
      if (value == null) {
        unsetGroupName();
      } else {
        setGroupName((String)value);
      }
      break;

    case ORGANIZE_ID:
      if (value == null) {
        unsetOrganizeId();
      } else {
        setOrganizeId((Integer)value);
      }
      break;

    case TEACHER_ID:
      if (value == null) {
        unsetTeacherId();
      } else {
        setTeacherId((Integer)value);
      }
      break;

    case ASSISTANT_ID:
      if (value == null) {
        unsetAssistantId();
      } else {
        setAssistantId((Integer)value);
      }
      break;

    case GROUP_REMARKS:
      if (value == null) {
        unsetGroupRemarks();
      } else {
        setGroupRemarks((String)value);
      }
      break;

    case ANNOUNCEMENT:
      if (value == null) {
        unsetAnnouncement();
      } else {
        setAnnouncement((String)value);
      }
      break;

    case CREATE_AT:
      if (value == null) {
        unsetCreateAt();
      } else {
        setCreateAt((String)value);
      }
      break;

    case UPDATE_AT:
      if (value == null) {
        unsetUpdateAt();
      } else {
        setUpdateAt((String)value);
      }
      break;

    case ACTIVE:
      if (value == null) {
        unsetActive();
      } else {
        setActive((Boolean)value);
      }
      break;

    case TEACHER_NAME:
      if (value == null) {
        unsetTeacherName();
      } else {
        setTeacherName((String)value);
      }
      break;

    case TEACHER_OBJ:
      if (value == null) {
        unsetTeacherObj();
      } else {
        setTeacherObj((TTeacher)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MYID:
      return Integer.valueOf(getMyid());

    case GROUP_NAME:
      return getGroupName();

    case ORGANIZE_ID:
      return Integer.valueOf(getOrganizeId());

    case TEACHER_ID:
      return Integer.valueOf(getTeacherId());

    case ASSISTANT_ID:
      return Integer.valueOf(getAssistantId());

    case GROUP_REMARKS:
      return getGroupRemarks();

    case ANNOUNCEMENT:
      return getAnnouncement();

    case CREATE_AT:
      return getCreateAt();

    case UPDATE_AT:
      return getUpdateAt();

    case ACTIVE:
      return Boolean.valueOf(isActive());

    case TEACHER_NAME:
      return getTeacherName();

    case TEACHER_OBJ:
      return getTeacherObj();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MYID:
      return isSetMyid();
    case GROUP_NAME:
      return isSetGroupName();
    case ORGANIZE_ID:
      return isSetOrganizeId();
    case TEACHER_ID:
      return isSetTeacherId();
    case ASSISTANT_ID:
      return isSetAssistantId();
    case GROUP_REMARKS:
      return isSetGroupRemarks();
    case ANNOUNCEMENT:
      return isSetAnnouncement();
    case CREATE_AT:
      return isSetCreateAt();
    case UPDATE_AT:
      return isSetUpdateAt();
    case ACTIVE:
      return isSetActive();
    case TEACHER_NAME:
      return isSetTeacherName();
    case TEACHER_OBJ:
      return isSetTeacherObj();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TGroup)
      return this.equals((TGroup)that);
    return false;
  }

  public boolean equals(TGroup that) {
    if (that == null)
      return false;

    boolean this_present_myid = true;
    boolean that_present_myid = true;
    if (this_present_myid || that_present_myid) {
      if (!(this_present_myid && that_present_myid))
        return false;
      if (this.myid != that.myid)
        return false;
    }

    boolean this_present_groupName = true && this.isSetGroupName();
    boolean that_present_groupName = true && that.isSetGroupName();
    if (this_present_groupName || that_present_groupName) {
      if (!(this_present_groupName && that_present_groupName))
        return false;
      if (!this.groupName.equals(that.groupName))
        return false;
    }

    boolean this_present_organizeId = true;
    boolean that_present_organizeId = true;
    if (this_present_organizeId || that_present_organizeId) {
      if (!(this_present_organizeId && that_present_organizeId))
        return false;
      if (this.organizeId != that.organizeId)
        return false;
    }

    boolean this_present_teacherId = true;
    boolean that_present_teacherId = true;
    if (this_present_teacherId || that_present_teacherId) {
      if (!(this_present_teacherId && that_present_teacherId))
        return false;
      if (this.teacherId != that.teacherId)
        return false;
    }

    boolean this_present_assistantId = true;
    boolean that_present_assistantId = true;
    if (this_present_assistantId || that_present_assistantId) {
      if (!(this_present_assistantId && that_present_assistantId))
        return false;
      if (this.assistantId != that.assistantId)
        return false;
    }

    boolean this_present_groupRemarks = true && this.isSetGroupRemarks();
    boolean that_present_groupRemarks = true && that.isSetGroupRemarks();
    if (this_present_groupRemarks || that_present_groupRemarks) {
      if (!(this_present_groupRemarks && that_present_groupRemarks))
        return false;
      if (!this.groupRemarks.equals(that.groupRemarks))
        return false;
    }

    boolean this_present_announcement = true && this.isSetAnnouncement();
    boolean that_present_announcement = true && that.isSetAnnouncement();
    if (this_present_announcement || that_present_announcement) {
      if (!(this_present_announcement && that_present_announcement))
        return false;
      if (!this.announcement.equals(that.announcement))
        return false;
    }

    boolean this_present_createAt = true && this.isSetCreateAt();
    boolean that_present_createAt = true && that.isSetCreateAt();
    if (this_present_createAt || that_present_createAt) {
      if (!(this_present_createAt && that_present_createAt))
        return false;
      if (!this.createAt.equals(that.createAt))
        return false;
    }

    boolean this_present_updateAt = true && this.isSetUpdateAt();
    boolean that_present_updateAt = true && that.isSetUpdateAt();
    if (this_present_updateAt || that_present_updateAt) {
      if (!(this_present_updateAt && that_present_updateAt))
        return false;
      if (!this.updateAt.equals(that.updateAt))
        return false;
    }

    boolean this_present_active = true;
    boolean that_present_active = true;
    if (this_present_active || that_present_active) {
      if (!(this_present_active && that_present_active))
        return false;
      if (this.active != that.active)
        return false;
    }

    boolean this_present_teacherName = true && this.isSetTeacherName();
    boolean that_present_teacherName = true && that.isSetTeacherName();
    if (this_present_teacherName || that_present_teacherName) {
      if (!(this_present_teacherName && that_present_teacherName))
        return false;
      if (!this.teacherName.equals(that.teacherName))
        return false;
    }

    boolean this_present_teacherObj = true && this.isSetTeacherObj();
    boolean that_present_teacherObj = true && that.isSetTeacherObj();
    if (this_present_teacherObj || that_present_teacherObj) {
      if (!(this_present_teacherObj && that_present_teacherObj))
        return false;
      if (!this.teacherObj.equals(that.teacherObj))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TGroup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMyid()).compareTo(other.isSetMyid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myid, other.myid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupName()).compareTo(other.isSetGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, other.groupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrganizeId()).compareTo(other.isSetOrganizeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganizeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organizeId, other.organizeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeacherId()).compareTo(other.isSetTeacherId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherId, other.teacherId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssistantId()).compareTo(other.isSetAssistantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssistantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assistantId, other.assistantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupRemarks()).compareTo(other.isSetGroupRemarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupRemarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupRemarks, other.groupRemarks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnouncement()).compareTo(other.isSetAnnouncement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnouncement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.announcement, other.announcement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateAt()).compareTo(other.isSetCreateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createAt, other.createAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateAt()).compareTo(other.isSetUpdateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateAt, other.updateAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActive()).compareTo(other.isSetActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.active, other.active);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeacherName()).compareTo(other.isSetTeacherName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherName, other.teacherName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeacherObj()).compareTo(other.isSetTeacherObj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherObj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherObj, other.teacherObj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TGroup(");
    boolean first = true;

    sb.append("myid:");
    sb.append(this.myid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupName:");
    if (this.groupName == null) {
      sb.append("null");
    } else {
      sb.append(this.groupName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("organizeId:");
    sb.append(this.organizeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherId:");
    sb.append(this.teacherId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assistantId:");
    sb.append(this.assistantId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupRemarks:");
    if (this.groupRemarks == null) {
      sb.append("null");
    } else {
      sb.append(this.groupRemarks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("announcement:");
    if (this.announcement == null) {
      sb.append("null");
    } else {
      sb.append(this.announcement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createAt:");
    if (this.createAt == null) {
      sb.append("null");
    } else {
      sb.append(this.createAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateAt:");
    if (this.updateAt == null) {
      sb.append("null");
    } else {
      sb.append(this.updateAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("active:");
    sb.append(this.active);
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherName:");
    if (this.teacherName == null) {
      sb.append("null");
    } else {
      sb.append(this.teacherName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherObj:");
    if (this.teacherObj == null) {
      sb.append("null");
    } else {
      sb.append(this.teacherObj);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (teacherObj != null) {
      teacherObj.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGroupStandardSchemeFactory implements SchemeFactory {
    public TGroupStandardScheme getScheme() {
      return new TGroupStandardScheme();
    }
  }

  private static class TGroupStandardScheme extends StandardScheme<TGroup> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MYID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.myid = iprot.readI32();
              struct.setMyidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupName = iprot.readString();
              struct.setGroupNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORGANIZE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.organizeId = iprot.readI32();
              struct.setOrganizeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TEACHER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.teacherId = iprot.readI32();
              struct.setTeacherIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ASSISTANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.assistantId = iprot.readI32();
              struct.setAssistantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GROUP_REMARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupRemarks = iprot.readString();
              struct.setGroupRemarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ANNOUNCEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.announcement = iprot.readString();
              struct.setAnnouncementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createAt = iprot.readString();
              struct.setCreateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPDATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateAt = iprot.readString();
              struct.setUpdateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.active = iprot.readBool();
              struct.setActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TEACHER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teacherName = iprot.readString();
              struct.setTeacherNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TEACHER_OBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.teacherObj = new TTeacher();
              struct.teacherObj.read(iprot);
              struct.setTeacherObjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TGroup struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MYID_FIELD_DESC);
      oprot.writeI32(struct.myid);
      oprot.writeFieldEnd();
      if (struct.groupName != null) {
        oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
        oprot.writeString(struct.groupName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORGANIZE_ID_FIELD_DESC);
      oprot.writeI32(struct.organizeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEACHER_ID_FIELD_DESC);
      oprot.writeI32(struct.teacherId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASSISTANT_ID_FIELD_DESC);
      oprot.writeI32(struct.assistantId);
      oprot.writeFieldEnd();
      if (struct.groupRemarks != null) {
        oprot.writeFieldBegin(GROUP_REMARKS_FIELD_DESC);
        oprot.writeString(struct.groupRemarks);
        oprot.writeFieldEnd();
      }
      if (struct.announcement != null) {
        oprot.writeFieldBegin(ANNOUNCEMENT_FIELD_DESC);
        oprot.writeString(struct.announcement);
        oprot.writeFieldEnd();
      }
      if (struct.createAt != null) {
        oprot.writeFieldBegin(CREATE_AT_FIELD_DESC);
        oprot.writeString(struct.createAt);
        oprot.writeFieldEnd();
      }
      if (struct.updateAt != null) {
        oprot.writeFieldBegin(UPDATE_AT_FIELD_DESC);
        oprot.writeString(struct.updateAt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACTIVE_FIELD_DESC);
      oprot.writeBool(struct.active);
      oprot.writeFieldEnd();
      if (struct.teacherName != null) {
        oprot.writeFieldBegin(TEACHER_NAME_FIELD_DESC);
        oprot.writeString(struct.teacherName);
        oprot.writeFieldEnd();
      }
      if (struct.teacherObj != null) {
        oprot.writeFieldBegin(TEACHER_OBJ_FIELD_DESC);
        struct.teacherObj.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGroupTupleSchemeFactory implements SchemeFactory {
    public TGroupTupleScheme getScheme() {
      return new TGroupTupleScheme();
    }
  }

  private static class TGroupTupleScheme extends TupleScheme<TGroup> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMyid()) {
        optionals.set(0);
      }
      if (struct.isSetGroupName()) {
        optionals.set(1);
      }
      if (struct.isSetOrganizeId()) {
        optionals.set(2);
      }
      if (struct.isSetTeacherId()) {
        optionals.set(3);
      }
      if (struct.isSetAssistantId()) {
        optionals.set(4);
      }
      if (struct.isSetGroupRemarks()) {
        optionals.set(5);
      }
      if (struct.isSetAnnouncement()) {
        optionals.set(6);
      }
      if (struct.isSetCreateAt()) {
        optionals.set(7);
      }
      if (struct.isSetUpdateAt()) {
        optionals.set(8);
      }
      if (struct.isSetActive()) {
        optionals.set(9);
      }
      if (struct.isSetTeacherName()) {
        optionals.set(10);
      }
      if (struct.isSetTeacherObj()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetMyid()) {
        oprot.writeI32(struct.myid);
      }
      if (struct.isSetGroupName()) {
        oprot.writeString(struct.groupName);
      }
      if (struct.isSetOrganizeId()) {
        oprot.writeI32(struct.organizeId);
      }
      if (struct.isSetTeacherId()) {
        oprot.writeI32(struct.teacherId);
      }
      if (struct.isSetAssistantId()) {
        oprot.writeI32(struct.assistantId);
      }
      if (struct.isSetGroupRemarks()) {
        oprot.writeString(struct.groupRemarks);
      }
      if (struct.isSetAnnouncement()) {
        oprot.writeString(struct.announcement);
      }
      if (struct.isSetCreateAt()) {
        oprot.writeString(struct.createAt);
      }
      if (struct.isSetUpdateAt()) {
        oprot.writeString(struct.updateAt);
      }
      if (struct.isSetActive()) {
        oprot.writeBool(struct.active);
      }
      if (struct.isSetTeacherName()) {
        oprot.writeString(struct.teacherName);
      }
      if (struct.isSetTeacherObj()) {
        struct.teacherObj.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.myid = iprot.readI32();
        struct.setMyidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.groupName = iprot.readString();
        struct.setGroupNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.organizeId = iprot.readI32();
        struct.setOrganizeIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.teacherId = iprot.readI32();
        struct.setTeacherIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.assistantId = iprot.readI32();
        struct.setAssistantIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.groupRemarks = iprot.readString();
        struct.setGroupRemarksIsSet(true);
      }
      if (incoming.get(6)) {
        struct.announcement = iprot.readString();
        struct.setAnnouncementIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createAt = iprot.readString();
        struct.setCreateAtIsSet(true);
      }
      if (incoming.get(8)) {
        struct.updateAt = iprot.readString();
        struct.setUpdateAtIsSet(true);
      }
      if (incoming.get(9)) {
        struct.active = iprot.readBool();
        struct.setActiveIsSet(true);
      }
      if (incoming.get(10)) {
        struct.teacherName = iprot.readString();
        struct.setTeacherNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.teacherObj = new TTeacher();
        struct.teacherObj.read(iprot);
        struct.setTeacherObjIsSet(true);
      }
    }
  }

}

