/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.plaso.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TUserService {

  public interface Iface {

    public void ping(String access_token) throws TPlasoException, org.apache.thrift.TException;

    public TStudent student_login(String username, String password) throws TPlasoException, org.apache.thrift.TException;

    public TStudent student_register(TStudent student) throws TPlasoException, org.apache.thrift.TException;

    public TStudent student_getUserByStudentNumber(String studentNumber, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public TStudent student_getUserByloginName(String loginname, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public TStudent student_doUpdate(TStudent student, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public TStudent student_getUserById(int id, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public List<TStudent> student_getAll(int fromRecordNumber, int toRecordNumber, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public boolean student_logout(String access_token) throws TPlasoException, org.apache.thrift.TException;

    public boolean student_delete(int id, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public boolean student_updatepassword(int id, String password, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public TTeacher teacher_login(String username, String password) throws TPlasoException, org.apache.thrift.TException;

    public TTeacher teacher_register(TTeacher teacher) throws TPlasoException, org.apache.thrift.TException;

    public TTeacher teacher_getUserById(int id, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public TTeacher teacher_getUserByloginName(String loginname, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public TTeacher teacher_doUpdate(TTeacher teacher, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public List<TTeacher> teacher_getAll(int fromRecordNumber, int toRecordNumber, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public boolean teacher_logout(String access_token) throws TPlasoException, org.apache.thrift.TException;

    public boolean teacher_delete(int id, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public boolean teacher_updatepassword(int id, String password, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public String download_geturl(String code) throws TPlasoException, org.apache.thrift.TException;

    public TUserTypeReturn user_getType(String loginname, String access_token) throws TPlasoException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void student_login(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void student_register(TStudent student, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void student_getUserByStudentNumber(String studentNumber, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void student_getUserByloginName(String loginname, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void student_doUpdate(TStudent student, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void student_getUserById(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void student_getAll(int fromRecordNumber, int toRecordNumber, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void student_logout(String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void student_delete(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void student_updatepassword(int id, String password, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void teacher_login(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void teacher_register(TTeacher teacher, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void teacher_getUserById(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void teacher_getUserByloginName(String loginname, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void teacher_doUpdate(TTeacher teacher, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void teacher_getAll(int fromRecordNumber, int toRecordNumber, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void teacher_logout(String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void teacher_delete(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void teacher_updatepassword(int id, String password, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void download_geturl(String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void user_getType(String loginname, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void ping(String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_ping(access_token);
      recv_ping();
    }

    public void send_ping(String access_token) throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      args.setAccess_token(access_token);
      sendBase("ping", args);
    }

    public void recv_ping() throws TPlasoException, org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.myerror != null) {
        throw result.myerror;
      }
      return;
    }

    public TStudent student_login(String username, String password) throws TPlasoException, org.apache.thrift.TException
    {
      send_student_login(username, password);
      return recv_student_login();
    }

    public void send_student_login(String username, String password) throws org.apache.thrift.TException
    {
      student_login_args args = new student_login_args();
      args.setUsername(username);
      args.setPassword(password);
      sendBase("student_login", args);
    }

    public TStudent recv_student_login() throws TPlasoException, org.apache.thrift.TException
    {
      student_login_result result = new student_login_result();
      receiveBase(result, "student_login");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "student_login failed: unknown result");
    }

    public TStudent student_register(TStudent student) throws TPlasoException, org.apache.thrift.TException
    {
      send_student_register(student);
      return recv_student_register();
    }

    public void send_student_register(TStudent student) throws org.apache.thrift.TException
    {
      student_register_args args = new student_register_args();
      args.setStudent(student);
      sendBase("student_register", args);
    }

    public TStudent recv_student_register() throws TPlasoException, org.apache.thrift.TException
    {
      student_register_result result = new student_register_result();
      receiveBase(result, "student_register");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "student_register failed: unknown result");
    }

    public TStudent student_getUserByStudentNumber(String studentNumber, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_student_getUserByStudentNumber(studentNumber, access_token);
      return recv_student_getUserByStudentNumber();
    }

    public void send_student_getUserByStudentNumber(String studentNumber, String access_token) throws org.apache.thrift.TException
    {
      student_getUserByStudentNumber_args args = new student_getUserByStudentNumber_args();
      args.setStudentNumber(studentNumber);
      args.setAccess_token(access_token);
      sendBase("student_getUserByStudentNumber", args);
    }

    public TStudent recv_student_getUserByStudentNumber() throws TPlasoException, org.apache.thrift.TException
    {
      student_getUserByStudentNumber_result result = new student_getUserByStudentNumber_result();
      receiveBase(result, "student_getUserByStudentNumber");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "student_getUserByStudentNumber failed: unknown result");
    }

    public TStudent student_getUserByloginName(String loginname, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_student_getUserByloginName(loginname, access_token);
      return recv_student_getUserByloginName();
    }

    public void send_student_getUserByloginName(String loginname, String access_token) throws org.apache.thrift.TException
    {
      student_getUserByloginName_args args = new student_getUserByloginName_args();
      args.setLoginname(loginname);
      args.setAccess_token(access_token);
      sendBase("student_getUserByloginName", args);
    }

    public TStudent recv_student_getUserByloginName() throws TPlasoException, org.apache.thrift.TException
    {
      student_getUserByloginName_result result = new student_getUserByloginName_result();
      receiveBase(result, "student_getUserByloginName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "student_getUserByloginName failed: unknown result");
    }

    public TStudent student_doUpdate(TStudent student, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_student_doUpdate(student, access_token);
      return recv_student_doUpdate();
    }

    public void send_student_doUpdate(TStudent student, String access_token) throws org.apache.thrift.TException
    {
      student_doUpdate_args args = new student_doUpdate_args();
      args.setStudent(student);
      args.setAccess_token(access_token);
      sendBase("student_doUpdate", args);
    }

    public TStudent recv_student_doUpdate() throws TPlasoException, org.apache.thrift.TException
    {
      student_doUpdate_result result = new student_doUpdate_result();
      receiveBase(result, "student_doUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "student_doUpdate failed: unknown result");
    }

    public TStudent student_getUserById(int id, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_student_getUserById(id, access_token);
      return recv_student_getUserById();
    }

    public void send_student_getUserById(int id, String access_token) throws org.apache.thrift.TException
    {
      student_getUserById_args args = new student_getUserById_args();
      args.setId(id);
      args.setAccess_token(access_token);
      sendBase("student_getUserById", args);
    }

    public TStudent recv_student_getUserById() throws TPlasoException, org.apache.thrift.TException
    {
      student_getUserById_result result = new student_getUserById_result();
      receiveBase(result, "student_getUserById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "student_getUserById failed: unknown result");
    }

    public List<TStudent> student_getAll(int fromRecordNumber, int toRecordNumber, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_student_getAll(fromRecordNumber, toRecordNumber, access_token);
      return recv_student_getAll();
    }

    public void send_student_getAll(int fromRecordNumber, int toRecordNumber, String access_token) throws org.apache.thrift.TException
    {
      student_getAll_args args = new student_getAll_args();
      args.setFromRecordNumber(fromRecordNumber);
      args.setToRecordNumber(toRecordNumber);
      args.setAccess_token(access_token);
      sendBase("student_getAll", args);
    }

    public List<TStudent> recv_student_getAll() throws TPlasoException, org.apache.thrift.TException
    {
      student_getAll_result result = new student_getAll_result();
      receiveBase(result, "student_getAll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "student_getAll failed: unknown result");
    }

    public boolean student_logout(String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_student_logout(access_token);
      return recv_student_logout();
    }

    public void send_student_logout(String access_token) throws org.apache.thrift.TException
    {
      student_logout_args args = new student_logout_args();
      args.setAccess_token(access_token);
      sendBase("student_logout", args);
    }

    public boolean recv_student_logout() throws TPlasoException, org.apache.thrift.TException
    {
      student_logout_result result = new student_logout_result();
      receiveBase(result, "student_logout");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "student_logout failed: unknown result");
    }

    public boolean student_delete(int id, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_student_delete(id, access_token);
      return recv_student_delete();
    }

    public void send_student_delete(int id, String access_token) throws org.apache.thrift.TException
    {
      student_delete_args args = new student_delete_args();
      args.setId(id);
      args.setAccess_token(access_token);
      sendBase("student_delete", args);
    }

    public boolean recv_student_delete() throws TPlasoException, org.apache.thrift.TException
    {
      student_delete_result result = new student_delete_result();
      receiveBase(result, "student_delete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "student_delete failed: unknown result");
    }

    public boolean student_updatepassword(int id, String password, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_student_updatepassword(id, password, access_token);
      return recv_student_updatepassword();
    }

    public void send_student_updatepassword(int id, String password, String access_token) throws org.apache.thrift.TException
    {
      student_updatepassword_args args = new student_updatepassword_args();
      args.setId(id);
      args.setPassword(password);
      args.setAccess_token(access_token);
      sendBase("student_updatepassword", args);
    }

    public boolean recv_student_updatepassword() throws TPlasoException, org.apache.thrift.TException
    {
      student_updatepassword_result result = new student_updatepassword_result();
      receiveBase(result, "student_updatepassword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "student_updatepassword failed: unknown result");
    }

    public TTeacher teacher_login(String username, String password) throws TPlasoException, org.apache.thrift.TException
    {
      send_teacher_login(username, password);
      return recv_teacher_login();
    }

    public void send_teacher_login(String username, String password) throws org.apache.thrift.TException
    {
      teacher_login_args args = new teacher_login_args();
      args.setUsername(username);
      args.setPassword(password);
      sendBase("teacher_login", args);
    }

    public TTeacher recv_teacher_login() throws TPlasoException, org.apache.thrift.TException
    {
      teacher_login_result result = new teacher_login_result();
      receiveBase(result, "teacher_login");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "teacher_login failed: unknown result");
    }

    public TTeacher teacher_register(TTeacher teacher) throws TPlasoException, org.apache.thrift.TException
    {
      send_teacher_register(teacher);
      return recv_teacher_register();
    }

    public void send_teacher_register(TTeacher teacher) throws org.apache.thrift.TException
    {
      teacher_register_args args = new teacher_register_args();
      args.setTeacher(teacher);
      sendBase("teacher_register", args);
    }

    public TTeacher recv_teacher_register() throws TPlasoException, org.apache.thrift.TException
    {
      teacher_register_result result = new teacher_register_result();
      receiveBase(result, "teacher_register");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "teacher_register failed: unknown result");
    }

    public TTeacher teacher_getUserById(int id, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_teacher_getUserById(id, access_token);
      return recv_teacher_getUserById();
    }

    public void send_teacher_getUserById(int id, String access_token) throws org.apache.thrift.TException
    {
      teacher_getUserById_args args = new teacher_getUserById_args();
      args.setId(id);
      args.setAccess_token(access_token);
      sendBase("teacher_getUserById", args);
    }

    public TTeacher recv_teacher_getUserById() throws TPlasoException, org.apache.thrift.TException
    {
      teacher_getUserById_result result = new teacher_getUserById_result();
      receiveBase(result, "teacher_getUserById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "teacher_getUserById failed: unknown result");
    }

    public TTeacher teacher_getUserByloginName(String loginname, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_teacher_getUserByloginName(loginname, access_token);
      return recv_teacher_getUserByloginName();
    }

    public void send_teacher_getUserByloginName(String loginname, String access_token) throws org.apache.thrift.TException
    {
      teacher_getUserByloginName_args args = new teacher_getUserByloginName_args();
      args.setLoginname(loginname);
      args.setAccess_token(access_token);
      sendBase("teacher_getUserByloginName", args);
    }

    public TTeacher recv_teacher_getUserByloginName() throws TPlasoException, org.apache.thrift.TException
    {
      teacher_getUserByloginName_result result = new teacher_getUserByloginName_result();
      receiveBase(result, "teacher_getUserByloginName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "teacher_getUserByloginName failed: unknown result");
    }

    public TTeacher teacher_doUpdate(TTeacher teacher, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_teacher_doUpdate(teacher, access_token);
      return recv_teacher_doUpdate();
    }

    public void send_teacher_doUpdate(TTeacher teacher, String access_token) throws org.apache.thrift.TException
    {
      teacher_doUpdate_args args = new teacher_doUpdate_args();
      args.setTeacher(teacher);
      args.setAccess_token(access_token);
      sendBase("teacher_doUpdate", args);
    }

    public TTeacher recv_teacher_doUpdate() throws TPlasoException, org.apache.thrift.TException
    {
      teacher_doUpdate_result result = new teacher_doUpdate_result();
      receiveBase(result, "teacher_doUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "teacher_doUpdate failed: unknown result");
    }

    public List<TTeacher> teacher_getAll(int fromRecordNumber, int toRecordNumber, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_teacher_getAll(fromRecordNumber, toRecordNumber, access_token);
      return recv_teacher_getAll();
    }

    public void send_teacher_getAll(int fromRecordNumber, int toRecordNumber, String access_token) throws org.apache.thrift.TException
    {
      teacher_getAll_args args = new teacher_getAll_args();
      args.setFromRecordNumber(fromRecordNumber);
      args.setToRecordNumber(toRecordNumber);
      args.setAccess_token(access_token);
      sendBase("teacher_getAll", args);
    }

    public List<TTeacher> recv_teacher_getAll() throws TPlasoException, org.apache.thrift.TException
    {
      teacher_getAll_result result = new teacher_getAll_result();
      receiveBase(result, "teacher_getAll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "teacher_getAll failed: unknown result");
    }

    public boolean teacher_logout(String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_teacher_logout(access_token);
      return recv_teacher_logout();
    }

    public void send_teacher_logout(String access_token) throws org.apache.thrift.TException
    {
      teacher_logout_args args = new teacher_logout_args();
      args.setAccess_token(access_token);
      sendBase("teacher_logout", args);
    }

    public boolean recv_teacher_logout() throws TPlasoException, org.apache.thrift.TException
    {
      teacher_logout_result result = new teacher_logout_result();
      receiveBase(result, "teacher_logout");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "teacher_logout failed: unknown result");
    }

    public boolean teacher_delete(int id, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_teacher_delete(id, access_token);
      return recv_teacher_delete();
    }

    public void send_teacher_delete(int id, String access_token) throws org.apache.thrift.TException
    {
      teacher_delete_args args = new teacher_delete_args();
      args.setId(id);
      args.setAccess_token(access_token);
      sendBase("teacher_delete", args);
    }

    public boolean recv_teacher_delete() throws TPlasoException, org.apache.thrift.TException
    {
      teacher_delete_result result = new teacher_delete_result();
      receiveBase(result, "teacher_delete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "teacher_delete failed: unknown result");
    }

    public boolean teacher_updatepassword(int id, String password, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_teacher_updatepassword(id, password, access_token);
      return recv_teacher_updatepassword();
    }

    public void send_teacher_updatepassword(int id, String password, String access_token) throws org.apache.thrift.TException
    {
      teacher_updatepassword_args args = new teacher_updatepassword_args();
      args.setId(id);
      args.setPassword(password);
      args.setAccess_token(access_token);
      sendBase("teacher_updatepassword", args);
    }

    public boolean recv_teacher_updatepassword() throws TPlasoException, org.apache.thrift.TException
    {
      teacher_updatepassword_result result = new teacher_updatepassword_result();
      receiveBase(result, "teacher_updatepassword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "teacher_updatepassword failed: unknown result");
    }

    public String download_geturl(String code) throws TPlasoException, org.apache.thrift.TException
    {
      send_download_geturl(code);
      return recv_download_geturl();
    }

    public void send_download_geturl(String code) throws org.apache.thrift.TException
    {
      download_geturl_args args = new download_geturl_args();
      args.setCode(code);
      sendBase("download_geturl", args);
    }

    public String recv_download_geturl() throws TPlasoException, org.apache.thrift.TException
    {
      download_geturl_result result = new download_geturl_result();
      receiveBase(result, "download_geturl");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "download_geturl failed: unknown result");
    }

    public TUserTypeReturn user_getType(String loginname, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_user_getType(loginname, access_token);
      return recv_user_getType();
    }

    public void send_user_getType(String loginname, String access_token) throws org.apache.thrift.TException
    {
      user_getType_args args = new user_getType_args();
      args.setLoginname(loginname);
      args.setAccess_token(access_token);
      sendBase("user_getType", args);
    }

    public TUserTypeReturn recv_user_getType() throws TPlasoException, org.apache.thrift.TException
    {
      user_getType_result result = new user_getType_result();
      receiveBase(result, "user_getType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "user_getType failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String access_token;
      public ping_call(String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ping();
      }
    }

    public void student_login(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      student_login_call method_call = new student_login_call(username, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class student_login_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      private String password;
      public student_login_call(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("student_login", org.apache.thrift.protocol.TMessageType.CALL, 0));
        student_login_args args = new student_login_args();
        args.setUsername(username);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TStudent getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_student_login();
      }
    }

    public void student_register(TStudent student, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      student_register_call method_call = new student_register_call(student, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class student_register_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TStudent student;
      public student_register_call(TStudent student, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.student = student;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("student_register", org.apache.thrift.protocol.TMessageType.CALL, 0));
        student_register_args args = new student_register_args();
        args.setStudent(student);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TStudent getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_student_register();
      }
    }

    public void student_getUserByStudentNumber(String studentNumber, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      student_getUserByStudentNumber_call method_call = new student_getUserByStudentNumber_call(studentNumber, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class student_getUserByStudentNumber_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String studentNumber;
      private String access_token;
      public student_getUserByStudentNumber_call(String studentNumber, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.studentNumber = studentNumber;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("student_getUserByStudentNumber", org.apache.thrift.protocol.TMessageType.CALL, 0));
        student_getUserByStudentNumber_args args = new student_getUserByStudentNumber_args();
        args.setStudentNumber(studentNumber);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TStudent getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_student_getUserByStudentNumber();
      }
    }

    public void student_getUserByloginName(String loginname, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      student_getUserByloginName_call method_call = new student_getUserByloginName_call(loginname, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class student_getUserByloginName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String loginname;
      private String access_token;
      public student_getUserByloginName_call(String loginname, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loginname = loginname;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("student_getUserByloginName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        student_getUserByloginName_args args = new student_getUserByloginName_args();
        args.setLoginname(loginname);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TStudent getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_student_getUserByloginName();
      }
    }

    public void student_doUpdate(TStudent student, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      student_doUpdate_call method_call = new student_doUpdate_call(student, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class student_doUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TStudent student;
      private String access_token;
      public student_doUpdate_call(TStudent student, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.student = student;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("student_doUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        student_doUpdate_args args = new student_doUpdate_args();
        args.setStudent(student);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TStudent getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_student_doUpdate();
      }
    }

    public void student_getUserById(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      student_getUserById_call method_call = new student_getUserById_call(id, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class student_getUserById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      private String access_token;
      public student_getUserById_call(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("student_getUserById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        student_getUserById_args args = new student_getUserById_args();
        args.setId(id);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TStudent getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_student_getUserById();
      }
    }

    public void student_getAll(int fromRecordNumber, int toRecordNumber, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      student_getAll_call method_call = new student_getAll_call(fromRecordNumber, toRecordNumber, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class student_getAll_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int fromRecordNumber;
      private int toRecordNumber;
      private String access_token;
      public student_getAll_call(int fromRecordNumber, int toRecordNumber, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fromRecordNumber = fromRecordNumber;
        this.toRecordNumber = toRecordNumber;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("student_getAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        student_getAll_args args = new student_getAll_args();
        args.setFromRecordNumber(fromRecordNumber);
        args.setToRecordNumber(toRecordNumber);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TStudent> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_student_getAll();
      }
    }

    public void student_logout(String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      student_logout_call method_call = new student_logout_call(access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class student_logout_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String access_token;
      public student_logout_call(String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("student_logout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        student_logout_args args = new student_logout_args();
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_student_logout();
      }
    }

    public void student_delete(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      student_delete_call method_call = new student_delete_call(id, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class student_delete_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      private String access_token;
      public student_delete_call(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("student_delete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        student_delete_args args = new student_delete_args();
        args.setId(id);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_student_delete();
      }
    }

    public void student_updatepassword(int id, String password, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      student_updatepassword_call method_call = new student_updatepassword_call(id, password, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class student_updatepassword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      private String password;
      private String access_token;
      public student_updatepassword_call(int id, String password, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.password = password;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("student_updatepassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        student_updatepassword_args args = new student_updatepassword_args();
        args.setId(id);
        args.setPassword(password);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_student_updatepassword();
      }
    }

    public void teacher_login(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      teacher_login_call method_call = new teacher_login_call(username, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class teacher_login_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      private String password;
      public teacher_login_call(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("teacher_login", org.apache.thrift.protocol.TMessageType.CALL, 0));
        teacher_login_args args = new teacher_login_args();
        args.setUsername(username);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TTeacher getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_teacher_login();
      }
    }

    public void teacher_register(TTeacher teacher, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      teacher_register_call method_call = new teacher_register_call(teacher, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class teacher_register_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TTeacher teacher;
      public teacher_register_call(TTeacher teacher, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.teacher = teacher;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("teacher_register", org.apache.thrift.protocol.TMessageType.CALL, 0));
        teacher_register_args args = new teacher_register_args();
        args.setTeacher(teacher);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TTeacher getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_teacher_register();
      }
    }

    public void teacher_getUserById(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      teacher_getUserById_call method_call = new teacher_getUserById_call(id, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class teacher_getUserById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      private String access_token;
      public teacher_getUserById_call(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("teacher_getUserById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        teacher_getUserById_args args = new teacher_getUserById_args();
        args.setId(id);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TTeacher getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_teacher_getUserById();
      }
    }

    public void teacher_getUserByloginName(String loginname, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      teacher_getUserByloginName_call method_call = new teacher_getUserByloginName_call(loginname, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class teacher_getUserByloginName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String loginname;
      private String access_token;
      public teacher_getUserByloginName_call(String loginname, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loginname = loginname;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("teacher_getUserByloginName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        teacher_getUserByloginName_args args = new teacher_getUserByloginName_args();
        args.setLoginname(loginname);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TTeacher getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_teacher_getUserByloginName();
      }
    }

    public void teacher_doUpdate(TTeacher teacher, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      teacher_doUpdate_call method_call = new teacher_doUpdate_call(teacher, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class teacher_doUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TTeacher teacher;
      private String access_token;
      public teacher_doUpdate_call(TTeacher teacher, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.teacher = teacher;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("teacher_doUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        teacher_doUpdate_args args = new teacher_doUpdate_args();
        args.setTeacher(teacher);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TTeacher getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_teacher_doUpdate();
      }
    }

    public void teacher_getAll(int fromRecordNumber, int toRecordNumber, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      teacher_getAll_call method_call = new teacher_getAll_call(fromRecordNumber, toRecordNumber, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class teacher_getAll_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int fromRecordNumber;
      private int toRecordNumber;
      private String access_token;
      public teacher_getAll_call(int fromRecordNumber, int toRecordNumber, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fromRecordNumber = fromRecordNumber;
        this.toRecordNumber = toRecordNumber;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("teacher_getAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        teacher_getAll_args args = new teacher_getAll_args();
        args.setFromRecordNumber(fromRecordNumber);
        args.setToRecordNumber(toRecordNumber);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TTeacher> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_teacher_getAll();
      }
    }

    public void teacher_logout(String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      teacher_logout_call method_call = new teacher_logout_call(access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class teacher_logout_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String access_token;
      public teacher_logout_call(String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("teacher_logout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        teacher_logout_args args = new teacher_logout_args();
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_teacher_logout();
      }
    }

    public void teacher_delete(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      teacher_delete_call method_call = new teacher_delete_call(id, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class teacher_delete_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      private String access_token;
      public teacher_delete_call(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("teacher_delete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        teacher_delete_args args = new teacher_delete_args();
        args.setId(id);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_teacher_delete();
      }
    }

    public void teacher_updatepassword(int id, String password, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      teacher_updatepassword_call method_call = new teacher_updatepassword_call(id, password, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class teacher_updatepassword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      private String password;
      private String access_token;
      public teacher_updatepassword_call(int id, String password, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.password = password;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("teacher_updatepassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        teacher_updatepassword_args args = new teacher_updatepassword_args();
        args.setId(id);
        args.setPassword(password);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_teacher_updatepassword();
      }
    }

    public void download_geturl(String code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      download_geturl_call method_call = new download_geturl_call(code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class download_geturl_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      public download_geturl_call(String code, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("download_geturl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        download_geturl_args args = new download_geturl_args();
        args.setCode(code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_download_geturl();
      }
    }

    public void user_getType(String loginname, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_getType_call method_call = new user_getType_call(loginname, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_getType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String loginname;
      private String access_token;
      public user_getType_call(String loginname, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loginname = loginname;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_getType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_getType_args args = new user_getType_args();
        args.setLoginname(loginname);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TUserTypeReturn getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_user_getType();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("student_login", new student_login());
      processMap.put("student_register", new student_register());
      processMap.put("student_getUserByStudentNumber", new student_getUserByStudentNumber());
      processMap.put("student_getUserByloginName", new student_getUserByloginName());
      processMap.put("student_doUpdate", new student_doUpdate());
      processMap.put("student_getUserById", new student_getUserById());
      processMap.put("student_getAll", new student_getAll());
      processMap.put("student_logout", new student_logout());
      processMap.put("student_delete", new student_delete());
      processMap.put("student_updatepassword", new student_updatepassword());
      processMap.put("teacher_login", new teacher_login());
      processMap.put("teacher_register", new teacher_register());
      processMap.put("teacher_getUserById", new teacher_getUserById());
      processMap.put("teacher_getUserByloginName", new teacher_getUserByloginName());
      processMap.put("teacher_doUpdate", new teacher_doUpdate());
      processMap.put("teacher_getAll", new teacher_getAll());
      processMap.put("teacher_logout", new teacher_logout());
      processMap.put("teacher_delete", new teacher_delete());
      processMap.put("teacher_updatepassword", new teacher_updatepassword());
      processMap.put("download_geturl", new download_geturl());
      processMap.put("user_getType", new user_getType());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        try {
          iface.ping(args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class student_login<I extends Iface> extends org.apache.thrift.ProcessFunction<I, student_login_args> {
      public student_login() {
        super("student_login");
      }

      public student_login_args getEmptyArgsInstance() {
        return new student_login_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public student_login_result getResult(I iface, student_login_args args) throws org.apache.thrift.TException {
        student_login_result result = new student_login_result();
        try {
          result.success = iface.student_login(args.username, args.password);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class student_register<I extends Iface> extends org.apache.thrift.ProcessFunction<I, student_register_args> {
      public student_register() {
        super("student_register");
      }

      public student_register_args getEmptyArgsInstance() {
        return new student_register_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public student_register_result getResult(I iface, student_register_args args) throws org.apache.thrift.TException {
        student_register_result result = new student_register_result();
        try {
          result.success = iface.student_register(args.student);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class student_getUserByStudentNumber<I extends Iface> extends org.apache.thrift.ProcessFunction<I, student_getUserByStudentNumber_args> {
      public student_getUserByStudentNumber() {
        super("student_getUserByStudentNumber");
      }

      public student_getUserByStudentNumber_args getEmptyArgsInstance() {
        return new student_getUserByStudentNumber_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public student_getUserByStudentNumber_result getResult(I iface, student_getUserByStudentNumber_args args) throws org.apache.thrift.TException {
        student_getUserByStudentNumber_result result = new student_getUserByStudentNumber_result();
        try {
          result.success = iface.student_getUserByStudentNumber(args.studentNumber, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class student_getUserByloginName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, student_getUserByloginName_args> {
      public student_getUserByloginName() {
        super("student_getUserByloginName");
      }

      public student_getUserByloginName_args getEmptyArgsInstance() {
        return new student_getUserByloginName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public student_getUserByloginName_result getResult(I iface, student_getUserByloginName_args args) throws org.apache.thrift.TException {
        student_getUserByloginName_result result = new student_getUserByloginName_result();
        try {
          result.success = iface.student_getUserByloginName(args.loginname, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class student_doUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, student_doUpdate_args> {
      public student_doUpdate() {
        super("student_doUpdate");
      }

      public student_doUpdate_args getEmptyArgsInstance() {
        return new student_doUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public student_doUpdate_result getResult(I iface, student_doUpdate_args args) throws org.apache.thrift.TException {
        student_doUpdate_result result = new student_doUpdate_result();
        try {
          result.success = iface.student_doUpdate(args.student, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class student_getUserById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, student_getUserById_args> {
      public student_getUserById() {
        super("student_getUserById");
      }

      public student_getUserById_args getEmptyArgsInstance() {
        return new student_getUserById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public student_getUserById_result getResult(I iface, student_getUserById_args args) throws org.apache.thrift.TException {
        student_getUserById_result result = new student_getUserById_result();
        try {
          result.success = iface.student_getUserById(args.id, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class student_getAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, student_getAll_args> {
      public student_getAll() {
        super("student_getAll");
      }

      public student_getAll_args getEmptyArgsInstance() {
        return new student_getAll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public student_getAll_result getResult(I iface, student_getAll_args args) throws org.apache.thrift.TException {
        student_getAll_result result = new student_getAll_result();
        try {
          result.success = iface.student_getAll(args.fromRecordNumber, args.toRecordNumber, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class student_logout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, student_logout_args> {
      public student_logout() {
        super("student_logout");
      }

      public student_logout_args getEmptyArgsInstance() {
        return new student_logout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public student_logout_result getResult(I iface, student_logout_args args) throws org.apache.thrift.TException {
        student_logout_result result = new student_logout_result();
        try {
          result.success = iface.student_logout(args.access_token);
          result.setSuccessIsSet(true);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class student_delete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, student_delete_args> {
      public student_delete() {
        super("student_delete");
      }

      public student_delete_args getEmptyArgsInstance() {
        return new student_delete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public student_delete_result getResult(I iface, student_delete_args args) throws org.apache.thrift.TException {
        student_delete_result result = new student_delete_result();
        try {
          result.success = iface.student_delete(args.id, args.access_token);
          result.setSuccessIsSet(true);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class student_updatepassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, student_updatepassword_args> {
      public student_updatepassword() {
        super("student_updatepassword");
      }

      public student_updatepassword_args getEmptyArgsInstance() {
        return new student_updatepassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public student_updatepassword_result getResult(I iface, student_updatepassword_args args) throws org.apache.thrift.TException {
        student_updatepassword_result result = new student_updatepassword_result();
        try {
          result.success = iface.student_updatepassword(args.id, args.password, args.access_token);
          result.setSuccessIsSet(true);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class teacher_login<I extends Iface> extends org.apache.thrift.ProcessFunction<I, teacher_login_args> {
      public teacher_login() {
        super("teacher_login");
      }

      public teacher_login_args getEmptyArgsInstance() {
        return new teacher_login_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public teacher_login_result getResult(I iface, teacher_login_args args) throws org.apache.thrift.TException {
        teacher_login_result result = new teacher_login_result();
        try {
          result.success = iface.teacher_login(args.username, args.password);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class teacher_register<I extends Iface> extends org.apache.thrift.ProcessFunction<I, teacher_register_args> {
      public teacher_register() {
        super("teacher_register");
      }

      public teacher_register_args getEmptyArgsInstance() {
        return new teacher_register_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public teacher_register_result getResult(I iface, teacher_register_args args) throws org.apache.thrift.TException {
        teacher_register_result result = new teacher_register_result();
        try {
          result.success = iface.teacher_register(args.teacher);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class teacher_getUserById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, teacher_getUserById_args> {
      public teacher_getUserById() {
        super("teacher_getUserById");
      }

      public teacher_getUserById_args getEmptyArgsInstance() {
        return new teacher_getUserById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public teacher_getUserById_result getResult(I iface, teacher_getUserById_args args) throws org.apache.thrift.TException {
        teacher_getUserById_result result = new teacher_getUserById_result();
        try {
          result.success = iface.teacher_getUserById(args.id, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class teacher_getUserByloginName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, teacher_getUserByloginName_args> {
      public teacher_getUserByloginName() {
        super("teacher_getUserByloginName");
      }

      public teacher_getUserByloginName_args getEmptyArgsInstance() {
        return new teacher_getUserByloginName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public teacher_getUserByloginName_result getResult(I iface, teacher_getUserByloginName_args args) throws org.apache.thrift.TException {
        teacher_getUserByloginName_result result = new teacher_getUserByloginName_result();
        try {
          result.success = iface.teacher_getUserByloginName(args.loginname, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class teacher_doUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, teacher_doUpdate_args> {
      public teacher_doUpdate() {
        super("teacher_doUpdate");
      }

      public teacher_doUpdate_args getEmptyArgsInstance() {
        return new teacher_doUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public teacher_doUpdate_result getResult(I iface, teacher_doUpdate_args args) throws org.apache.thrift.TException {
        teacher_doUpdate_result result = new teacher_doUpdate_result();
        try {
          result.success = iface.teacher_doUpdate(args.teacher, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class teacher_getAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, teacher_getAll_args> {
      public teacher_getAll() {
        super("teacher_getAll");
      }

      public teacher_getAll_args getEmptyArgsInstance() {
        return new teacher_getAll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public teacher_getAll_result getResult(I iface, teacher_getAll_args args) throws org.apache.thrift.TException {
        teacher_getAll_result result = new teacher_getAll_result();
        try {
          result.success = iface.teacher_getAll(args.fromRecordNumber, args.toRecordNumber, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class teacher_logout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, teacher_logout_args> {
      public teacher_logout() {
        super("teacher_logout");
      }

      public teacher_logout_args getEmptyArgsInstance() {
        return new teacher_logout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public teacher_logout_result getResult(I iface, teacher_logout_args args) throws org.apache.thrift.TException {
        teacher_logout_result result = new teacher_logout_result();
        try {
          result.success = iface.teacher_logout(args.access_token);
          result.setSuccessIsSet(true);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class teacher_delete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, teacher_delete_args> {
      public teacher_delete() {
        super("teacher_delete");
      }

      public teacher_delete_args getEmptyArgsInstance() {
        return new teacher_delete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public teacher_delete_result getResult(I iface, teacher_delete_args args) throws org.apache.thrift.TException {
        teacher_delete_result result = new teacher_delete_result();
        try {
          result.success = iface.teacher_delete(args.id, args.access_token);
          result.setSuccessIsSet(true);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class teacher_updatepassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, teacher_updatepassword_args> {
      public teacher_updatepassword() {
        super("teacher_updatepassword");
      }

      public teacher_updatepassword_args getEmptyArgsInstance() {
        return new teacher_updatepassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public teacher_updatepassword_result getResult(I iface, teacher_updatepassword_args args) throws org.apache.thrift.TException {
        teacher_updatepassword_result result = new teacher_updatepassword_result();
        try {
          result.success = iface.teacher_updatepassword(args.id, args.password, args.access_token);
          result.setSuccessIsSet(true);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class download_geturl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, download_geturl_args> {
      public download_geturl() {
        super("download_geturl");
      }

      public download_geturl_args getEmptyArgsInstance() {
        return new download_geturl_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public download_geturl_result getResult(I iface, download_geturl_args args) throws org.apache.thrift.TException {
        download_geturl_result result = new download_geturl_result();
        try {
          result.success = iface.download_geturl(args.code);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class user_getType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_getType_args> {
      public user_getType() {
        super("user_getType");
      }

      public user_getType_args getEmptyArgsInstance() {
        return new user_getType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public user_getType_result getResult(I iface, user_getType_args args) throws org.apache.thrift.TException {
        user_getType_result result = new user_getType_result();
        try {
          result.success = iface.user_getType(args.loginname, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("student_login", new student_login());
      processMap.put("student_register", new student_register());
      processMap.put("student_getUserByStudentNumber", new student_getUserByStudentNumber());
      processMap.put("student_getUserByloginName", new student_getUserByloginName());
      processMap.put("student_doUpdate", new student_doUpdate());
      processMap.put("student_getUserById", new student_getUserById());
      processMap.put("student_getAll", new student_getAll());
      processMap.put("student_logout", new student_logout());
      processMap.put("student_delete", new student_delete());
      processMap.put("student_updatepassword", new student_updatepassword());
      processMap.put("teacher_login", new teacher_login());
      processMap.put("teacher_register", new teacher_register());
      processMap.put("teacher_getUserById", new teacher_getUserById());
      processMap.put("teacher_getUserByloginName", new teacher_getUserByloginName());
      processMap.put("teacher_doUpdate", new teacher_doUpdate());
      processMap.put("teacher_getAll", new teacher_getAll());
      processMap.put("teacher_logout", new teacher_logout());
      processMap.put("teacher_delete", new teacher_delete());
      processMap.put("teacher_updatepassword", new teacher_updatepassword());
      processMap.put("download_geturl", new download_geturl());
      processMap.put("user_getType", new user_getType());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Void> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ping_result result = new ping_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.ping(args.access_token,resultHandler);
      }
    }

    public static class student_login<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, student_login_args, TStudent> {
      public student_login() {
        super("student_login");
      }

      public student_login_args getEmptyArgsInstance() {
        return new student_login_args();
      }

      public AsyncMethodCallback<TStudent> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TStudent>() { 
          public void onComplete(TStudent o) {
            student_login_result result = new student_login_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            student_login_result result = new student_login_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, student_login_args args, org.apache.thrift.async.AsyncMethodCallback<TStudent> resultHandler) throws TException {
        iface.student_login(args.username, args.password,resultHandler);
      }
    }

    public static class student_register<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, student_register_args, TStudent> {
      public student_register() {
        super("student_register");
      }

      public student_register_args getEmptyArgsInstance() {
        return new student_register_args();
      }

      public AsyncMethodCallback<TStudent> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TStudent>() { 
          public void onComplete(TStudent o) {
            student_register_result result = new student_register_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            student_register_result result = new student_register_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, student_register_args args, org.apache.thrift.async.AsyncMethodCallback<TStudent> resultHandler) throws TException {
        iface.student_register(args.student,resultHandler);
      }
    }

    public static class student_getUserByStudentNumber<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, student_getUserByStudentNumber_args, TStudent> {
      public student_getUserByStudentNumber() {
        super("student_getUserByStudentNumber");
      }

      public student_getUserByStudentNumber_args getEmptyArgsInstance() {
        return new student_getUserByStudentNumber_args();
      }

      public AsyncMethodCallback<TStudent> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TStudent>() { 
          public void onComplete(TStudent o) {
            student_getUserByStudentNumber_result result = new student_getUserByStudentNumber_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            student_getUserByStudentNumber_result result = new student_getUserByStudentNumber_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, student_getUserByStudentNumber_args args, org.apache.thrift.async.AsyncMethodCallback<TStudent> resultHandler) throws TException {
        iface.student_getUserByStudentNumber(args.studentNumber, args.access_token,resultHandler);
      }
    }

    public static class student_getUserByloginName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, student_getUserByloginName_args, TStudent> {
      public student_getUserByloginName() {
        super("student_getUserByloginName");
      }

      public student_getUserByloginName_args getEmptyArgsInstance() {
        return new student_getUserByloginName_args();
      }

      public AsyncMethodCallback<TStudent> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TStudent>() { 
          public void onComplete(TStudent o) {
            student_getUserByloginName_result result = new student_getUserByloginName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            student_getUserByloginName_result result = new student_getUserByloginName_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, student_getUserByloginName_args args, org.apache.thrift.async.AsyncMethodCallback<TStudent> resultHandler) throws TException {
        iface.student_getUserByloginName(args.loginname, args.access_token,resultHandler);
      }
    }

    public static class student_doUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, student_doUpdate_args, TStudent> {
      public student_doUpdate() {
        super("student_doUpdate");
      }

      public student_doUpdate_args getEmptyArgsInstance() {
        return new student_doUpdate_args();
      }

      public AsyncMethodCallback<TStudent> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TStudent>() { 
          public void onComplete(TStudent o) {
            student_doUpdate_result result = new student_doUpdate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            student_doUpdate_result result = new student_doUpdate_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, student_doUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<TStudent> resultHandler) throws TException {
        iface.student_doUpdate(args.student, args.access_token,resultHandler);
      }
    }

    public static class student_getUserById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, student_getUserById_args, TStudent> {
      public student_getUserById() {
        super("student_getUserById");
      }

      public student_getUserById_args getEmptyArgsInstance() {
        return new student_getUserById_args();
      }

      public AsyncMethodCallback<TStudent> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TStudent>() { 
          public void onComplete(TStudent o) {
            student_getUserById_result result = new student_getUserById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            student_getUserById_result result = new student_getUserById_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, student_getUserById_args args, org.apache.thrift.async.AsyncMethodCallback<TStudent> resultHandler) throws TException {
        iface.student_getUserById(args.id, args.access_token,resultHandler);
      }
    }

    public static class student_getAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, student_getAll_args, List<TStudent>> {
      public student_getAll() {
        super("student_getAll");
      }

      public student_getAll_args getEmptyArgsInstance() {
        return new student_getAll_args();
      }

      public AsyncMethodCallback<List<TStudent>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TStudent>>() { 
          public void onComplete(List<TStudent> o) {
            student_getAll_result result = new student_getAll_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            student_getAll_result result = new student_getAll_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, student_getAll_args args, org.apache.thrift.async.AsyncMethodCallback<List<TStudent>> resultHandler) throws TException {
        iface.student_getAll(args.fromRecordNumber, args.toRecordNumber, args.access_token,resultHandler);
      }
    }

    public static class student_logout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, student_logout_args, Boolean> {
      public student_logout() {
        super("student_logout");
      }

      public student_logout_args getEmptyArgsInstance() {
        return new student_logout_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            student_logout_result result = new student_logout_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            student_logout_result result = new student_logout_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, student_logout_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.student_logout(args.access_token,resultHandler);
      }
    }

    public static class student_delete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, student_delete_args, Boolean> {
      public student_delete() {
        super("student_delete");
      }

      public student_delete_args getEmptyArgsInstance() {
        return new student_delete_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            student_delete_result result = new student_delete_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            student_delete_result result = new student_delete_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, student_delete_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.student_delete(args.id, args.access_token,resultHandler);
      }
    }

    public static class student_updatepassword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, student_updatepassword_args, Boolean> {
      public student_updatepassword() {
        super("student_updatepassword");
      }

      public student_updatepassword_args getEmptyArgsInstance() {
        return new student_updatepassword_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            student_updatepassword_result result = new student_updatepassword_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            student_updatepassword_result result = new student_updatepassword_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, student_updatepassword_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.student_updatepassword(args.id, args.password, args.access_token,resultHandler);
      }
    }

    public static class teacher_login<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, teacher_login_args, TTeacher> {
      public teacher_login() {
        super("teacher_login");
      }

      public teacher_login_args getEmptyArgsInstance() {
        return new teacher_login_args();
      }

      public AsyncMethodCallback<TTeacher> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TTeacher>() { 
          public void onComplete(TTeacher o) {
            teacher_login_result result = new teacher_login_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            teacher_login_result result = new teacher_login_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, teacher_login_args args, org.apache.thrift.async.AsyncMethodCallback<TTeacher> resultHandler) throws TException {
        iface.teacher_login(args.username, args.password,resultHandler);
      }
    }

    public static class teacher_register<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, teacher_register_args, TTeacher> {
      public teacher_register() {
        super("teacher_register");
      }

      public teacher_register_args getEmptyArgsInstance() {
        return new teacher_register_args();
      }

      public AsyncMethodCallback<TTeacher> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TTeacher>() { 
          public void onComplete(TTeacher o) {
            teacher_register_result result = new teacher_register_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            teacher_register_result result = new teacher_register_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, teacher_register_args args, org.apache.thrift.async.AsyncMethodCallback<TTeacher> resultHandler) throws TException {
        iface.teacher_register(args.teacher,resultHandler);
      }
    }

    public static class teacher_getUserById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, teacher_getUserById_args, TTeacher> {
      public teacher_getUserById() {
        super("teacher_getUserById");
      }

      public teacher_getUserById_args getEmptyArgsInstance() {
        return new teacher_getUserById_args();
      }

      public AsyncMethodCallback<TTeacher> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TTeacher>() { 
          public void onComplete(TTeacher o) {
            teacher_getUserById_result result = new teacher_getUserById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            teacher_getUserById_result result = new teacher_getUserById_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, teacher_getUserById_args args, org.apache.thrift.async.AsyncMethodCallback<TTeacher> resultHandler) throws TException {
        iface.teacher_getUserById(args.id, args.access_token,resultHandler);
      }
    }

    public static class teacher_getUserByloginName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, teacher_getUserByloginName_args, TTeacher> {
      public teacher_getUserByloginName() {
        super("teacher_getUserByloginName");
      }

      public teacher_getUserByloginName_args getEmptyArgsInstance() {
        return new teacher_getUserByloginName_args();
      }

      public AsyncMethodCallback<TTeacher> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TTeacher>() { 
          public void onComplete(TTeacher o) {
            teacher_getUserByloginName_result result = new teacher_getUserByloginName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            teacher_getUserByloginName_result result = new teacher_getUserByloginName_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, teacher_getUserByloginName_args args, org.apache.thrift.async.AsyncMethodCallback<TTeacher> resultHandler) throws TException {
        iface.teacher_getUserByloginName(args.loginname, args.access_token,resultHandler);
      }
    }

    public static class teacher_doUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, teacher_doUpdate_args, TTeacher> {
      public teacher_doUpdate() {
        super("teacher_doUpdate");
      }

      public teacher_doUpdate_args getEmptyArgsInstance() {
        return new teacher_doUpdate_args();
      }

      public AsyncMethodCallback<TTeacher> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TTeacher>() { 
          public void onComplete(TTeacher o) {
            teacher_doUpdate_result result = new teacher_doUpdate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            teacher_doUpdate_result result = new teacher_doUpdate_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, teacher_doUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<TTeacher> resultHandler) throws TException {
        iface.teacher_doUpdate(args.teacher, args.access_token,resultHandler);
      }
    }

    public static class teacher_getAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, teacher_getAll_args, List<TTeacher>> {
      public teacher_getAll() {
        super("teacher_getAll");
      }

      public teacher_getAll_args getEmptyArgsInstance() {
        return new teacher_getAll_args();
      }

      public AsyncMethodCallback<List<TTeacher>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TTeacher>>() { 
          public void onComplete(List<TTeacher> o) {
            teacher_getAll_result result = new teacher_getAll_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            teacher_getAll_result result = new teacher_getAll_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, teacher_getAll_args args, org.apache.thrift.async.AsyncMethodCallback<List<TTeacher>> resultHandler) throws TException {
        iface.teacher_getAll(args.fromRecordNumber, args.toRecordNumber, args.access_token,resultHandler);
      }
    }

    public static class teacher_logout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, teacher_logout_args, Boolean> {
      public teacher_logout() {
        super("teacher_logout");
      }

      public teacher_logout_args getEmptyArgsInstance() {
        return new teacher_logout_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            teacher_logout_result result = new teacher_logout_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            teacher_logout_result result = new teacher_logout_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, teacher_logout_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.teacher_logout(args.access_token,resultHandler);
      }
    }

    public static class teacher_delete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, teacher_delete_args, Boolean> {
      public teacher_delete() {
        super("teacher_delete");
      }

      public teacher_delete_args getEmptyArgsInstance() {
        return new teacher_delete_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            teacher_delete_result result = new teacher_delete_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            teacher_delete_result result = new teacher_delete_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, teacher_delete_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.teacher_delete(args.id, args.access_token,resultHandler);
      }
    }

    public static class teacher_updatepassword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, teacher_updatepassword_args, Boolean> {
      public teacher_updatepassword() {
        super("teacher_updatepassword");
      }

      public teacher_updatepassword_args getEmptyArgsInstance() {
        return new teacher_updatepassword_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            teacher_updatepassword_result result = new teacher_updatepassword_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            teacher_updatepassword_result result = new teacher_updatepassword_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, teacher_updatepassword_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.teacher_updatepassword(args.id, args.password, args.access_token,resultHandler);
      }
    }

    public static class download_geturl<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, download_geturl_args, String> {
      public download_geturl() {
        super("download_geturl");
      }

      public download_geturl_args getEmptyArgsInstance() {
        return new download_geturl_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            download_geturl_result result = new download_geturl_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            download_geturl_result result = new download_geturl_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, download_geturl_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.download_geturl(args.code,resultHandler);
      }
    }

    public static class user_getType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, user_getType_args, TUserTypeReturn> {
      public user_getType() {
        super("user_getType");
      }

      public user_getType_args getEmptyArgsInstance() {
        return new user_getType_args();
      }

      public AsyncMethodCallback<TUserTypeReturn> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TUserTypeReturn>() { 
          public void onComplete(TUserTypeReturn o) {
            user_getType_result result = new user_getType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            user_getType_result result = new user_getType_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, user_getType_args args, org.apache.thrift.async.AsyncMethodCallback<TUserTypeReturn> resultHandler) throws TException {
        iface.user_getType(args.loginname, args.access_token,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");

    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }

    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_TOKEN((short)1, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    public ping_args(
      String access_token)
    {
      this();
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
      this.access_token = null;
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public ping_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccess_token()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      TPlasoException myerror)
    {
      this();
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.myerror = null;
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public ping_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMyerror()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class student_login_args implements org.apache.thrift.TBase<student_login_args, student_login_args._Fields>, java.io.Serializable, Cloneable, Comparable<student_login_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_login_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_login_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_login_argsTupleSchemeFactory());
    }

    public String username; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_login_args.class, metaDataMap);
    }

    public student_login_args() {
    }

    public student_login_args(
      String username,
      String password)
    {
      this();
      this.username = username;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_login_args(student_login_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public student_login_args deepCopy() {
      return new student_login_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.password = null;
    }

    public String getUsername() {
      return this.username;
    }

    public student_login_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public student_login_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_login_args)
        return this.equals((student_login_args)that);
      return false;
    }

    public boolean equals(student_login_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_login_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_login_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_login_argsStandardSchemeFactory implements SchemeFactory {
      public student_login_argsStandardScheme getScheme() {
        return new student_login_argsStandardScheme();
      }
    }

    private static class student_login_argsStandardScheme extends StandardScheme<student_login_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_login_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_login_argsTupleSchemeFactory implements SchemeFactory {
      public student_login_argsTupleScheme getScheme() {
        return new student_login_argsTupleScheme();
      }
    }

    private static class student_login_argsTupleScheme extends TupleScheme<student_login_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_login_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_login_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class student_login_result implements org.apache.thrift.TBase<student_login_result, student_login_result._Fields>, java.io.Serializable, Cloneable, Comparable<student_login_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_login_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_login_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_login_resultTupleSchemeFactory());
    }

    public TStudent success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStudent.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_login_result.class, metaDataMap);
    }

    public student_login_result() {
    }

    public student_login_result(
      TStudent success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_login_result(student_login_result other) {
      if (other.isSetSuccess()) {
        this.success = new TStudent(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public student_login_result deepCopy() {
      return new student_login_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TStudent getSuccess() {
      return this.success;
    }

    public student_login_result setSuccess(TStudent success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public student_login_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TStudent)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_login_result)
        return this.equals((student_login_result)that);
      return false;
    }

    public boolean equals(student_login_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_login_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_login_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_login_resultStandardSchemeFactory implements SchemeFactory {
      public student_login_resultStandardScheme getScheme() {
        return new student_login_resultStandardScheme();
      }
    }

    private static class student_login_resultStandardScheme extends StandardScheme<student_login_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TStudent();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_login_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_login_resultTupleSchemeFactory implements SchemeFactory {
      public student_login_resultTupleScheme getScheme() {
        return new student_login_resultTupleScheme();
      }
    }

    private static class student_login_resultTupleScheme extends TupleScheme<student_login_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_login_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_login_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TStudent();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class student_register_args implements org.apache.thrift.TBase<student_register_args, student_register_args._Fields>, java.io.Serializable, Cloneable, Comparable<student_register_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_register_args");

    private static final org.apache.thrift.protocol.TField STUDENT_FIELD_DESC = new org.apache.thrift.protocol.TField("student", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_register_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_register_argsTupleSchemeFactory());
    }

    public TStudent student; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT((short)1, "student");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT
            return STUDENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT, new org.apache.thrift.meta_data.FieldMetaData("student", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStudent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_register_args.class, metaDataMap);
    }

    public student_register_args() {
    }

    public student_register_args(
      TStudent student)
    {
      this();
      this.student = student;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_register_args(student_register_args other) {
      if (other.isSetStudent()) {
        this.student = new TStudent(other.student);
      }
    }

    public student_register_args deepCopy() {
      return new student_register_args(this);
    }

    @Override
    public void clear() {
      this.student = null;
    }

    public TStudent getStudent() {
      return this.student;
    }

    public student_register_args setStudent(TStudent student) {
      this.student = student;
      return this;
    }

    public void unsetStudent() {
      this.student = null;
    }

    /** Returns true if field student is set (has been assigned a value) and false otherwise */
    public boolean isSetStudent() {
      return this.student != null;
    }

    public void setStudentIsSet(boolean value) {
      if (!value) {
        this.student = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENT:
        if (value == null) {
          unsetStudent();
        } else {
          setStudent((TStudent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT:
        return getStudent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT:
        return isSetStudent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_register_args)
        return this.equals((student_register_args)that);
      return false;
    }

    public boolean equals(student_register_args that) {
      if (that == null)
        return false;

      boolean this_present_student = true && this.isSetStudent();
      boolean that_present_student = true && that.isSetStudent();
      if (this_present_student || that_present_student) {
        if (!(this_present_student && that_present_student))
          return false;
        if (!this.student.equals(that.student))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_register_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStudent()).compareTo(other.isSetStudent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.student, other.student);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_register_args(");
      boolean first = true;

      sb.append("student:");
      if (this.student == null) {
        sb.append("null");
      } else {
        sb.append(this.student);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (student != null) {
        student.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_register_argsStandardSchemeFactory implements SchemeFactory {
      public student_register_argsStandardScheme getScheme() {
        return new student_register_argsStandardScheme();
      }
    }

    private static class student_register_argsStandardScheme extends StandardScheme<student_register_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.student = new TStudent();
                struct.student.read(iprot);
                struct.setStudentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_register_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.student != null) {
          oprot.writeFieldBegin(STUDENT_FIELD_DESC);
          struct.student.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_register_argsTupleSchemeFactory implements SchemeFactory {
      public student_register_argsTupleScheme getScheme() {
        return new student_register_argsTupleScheme();
      }
    }

    private static class student_register_argsTupleScheme extends TupleScheme<student_register_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_register_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStudent()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStudent()) {
          struct.student.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_register_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.student = new TStudent();
          struct.student.read(iprot);
          struct.setStudentIsSet(true);
        }
      }
    }

  }

  public static class student_register_result implements org.apache.thrift.TBase<student_register_result, student_register_result._Fields>, java.io.Serializable, Cloneable, Comparable<student_register_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_register_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_register_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_register_resultTupleSchemeFactory());
    }

    public TStudent success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStudent.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_register_result.class, metaDataMap);
    }

    public student_register_result() {
    }

    public student_register_result(
      TStudent success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_register_result(student_register_result other) {
      if (other.isSetSuccess()) {
        this.success = new TStudent(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public student_register_result deepCopy() {
      return new student_register_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TStudent getSuccess() {
      return this.success;
    }

    public student_register_result setSuccess(TStudent success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public student_register_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TStudent)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_register_result)
        return this.equals((student_register_result)that);
      return false;
    }

    public boolean equals(student_register_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_register_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_register_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_register_resultStandardSchemeFactory implements SchemeFactory {
      public student_register_resultStandardScheme getScheme() {
        return new student_register_resultStandardScheme();
      }
    }

    private static class student_register_resultStandardScheme extends StandardScheme<student_register_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_register_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TStudent();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_register_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_register_resultTupleSchemeFactory implements SchemeFactory {
      public student_register_resultTupleScheme getScheme() {
        return new student_register_resultTupleScheme();
      }
    }

    private static class student_register_resultTupleScheme extends TupleScheme<student_register_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_register_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_register_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TStudent();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class student_getUserByStudentNumber_args implements org.apache.thrift.TBase<student_getUserByStudentNumber_args, student_getUserByStudentNumber_args._Fields>, java.io.Serializable, Cloneable, Comparable<student_getUserByStudentNumber_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_getUserByStudentNumber_args");

    private static final org.apache.thrift.protocol.TField STUDENT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("studentNumber", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_getUserByStudentNumber_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_getUserByStudentNumber_argsTupleSchemeFactory());
    }

    public String studentNumber; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT_NUMBER((short)1, "studentNumber"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT_NUMBER
            return STUDENT_NUMBER;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("studentNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_getUserByStudentNumber_args.class, metaDataMap);
    }

    public student_getUserByStudentNumber_args() {
    }

    public student_getUserByStudentNumber_args(
      String studentNumber,
      String access_token)
    {
      this();
      this.studentNumber = studentNumber;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_getUserByStudentNumber_args(student_getUserByStudentNumber_args other) {
      if (other.isSetStudentNumber()) {
        this.studentNumber = other.studentNumber;
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public student_getUserByStudentNumber_args deepCopy() {
      return new student_getUserByStudentNumber_args(this);
    }

    @Override
    public void clear() {
      this.studentNumber = null;
      this.access_token = null;
    }

    public String getStudentNumber() {
      return this.studentNumber;
    }

    public student_getUserByStudentNumber_args setStudentNumber(String studentNumber) {
      this.studentNumber = studentNumber;
      return this;
    }

    public void unsetStudentNumber() {
      this.studentNumber = null;
    }

    /** Returns true if field studentNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentNumber() {
      return this.studentNumber != null;
    }

    public void setStudentNumberIsSet(boolean value) {
      if (!value) {
        this.studentNumber = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public student_getUserByStudentNumber_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENT_NUMBER:
        if (value == null) {
          unsetStudentNumber();
        } else {
          setStudentNumber((String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT_NUMBER:
        return getStudentNumber();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT_NUMBER:
        return isSetStudentNumber();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_getUserByStudentNumber_args)
        return this.equals((student_getUserByStudentNumber_args)that);
      return false;
    }

    public boolean equals(student_getUserByStudentNumber_args that) {
      if (that == null)
        return false;

      boolean this_present_studentNumber = true && this.isSetStudentNumber();
      boolean that_present_studentNumber = true && that.isSetStudentNumber();
      if (this_present_studentNumber || that_present_studentNumber) {
        if (!(this_present_studentNumber && that_present_studentNumber))
          return false;
        if (!this.studentNumber.equals(that.studentNumber))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_getUserByStudentNumber_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStudentNumber()).compareTo(other.isSetStudentNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentNumber, other.studentNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_getUserByStudentNumber_args(");
      boolean first = true;

      sb.append("studentNumber:");
      if (this.studentNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.studentNumber);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_getUserByStudentNumber_argsStandardSchemeFactory implements SchemeFactory {
      public student_getUserByStudentNumber_argsStandardScheme getScheme() {
        return new student_getUserByStudentNumber_argsStandardScheme();
      }
    }

    private static class student_getUserByStudentNumber_argsStandardScheme extends StandardScheme<student_getUserByStudentNumber_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_getUserByStudentNumber_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.studentNumber = iprot.readString();
                struct.setStudentNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_getUserByStudentNumber_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.studentNumber != null) {
          oprot.writeFieldBegin(STUDENT_NUMBER_FIELD_DESC);
          oprot.writeString(struct.studentNumber);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_getUserByStudentNumber_argsTupleSchemeFactory implements SchemeFactory {
      public student_getUserByStudentNumber_argsTupleScheme getScheme() {
        return new student_getUserByStudentNumber_argsTupleScheme();
      }
    }

    private static class student_getUserByStudentNumber_argsTupleScheme extends TupleScheme<student_getUserByStudentNumber_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_getUserByStudentNumber_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStudentNumber()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStudentNumber()) {
          oprot.writeString(struct.studentNumber);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_getUserByStudentNumber_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.studentNumber = iprot.readString();
          struct.setStudentNumberIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class student_getUserByStudentNumber_result implements org.apache.thrift.TBase<student_getUserByStudentNumber_result, student_getUserByStudentNumber_result._Fields>, java.io.Serializable, Cloneable, Comparable<student_getUserByStudentNumber_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_getUserByStudentNumber_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_getUserByStudentNumber_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_getUserByStudentNumber_resultTupleSchemeFactory());
    }

    public TStudent success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStudent.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_getUserByStudentNumber_result.class, metaDataMap);
    }

    public student_getUserByStudentNumber_result() {
    }

    public student_getUserByStudentNumber_result(
      TStudent success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_getUserByStudentNumber_result(student_getUserByStudentNumber_result other) {
      if (other.isSetSuccess()) {
        this.success = new TStudent(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public student_getUserByStudentNumber_result deepCopy() {
      return new student_getUserByStudentNumber_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TStudent getSuccess() {
      return this.success;
    }

    public student_getUserByStudentNumber_result setSuccess(TStudent success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public student_getUserByStudentNumber_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TStudent)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_getUserByStudentNumber_result)
        return this.equals((student_getUserByStudentNumber_result)that);
      return false;
    }

    public boolean equals(student_getUserByStudentNumber_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_getUserByStudentNumber_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_getUserByStudentNumber_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_getUserByStudentNumber_resultStandardSchemeFactory implements SchemeFactory {
      public student_getUserByStudentNumber_resultStandardScheme getScheme() {
        return new student_getUserByStudentNumber_resultStandardScheme();
      }
    }

    private static class student_getUserByStudentNumber_resultStandardScheme extends StandardScheme<student_getUserByStudentNumber_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_getUserByStudentNumber_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TStudent();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_getUserByStudentNumber_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_getUserByStudentNumber_resultTupleSchemeFactory implements SchemeFactory {
      public student_getUserByStudentNumber_resultTupleScheme getScheme() {
        return new student_getUserByStudentNumber_resultTupleScheme();
      }
    }

    private static class student_getUserByStudentNumber_resultTupleScheme extends TupleScheme<student_getUserByStudentNumber_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_getUserByStudentNumber_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_getUserByStudentNumber_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TStudent();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class student_getUserByloginName_args implements org.apache.thrift.TBase<student_getUserByloginName_args, student_getUserByloginName_args._Fields>, java.io.Serializable, Cloneable, Comparable<student_getUserByloginName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_getUserByloginName_args");

    private static final org.apache.thrift.protocol.TField LOGINNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginname", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_getUserByloginName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_getUserByloginName_argsTupleSchemeFactory());
    }

    public String loginname; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOGINNAME((short)1, "loginname"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOGINNAME
            return LOGINNAME;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOGINNAME, new org.apache.thrift.meta_data.FieldMetaData("loginname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_getUserByloginName_args.class, metaDataMap);
    }

    public student_getUserByloginName_args() {
    }

    public student_getUserByloginName_args(
      String loginname,
      String access_token)
    {
      this();
      this.loginname = loginname;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_getUserByloginName_args(student_getUserByloginName_args other) {
      if (other.isSetLoginname()) {
        this.loginname = other.loginname;
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public student_getUserByloginName_args deepCopy() {
      return new student_getUserByloginName_args(this);
    }

    @Override
    public void clear() {
      this.loginname = null;
      this.access_token = null;
    }

    public String getLoginname() {
      return this.loginname;
    }

    public student_getUserByloginName_args setLoginname(String loginname) {
      this.loginname = loginname;
      return this;
    }

    public void unsetLoginname() {
      this.loginname = null;
    }

    /** Returns true if field loginname is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginname() {
      return this.loginname != null;
    }

    public void setLoginnameIsSet(boolean value) {
      if (!value) {
        this.loginname = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public student_getUserByloginName_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOGINNAME:
        if (value == null) {
          unsetLoginname();
        } else {
          setLoginname((String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOGINNAME:
        return getLoginname();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOGINNAME:
        return isSetLoginname();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_getUserByloginName_args)
        return this.equals((student_getUserByloginName_args)that);
      return false;
    }

    public boolean equals(student_getUserByloginName_args that) {
      if (that == null)
        return false;

      boolean this_present_loginname = true && this.isSetLoginname();
      boolean that_present_loginname = true && that.isSetLoginname();
      if (this_present_loginname || that_present_loginname) {
        if (!(this_present_loginname && that_present_loginname))
          return false;
        if (!this.loginname.equals(that.loginname))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_getUserByloginName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoginname()).compareTo(other.isSetLoginname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginname, other.loginname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_getUserByloginName_args(");
      boolean first = true;

      sb.append("loginname:");
      if (this.loginname == null) {
        sb.append("null");
      } else {
        sb.append(this.loginname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_getUserByloginName_argsStandardSchemeFactory implements SchemeFactory {
      public student_getUserByloginName_argsStandardScheme getScheme() {
        return new student_getUserByloginName_argsStandardScheme();
      }
    }

    private static class student_getUserByloginName_argsStandardScheme extends StandardScheme<student_getUserByloginName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_getUserByloginName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOGINNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginname = iprot.readString();
                struct.setLoginnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_getUserByloginName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.loginname != null) {
          oprot.writeFieldBegin(LOGINNAME_FIELD_DESC);
          oprot.writeString(struct.loginname);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_getUserByloginName_argsTupleSchemeFactory implements SchemeFactory {
      public student_getUserByloginName_argsTupleScheme getScheme() {
        return new student_getUserByloginName_argsTupleScheme();
      }
    }

    private static class student_getUserByloginName_argsTupleScheme extends TupleScheme<student_getUserByloginName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_getUserByloginName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoginname()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLoginname()) {
          oprot.writeString(struct.loginname);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_getUserByloginName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.loginname = iprot.readString();
          struct.setLoginnameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class student_getUserByloginName_result implements org.apache.thrift.TBase<student_getUserByloginName_result, student_getUserByloginName_result._Fields>, java.io.Serializable, Cloneable, Comparable<student_getUserByloginName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_getUserByloginName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_getUserByloginName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_getUserByloginName_resultTupleSchemeFactory());
    }

    public TStudent success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStudent.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_getUserByloginName_result.class, metaDataMap);
    }

    public student_getUserByloginName_result() {
    }

    public student_getUserByloginName_result(
      TStudent success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_getUserByloginName_result(student_getUserByloginName_result other) {
      if (other.isSetSuccess()) {
        this.success = new TStudent(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public student_getUserByloginName_result deepCopy() {
      return new student_getUserByloginName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TStudent getSuccess() {
      return this.success;
    }

    public student_getUserByloginName_result setSuccess(TStudent success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public student_getUserByloginName_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TStudent)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_getUserByloginName_result)
        return this.equals((student_getUserByloginName_result)that);
      return false;
    }

    public boolean equals(student_getUserByloginName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_getUserByloginName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_getUserByloginName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_getUserByloginName_resultStandardSchemeFactory implements SchemeFactory {
      public student_getUserByloginName_resultStandardScheme getScheme() {
        return new student_getUserByloginName_resultStandardScheme();
      }
    }

    private static class student_getUserByloginName_resultStandardScheme extends StandardScheme<student_getUserByloginName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_getUserByloginName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TStudent();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_getUserByloginName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_getUserByloginName_resultTupleSchemeFactory implements SchemeFactory {
      public student_getUserByloginName_resultTupleScheme getScheme() {
        return new student_getUserByloginName_resultTupleScheme();
      }
    }

    private static class student_getUserByloginName_resultTupleScheme extends TupleScheme<student_getUserByloginName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_getUserByloginName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_getUserByloginName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TStudent();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class student_doUpdate_args implements org.apache.thrift.TBase<student_doUpdate_args, student_doUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<student_doUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_doUpdate_args");

    private static final org.apache.thrift.protocol.TField STUDENT_FIELD_DESC = new org.apache.thrift.protocol.TField("student", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_doUpdate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_doUpdate_argsTupleSchemeFactory());
    }

    public TStudent student; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT((short)1, "student"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT
            return STUDENT;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT, new org.apache.thrift.meta_data.FieldMetaData("student", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStudent.class)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_doUpdate_args.class, metaDataMap);
    }

    public student_doUpdate_args() {
    }

    public student_doUpdate_args(
      TStudent student,
      String access_token)
    {
      this();
      this.student = student;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_doUpdate_args(student_doUpdate_args other) {
      if (other.isSetStudent()) {
        this.student = new TStudent(other.student);
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public student_doUpdate_args deepCopy() {
      return new student_doUpdate_args(this);
    }

    @Override
    public void clear() {
      this.student = null;
      this.access_token = null;
    }

    public TStudent getStudent() {
      return this.student;
    }

    public student_doUpdate_args setStudent(TStudent student) {
      this.student = student;
      return this;
    }

    public void unsetStudent() {
      this.student = null;
    }

    /** Returns true if field student is set (has been assigned a value) and false otherwise */
    public boolean isSetStudent() {
      return this.student != null;
    }

    public void setStudentIsSet(boolean value) {
      if (!value) {
        this.student = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public student_doUpdate_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENT:
        if (value == null) {
          unsetStudent();
        } else {
          setStudent((TStudent)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT:
        return getStudent();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT:
        return isSetStudent();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_doUpdate_args)
        return this.equals((student_doUpdate_args)that);
      return false;
    }

    public boolean equals(student_doUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_student = true && this.isSetStudent();
      boolean that_present_student = true && that.isSetStudent();
      if (this_present_student || that_present_student) {
        if (!(this_present_student && that_present_student))
          return false;
        if (!this.student.equals(that.student))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_doUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStudent()).compareTo(other.isSetStudent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.student, other.student);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_doUpdate_args(");
      boolean first = true;

      sb.append("student:");
      if (this.student == null) {
        sb.append("null");
      } else {
        sb.append(this.student);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (student != null) {
        student.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_doUpdate_argsStandardSchemeFactory implements SchemeFactory {
      public student_doUpdate_argsStandardScheme getScheme() {
        return new student_doUpdate_argsStandardScheme();
      }
    }

    private static class student_doUpdate_argsStandardScheme extends StandardScheme<student_doUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_doUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.student = new TStudent();
                struct.student.read(iprot);
                struct.setStudentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_doUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.student != null) {
          oprot.writeFieldBegin(STUDENT_FIELD_DESC);
          struct.student.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_doUpdate_argsTupleSchemeFactory implements SchemeFactory {
      public student_doUpdate_argsTupleScheme getScheme() {
        return new student_doUpdate_argsTupleScheme();
      }
    }

    private static class student_doUpdate_argsTupleScheme extends TupleScheme<student_doUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_doUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStudent()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStudent()) {
          struct.student.write(oprot);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_doUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.student = new TStudent();
          struct.student.read(iprot);
          struct.setStudentIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class student_doUpdate_result implements org.apache.thrift.TBase<student_doUpdate_result, student_doUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<student_doUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_doUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_doUpdate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_doUpdate_resultTupleSchemeFactory());
    }

    public TStudent success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStudent.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_doUpdate_result.class, metaDataMap);
    }

    public student_doUpdate_result() {
    }

    public student_doUpdate_result(
      TStudent success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_doUpdate_result(student_doUpdate_result other) {
      if (other.isSetSuccess()) {
        this.success = new TStudent(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public student_doUpdate_result deepCopy() {
      return new student_doUpdate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TStudent getSuccess() {
      return this.success;
    }

    public student_doUpdate_result setSuccess(TStudent success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public student_doUpdate_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TStudent)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_doUpdate_result)
        return this.equals((student_doUpdate_result)that);
      return false;
    }

    public boolean equals(student_doUpdate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_doUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_doUpdate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_doUpdate_resultStandardSchemeFactory implements SchemeFactory {
      public student_doUpdate_resultStandardScheme getScheme() {
        return new student_doUpdate_resultStandardScheme();
      }
    }

    private static class student_doUpdate_resultStandardScheme extends StandardScheme<student_doUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_doUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TStudent();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_doUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_doUpdate_resultTupleSchemeFactory implements SchemeFactory {
      public student_doUpdate_resultTupleScheme getScheme() {
        return new student_doUpdate_resultTupleScheme();
      }
    }

    private static class student_doUpdate_resultTupleScheme extends TupleScheme<student_doUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_doUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_doUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TStudent();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class student_getUserById_args implements org.apache.thrift.TBase<student_getUserById_args, student_getUserById_args._Fields>, java.io.Serializable, Cloneable, Comparable<student_getUserById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_getUserById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_getUserById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_getUserById_argsTupleSchemeFactory());
    }

    public int id; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_getUserById_args.class, metaDataMap);
    }

    public student_getUserById_args() {
    }

    public student_getUserById_args(
      int id,
      String access_token)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_getUserById_args(student_getUserById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public student_getUserById_args deepCopy() {
      return new student_getUserById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.access_token = null;
    }

    public int getId() {
      return this.id;
    }

    public student_getUserById_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public student_getUserById_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_getUserById_args)
        return this.equals((student_getUserById_args)that);
      return false;
    }

    public boolean equals(student_getUserById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_getUserById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_getUserById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_getUserById_argsStandardSchemeFactory implements SchemeFactory {
      public student_getUserById_argsStandardScheme getScheme() {
        return new student_getUserById_argsStandardScheme();
      }
    }

    private static class student_getUserById_argsStandardScheme extends StandardScheme<student_getUserById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_getUserById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_getUserById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_getUserById_argsTupleSchemeFactory implements SchemeFactory {
      public student_getUserById_argsTupleScheme getScheme() {
        return new student_getUserById_argsTupleScheme();
      }
    }

    private static class student_getUserById_argsTupleScheme extends TupleScheme<student_getUserById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_getUserById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_getUserById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class student_getUserById_result implements org.apache.thrift.TBase<student_getUserById_result, student_getUserById_result._Fields>, java.io.Serializable, Cloneable, Comparable<student_getUserById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_getUserById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_getUserById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_getUserById_resultTupleSchemeFactory());
    }

    public TStudent success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStudent.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_getUserById_result.class, metaDataMap);
    }

    public student_getUserById_result() {
    }

    public student_getUserById_result(
      TStudent success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_getUserById_result(student_getUserById_result other) {
      if (other.isSetSuccess()) {
        this.success = new TStudent(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public student_getUserById_result deepCopy() {
      return new student_getUserById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TStudent getSuccess() {
      return this.success;
    }

    public student_getUserById_result setSuccess(TStudent success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public student_getUserById_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TStudent)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_getUserById_result)
        return this.equals((student_getUserById_result)that);
      return false;
    }

    public boolean equals(student_getUserById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_getUserById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_getUserById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_getUserById_resultStandardSchemeFactory implements SchemeFactory {
      public student_getUserById_resultStandardScheme getScheme() {
        return new student_getUserById_resultStandardScheme();
      }
    }

    private static class student_getUserById_resultStandardScheme extends StandardScheme<student_getUserById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_getUserById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TStudent();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_getUserById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_getUserById_resultTupleSchemeFactory implements SchemeFactory {
      public student_getUserById_resultTupleScheme getScheme() {
        return new student_getUserById_resultTupleScheme();
      }
    }

    private static class student_getUserById_resultTupleScheme extends TupleScheme<student_getUserById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_getUserById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_getUserById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TStudent();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class student_getAll_args implements org.apache.thrift.TBase<student_getAll_args, student_getAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<student_getAll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_getAll_args");

    private static final org.apache.thrift.protocol.TField FROM_RECORD_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("fromRecordNumber", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TO_RECORD_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("toRecordNumber", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_getAll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_getAll_argsTupleSchemeFactory());
    }

    public int fromRecordNumber; // required
    public int toRecordNumber; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FROM_RECORD_NUMBER((short)1, "fromRecordNumber"),
      TO_RECORD_NUMBER((short)2, "toRecordNumber"),
      ACCESS_TOKEN((short)3, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FROM_RECORD_NUMBER
            return FROM_RECORD_NUMBER;
          case 2: // TO_RECORD_NUMBER
            return TO_RECORD_NUMBER;
          case 3: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FROMRECORDNUMBER_ISSET_ID = 0;
    private static final int __TORECORDNUMBER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FROM_RECORD_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("fromRecordNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TO_RECORD_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("toRecordNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_getAll_args.class, metaDataMap);
    }

    public student_getAll_args() {
    }

    public student_getAll_args(
      int fromRecordNumber,
      int toRecordNumber,
      String access_token)
    {
      this();
      this.fromRecordNumber = fromRecordNumber;
      setFromRecordNumberIsSet(true);
      this.toRecordNumber = toRecordNumber;
      setToRecordNumberIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_getAll_args(student_getAll_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fromRecordNumber = other.fromRecordNumber;
      this.toRecordNumber = other.toRecordNumber;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public student_getAll_args deepCopy() {
      return new student_getAll_args(this);
    }

    @Override
    public void clear() {
      setFromRecordNumberIsSet(false);
      this.fromRecordNumber = 0;
      setToRecordNumberIsSet(false);
      this.toRecordNumber = 0;
      this.access_token = null;
    }

    public int getFromRecordNumber() {
      return this.fromRecordNumber;
    }

    public student_getAll_args setFromRecordNumber(int fromRecordNumber) {
      this.fromRecordNumber = fromRecordNumber;
      setFromRecordNumberIsSet(true);
      return this;
    }

    public void unsetFromRecordNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMRECORDNUMBER_ISSET_ID);
    }

    /** Returns true if field fromRecordNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetFromRecordNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __FROMRECORDNUMBER_ISSET_ID);
    }

    public void setFromRecordNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMRECORDNUMBER_ISSET_ID, value);
    }

    public int getToRecordNumber() {
      return this.toRecordNumber;
    }

    public student_getAll_args setToRecordNumber(int toRecordNumber) {
      this.toRecordNumber = toRecordNumber;
      setToRecordNumberIsSet(true);
      return this;
    }

    public void unsetToRecordNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TORECORDNUMBER_ISSET_ID);
    }

    /** Returns true if field toRecordNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetToRecordNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __TORECORDNUMBER_ISSET_ID);
    }

    public void setToRecordNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TORECORDNUMBER_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public student_getAll_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FROM_RECORD_NUMBER:
        if (value == null) {
          unsetFromRecordNumber();
        } else {
          setFromRecordNumber((Integer)value);
        }
        break;

      case TO_RECORD_NUMBER:
        if (value == null) {
          unsetToRecordNumber();
        } else {
          setToRecordNumber((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FROM_RECORD_NUMBER:
        return Integer.valueOf(getFromRecordNumber());

      case TO_RECORD_NUMBER:
        return Integer.valueOf(getToRecordNumber());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FROM_RECORD_NUMBER:
        return isSetFromRecordNumber();
      case TO_RECORD_NUMBER:
        return isSetToRecordNumber();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_getAll_args)
        return this.equals((student_getAll_args)that);
      return false;
    }

    public boolean equals(student_getAll_args that) {
      if (that == null)
        return false;

      boolean this_present_fromRecordNumber = true;
      boolean that_present_fromRecordNumber = true;
      if (this_present_fromRecordNumber || that_present_fromRecordNumber) {
        if (!(this_present_fromRecordNumber && that_present_fromRecordNumber))
          return false;
        if (this.fromRecordNumber != that.fromRecordNumber)
          return false;
      }

      boolean this_present_toRecordNumber = true;
      boolean that_present_toRecordNumber = true;
      if (this_present_toRecordNumber || that_present_toRecordNumber) {
        if (!(this_present_toRecordNumber && that_present_toRecordNumber))
          return false;
        if (this.toRecordNumber != that.toRecordNumber)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_getAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFromRecordNumber()).compareTo(other.isSetFromRecordNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromRecordNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromRecordNumber, other.fromRecordNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToRecordNumber()).compareTo(other.isSetToRecordNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToRecordNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toRecordNumber, other.toRecordNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_getAll_args(");
      boolean first = true;

      sb.append("fromRecordNumber:");
      sb.append(this.fromRecordNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("toRecordNumber:");
      sb.append(this.toRecordNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_getAll_argsStandardSchemeFactory implements SchemeFactory {
      public student_getAll_argsStandardScheme getScheme() {
        return new student_getAll_argsStandardScheme();
      }
    }

    private static class student_getAll_argsStandardScheme extends StandardScheme<student_getAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_getAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FROM_RECORD_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fromRecordNumber = iprot.readI32();
                struct.setFromRecordNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TO_RECORD_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.toRecordNumber = iprot.readI32();
                struct.setToRecordNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_getAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FROM_RECORD_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.fromRecordNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_RECORD_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.toRecordNumber);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_getAll_argsTupleSchemeFactory implements SchemeFactory {
      public student_getAll_argsTupleScheme getScheme() {
        return new student_getAll_argsTupleScheme();
      }
    }

    private static class student_getAll_argsTupleScheme extends TupleScheme<student_getAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_getAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFromRecordNumber()) {
          optionals.set(0);
        }
        if (struct.isSetToRecordNumber()) {
          optionals.set(1);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFromRecordNumber()) {
          oprot.writeI32(struct.fromRecordNumber);
        }
        if (struct.isSetToRecordNumber()) {
          oprot.writeI32(struct.toRecordNumber);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_getAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.fromRecordNumber = iprot.readI32();
          struct.setFromRecordNumberIsSet(true);
        }
        if (incoming.get(1)) {
          struct.toRecordNumber = iprot.readI32();
          struct.setToRecordNumberIsSet(true);
        }
        if (incoming.get(2)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class student_getAll_result implements org.apache.thrift.TBase<student_getAll_result, student_getAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<student_getAll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_getAll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_getAll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_getAll_resultTupleSchemeFactory());
    }

    public List<TStudent> success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStudent.class))));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_getAll_result.class, metaDataMap);
    }

    public student_getAll_result() {
    }

    public student_getAll_result(
      List<TStudent> success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_getAll_result(student_getAll_result other) {
      if (other.isSetSuccess()) {
        List<TStudent> __this__success = new ArrayList<TStudent>(other.success.size());
        for (TStudent other_element : other.success) {
          __this__success.add(new TStudent(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public student_getAll_result deepCopy() {
      return new student_getAll_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TStudent> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TStudent elem) {
      if (this.success == null) {
        this.success = new ArrayList<TStudent>();
      }
      this.success.add(elem);
    }

    public List<TStudent> getSuccess() {
      return this.success;
    }

    public student_getAll_result setSuccess(List<TStudent> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public student_getAll_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TStudent>)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_getAll_result)
        return this.equals((student_getAll_result)that);
      return false;
    }

    public boolean equals(student_getAll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_getAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_getAll_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_getAll_resultStandardSchemeFactory implements SchemeFactory {
      public student_getAll_resultStandardScheme getScheme() {
        return new student_getAll_resultStandardScheme();
      }
    }

    private static class student_getAll_resultStandardScheme extends StandardScheme<student_getAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_getAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<TStudent>(_list64.size);
                  for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                  {
                    TStudent _elem66;
                    _elem66 = new TStudent();
                    _elem66.read(iprot);
                    struct.success.add(_elem66);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_getAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TStudent _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_getAll_resultTupleSchemeFactory implements SchemeFactory {
      public student_getAll_resultTupleScheme getScheme() {
        return new student_getAll_resultTupleScheme();
      }
    }

    private static class student_getAll_resultTupleScheme extends TupleScheme<student_getAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_getAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TStudent _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_getAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TStudent>(_list69.size);
            for (int _i70 = 0; _i70 < _list69.size; ++_i70)
            {
              TStudent _elem71;
              _elem71 = new TStudent();
              _elem71.read(iprot);
              struct.success.add(_elem71);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class student_logout_args implements org.apache.thrift.TBase<student_logout_args, student_logout_args._Fields>, java.io.Serializable, Cloneable, Comparable<student_logout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_logout_args");

    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_logout_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_logout_argsTupleSchemeFactory());
    }

    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_TOKEN((short)1, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_logout_args.class, metaDataMap);
    }

    public student_logout_args() {
    }

    public student_logout_args(
      String access_token)
    {
      this();
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_logout_args(student_logout_args other) {
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public student_logout_args deepCopy() {
      return new student_logout_args(this);
    }

    @Override
    public void clear() {
      this.access_token = null;
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public student_logout_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_logout_args)
        return this.equals((student_logout_args)that);
      return false;
    }

    public boolean equals(student_logout_args that) {
      if (that == null)
        return false;

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_logout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_logout_args(");
      boolean first = true;

      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_logout_argsStandardSchemeFactory implements SchemeFactory {
      public student_logout_argsStandardScheme getScheme() {
        return new student_logout_argsStandardScheme();
      }
    }

    private static class student_logout_argsStandardScheme extends StandardScheme<student_logout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_logout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_logout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_logout_argsTupleSchemeFactory implements SchemeFactory {
      public student_logout_argsTupleScheme getScheme() {
        return new student_logout_argsTupleScheme();
      }
    }

    private static class student_logout_argsTupleScheme extends TupleScheme<student_logout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_logout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccess_token()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_logout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class student_logout_result implements org.apache.thrift.TBase<student_logout_result, student_logout_result._Fields>, java.io.Serializable, Cloneable, Comparable<student_logout_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_logout_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_logout_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_logout_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_logout_result.class, metaDataMap);
    }

    public student_logout_result() {
    }

    public student_logout_result(
      boolean success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_logout_result(student_logout_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public student_logout_result deepCopy() {
      return new student_logout_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.myerror = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public student_logout_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public student_logout_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_logout_result)
        return this.equals((student_logout_result)that);
      return false;
    }

    public boolean equals(student_logout_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_logout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_logout_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_logout_resultStandardSchemeFactory implements SchemeFactory {
      public student_logout_resultStandardScheme getScheme() {
        return new student_logout_resultStandardScheme();
      }
    }

    private static class student_logout_resultStandardScheme extends StandardScheme<student_logout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_logout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_logout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_logout_resultTupleSchemeFactory implements SchemeFactory {
      public student_logout_resultTupleScheme getScheme() {
        return new student_logout_resultTupleScheme();
      }
    }

    private static class student_logout_resultTupleScheme extends TupleScheme<student_logout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_logout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_logout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class student_delete_args implements org.apache.thrift.TBase<student_delete_args, student_delete_args._Fields>, java.io.Serializable, Cloneable, Comparable<student_delete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_delete_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_delete_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_delete_argsTupleSchemeFactory());
    }

    public int id; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_delete_args.class, metaDataMap);
    }

    public student_delete_args() {
    }

    public student_delete_args(
      int id,
      String access_token)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_delete_args(student_delete_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public student_delete_args deepCopy() {
      return new student_delete_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.access_token = null;
    }

    public int getId() {
      return this.id;
    }

    public student_delete_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public student_delete_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_delete_args)
        return this.equals((student_delete_args)that);
      return false;
    }

    public boolean equals(student_delete_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_delete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_delete_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_delete_argsStandardSchemeFactory implements SchemeFactory {
      public student_delete_argsStandardScheme getScheme() {
        return new student_delete_argsStandardScheme();
      }
    }

    private static class student_delete_argsStandardScheme extends StandardScheme<student_delete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_delete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_delete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_delete_argsTupleSchemeFactory implements SchemeFactory {
      public student_delete_argsTupleScheme getScheme() {
        return new student_delete_argsTupleScheme();
      }
    }

    private static class student_delete_argsTupleScheme extends TupleScheme<student_delete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_delete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_delete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class student_delete_result implements org.apache.thrift.TBase<student_delete_result, student_delete_result._Fields>, java.io.Serializable, Cloneable, Comparable<student_delete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_delete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_delete_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_delete_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_delete_result.class, metaDataMap);
    }

    public student_delete_result() {
    }

    public student_delete_result(
      boolean success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_delete_result(student_delete_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public student_delete_result deepCopy() {
      return new student_delete_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.myerror = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public student_delete_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public student_delete_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_delete_result)
        return this.equals((student_delete_result)that);
      return false;
    }

    public boolean equals(student_delete_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_delete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_delete_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_delete_resultStandardSchemeFactory implements SchemeFactory {
      public student_delete_resultStandardScheme getScheme() {
        return new student_delete_resultStandardScheme();
      }
    }

    private static class student_delete_resultStandardScheme extends StandardScheme<student_delete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_delete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_delete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_delete_resultTupleSchemeFactory implements SchemeFactory {
      public student_delete_resultTupleScheme getScheme() {
        return new student_delete_resultTupleScheme();
      }
    }

    private static class student_delete_resultTupleScheme extends TupleScheme<student_delete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_delete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_delete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class student_updatepassword_args implements org.apache.thrift.TBase<student_updatepassword_args, student_updatepassword_args._Fields>, java.io.Serializable, Cloneable, Comparable<student_updatepassword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_updatepassword_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_updatepassword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_updatepassword_argsTupleSchemeFactory());
    }

    public int id; // required
    public String password; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      PASSWORD((short)2, "password"),
      ACCESS_TOKEN((short)3, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // PASSWORD
            return PASSWORD;
          case 3: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_updatepassword_args.class, metaDataMap);
    }

    public student_updatepassword_args() {
    }

    public student_updatepassword_args(
      int id,
      String password,
      String access_token)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.password = password;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_updatepassword_args(student_updatepassword_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public student_updatepassword_args deepCopy() {
      return new student_updatepassword_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.password = null;
      this.access_token = null;
    }

    public int getId() {
      return this.id;
    }

    public student_updatepassword_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getPassword() {
      return this.password;
    }

    public student_updatepassword_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public student_updatepassword_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      case PASSWORD:
        return getPassword();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case PASSWORD:
        return isSetPassword();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_updatepassword_args)
        return this.equals((student_updatepassword_args)that);
      return false;
    }

    public boolean equals(student_updatepassword_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_updatepassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_updatepassword_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_updatepassword_argsStandardSchemeFactory implements SchemeFactory {
      public student_updatepassword_argsStandardScheme getScheme() {
        return new student_updatepassword_argsStandardScheme();
      }
    }

    private static class student_updatepassword_argsStandardScheme extends StandardScheme<student_updatepassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_updatepassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_updatepassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_updatepassword_argsTupleSchemeFactory implements SchemeFactory {
      public student_updatepassword_argsTupleScheme getScheme() {
        return new student_updatepassword_argsTupleScheme();
      }
    }

    private static class student_updatepassword_argsTupleScheme extends TupleScheme<student_updatepassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_updatepassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_updatepassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(2)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class student_updatepassword_result implements org.apache.thrift.TBase<student_updatepassword_result, student_updatepassword_result._Fields>, java.io.Serializable, Cloneable, Comparable<student_updatepassword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("student_updatepassword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new student_updatepassword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new student_updatepassword_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(student_updatepassword_result.class, metaDataMap);
    }

    public student_updatepassword_result() {
    }

    public student_updatepassword_result(
      boolean success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public student_updatepassword_result(student_updatepassword_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public student_updatepassword_result deepCopy() {
      return new student_updatepassword_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.myerror = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public student_updatepassword_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public student_updatepassword_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof student_updatepassword_result)
        return this.equals((student_updatepassword_result)that);
      return false;
    }

    public boolean equals(student_updatepassword_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(student_updatepassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("student_updatepassword_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class student_updatepassword_resultStandardSchemeFactory implements SchemeFactory {
      public student_updatepassword_resultStandardScheme getScheme() {
        return new student_updatepassword_resultStandardScheme();
      }
    }

    private static class student_updatepassword_resultStandardScheme extends StandardScheme<student_updatepassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, student_updatepassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, student_updatepassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class student_updatepassword_resultTupleSchemeFactory implements SchemeFactory {
      public student_updatepassword_resultTupleScheme getScheme() {
        return new student_updatepassword_resultTupleScheme();
      }
    }

    private static class student_updatepassword_resultTupleScheme extends TupleScheme<student_updatepassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, student_updatepassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, student_updatepassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class teacher_login_args implements org.apache.thrift.TBase<teacher_login_args, teacher_login_args._Fields>, java.io.Serializable, Cloneable, Comparable<teacher_login_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teacher_login_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new teacher_login_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teacher_login_argsTupleSchemeFactory());
    }

    public String username; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teacher_login_args.class, metaDataMap);
    }

    public teacher_login_args() {
    }

    public teacher_login_args(
      String username,
      String password)
    {
      this();
      this.username = username;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teacher_login_args(teacher_login_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public teacher_login_args deepCopy() {
      return new teacher_login_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.password = null;
    }

    public String getUsername() {
      return this.username;
    }

    public teacher_login_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public teacher_login_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof teacher_login_args)
        return this.equals((teacher_login_args)that);
      return false;
    }

    public boolean equals(teacher_login_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(teacher_login_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("teacher_login_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teacher_login_argsStandardSchemeFactory implements SchemeFactory {
      public teacher_login_argsStandardScheme getScheme() {
        return new teacher_login_argsStandardScheme();
      }
    }

    private static class teacher_login_argsStandardScheme extends StandardScheme<teacher_login_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teacher_login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teacher_login_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teacher_login_argsTupleSchemeFactory implements SchemeFactory {
      public teacher_login_argsTupleScheme getScheme() {
        return new teacher_login_argsTupleScheme();
      }
    }

    private static class teacher_login_argsTupleScheme extends TupleScheme<teacher_login_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teacher_login_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teacher_login_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class teacher_login_result implements org.apache.thrift.TBase<teacher_login_result, teacher_login_result._Fields>, java.io.Serializable, Cloneable, Comparable<teacher_login_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teacher_login_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new teacher_login_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teacher_login_resultTupleSchemeFactory());
    }

    public TTeacher success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeacher.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teacher_login_result.class, metaDataMap);
    }

    public teacher_login_result() {
    }

    public teacher_login_result(
      TTeacher success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teacher_login_result(teacher_login_result other) {
      if (other.isSetSuccess()) {
        this.success = new TTeacher(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public teacher_login_result deepCopy() {
      return new teacher_login_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TTeacher getSuccess() {
      return this.success;
    }

    public teacher_login_result setSuccess(TTeacher success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public teacher_login_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TTeacher)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof teacher_login_result)
        return this.equals((teacher_login_result)that);
      return false;
    }

    public boolean equals(teacher_login_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(teacher_login_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("teacher_login_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teacher_login_resultStandardSchemeFactory implements SchemeFactory {
      public teacher_login_resultStandardScheme getScheme() {
        return new teacher_login_resultStandardScheme();
      }
    }

    private static class teacher_login_resultStandardScheme extends StandardScheme<teacher_login_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teacher_login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TTeacher();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teacher_login_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teacher_login_resultTupleSchemeFactory implements SchemeFactory {
      public teacher_login_resultTupleScheme getScheme() {
        return new teacher_login_resultTupleScheme();
      }
    }

    private static class teacher_login_resultTupleScheme extends TupleScheme<teacher_login_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teacher_login_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teacher_login_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TTeacher();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class teacher_register_args implements org.apache.thrift.TBase<teacher_register_args, teacher_register_args._Fields>, java.io.Serializable, Cloneable, Comparable<teacher_register_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teacher_register_args");

    private static final org.apache.thrift.protocol.TField TEACHER_FIELD_DESC = new org.apache.thrift.protocol.TField("teacher", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new teacher_register_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teacher_register_argsTupleSchemeFactory());
    }

    public TTeacher teacher; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEACHER((short)1, "teacher");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEACHER
            return TEACHER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEACHER, new org.apache.thrift.meta_data.FieldMetaData("teacher", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeacher.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teacher_register_args.class, metaDataMap);
    }

    public teacher_register_args() {
    }

    public teacher_register_args(
      TTeacher teacher)
    {
      this();
      this.teacher = teacher;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teacher_register_args(teacher_register_args other) {
      if (other.isSetTeacher()) {
        this.teacher = new TTeacher(other.teacher);
      }
    }

    public teacher_register_args deepCopy() {
      return new teacher_register_args(this);
    }

    @Override
    public void clear() {
      this.teacher = null;
    }

    public TTeacher getTeacher() {
      return this.teacher;
    }

    public teacher_register_args setTeacher(TTeacher teacher) {
      this.teacher = teacher;
      return this;
    }

    public void unsetTeacher() {
      this.teacher = null;
    }

    /** Returns true if field teacher is set (has been assigned a value) and false otherwise */
    public boolean isSetTeacher() {
      return this.teacher != null;
    }

    public void setTeacherIsSet(boolean value) {
      if (!value) {
        this.teacher = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEACHER:
        if (value == null) {
          unsetTeacher();
        } else {
          setTeacher((TTeacher)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEACHER:
        return getTeacher();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEACHER:
        return isSetTeacher();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof teacher_register_args)
        return this.equals((teacher_register_args)that);
      return false;
    }

    public boolean equals(teacher_register_args that) {
      if (that == null)
        return false;

      boolean this_present_teacher = true && this.isSetTeacher();
      boolean that_present_teacher = true && that.isSetTeacher();
      if (this_present_teacher || that_present_teacher) {
        if (!(this_present_teacher && that_present_teacher))
          return false;
        if (!this.teacher.equals(that.teacher))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(teacher_register_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTeacher()).compareTo(other.isSetTeacher());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeacher()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacher, other.teacher);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("teacher_register_args(");
      boolean first = true;

      sb.append("teacher:");
      if (this.teacher == null) {
        sb.append("null");
      } else {
        sb.append(this.teacher);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (teacher != null) {
        teacher.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teacher_register_argsStandardSchemeFactory implements SchemeFactory {
      public teacher_register_argsStandardScheme getScheme() {
        return new teacher_register_argsStandardScheme();
      }
    }

    private static class teacher_register_argsStandardScheme extends StandardScheme<teacher_register_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teacher_register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEACHER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.teacher = new TTeacher();
                struct.teacher.read(iprot);
                struct.setTeacherIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teacher_register_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.teacher != null) {
          oprot.writeFieldBegin(TEACHER_FIELD_DESC);
          struct.teacher.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teacher_register_argsTupleSchemeFactory implements SchemeFactory {
      public teacher_register_argsTupleScheme getScheme() {
        return new teacher_register_argsTupleScheme();
      }
    }

    private static class teacher_register_argsTupleScheme extends TupleScheme<teacher_register_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teacher_register_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTeacher()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTeacher()) {
          struct.teacher.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teacher_register_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.teacher = new TTeacher();
          struct.teacher.read(iprot);
          struct.setTeacherIsSet(true);
        }
      }
    }

  }

  public static class teacher_register_result implements org.apache.thrift.TBase<teacher_register_result, teacher_register_result._Fields>, java.io.Serializable, Cloneable, Comparable<teacher_register_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teacher_register_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new teacher_register_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teacher_register_resultTupleSchemeFactory());
    }

    public TTeacher success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeacher.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teacher_register_result.class, metaDataMap);
    }

    public teacher_register_result() {
    }

    public teacher_register_result(
      TTeacher success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teacher_register_result(teacher_register_result other) {
      if (other.isSetSuccess()) {
        this.success = new TTeacher(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public teacher_register_result deepCopy() {
      return new teacher_register_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TTeacher getSuccess() {
      return this.success;
    }

    public teacher_register_result setSuccess(TTeacher success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public teacher_register_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TTeacher)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof teacher_register_result)
        return this.equals((teacher_register_result)that);
      return false;
    }

    public boolean equals(teacher_register_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(teacher_register_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("teacher_register_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teacher_register_resultStandardSchemeFactory implements SchemeFactory {
      public teacher_register_resultStandardScheme getScheme() {
        return new teacher_register_resultStandardScheme();
      }
    }

    private static class teacher_register_resultStandardScheme extends StandardScheme<teacher_register_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teacher_register_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TTeacher();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teacher_register_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teacher_register_resultTupleSchemeFactory implements SchemeFactory {
      public teacher_register_resultTupleScheme getScheme() {
        return new teacher_register_resultTupleScheme();
      }
    }

    private static class teacher_register_resultTupleScheme extends TupleScheme<teacher_register_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teacher_register_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teacher_register_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TTeacher();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class teacher_getUserById_args implements org.apache.thrift.TBase<teacher_getUserById_args, teacher_getUserById_args._Fields>, java.io.Serializable, Cloneable, Comparable<teacher_getUserById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teacher_getUserById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new teacher_getUserById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teacher_getUserById_argsTupleSchemeFactory());
    }

    public int id; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teacher_getUserById_args.class, metaDataMap);
    }

    public teacher_getUserById_args() {
    }

    public teacher_getUserById_args(
      int id,
      String access_token)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teacher_getUserById_args(teacher_getUserById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public teacher_getUserById_args deepCopy() {
      return new teacher_getUserById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.access_token = null;
    }

    public int getId() {
      return this.id;
    }

    public teacher_getUserById_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public teacher_getUserById_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof teacher_getUserById_args)
        return this.equals((teacher_getUserById_args)that);
      return false;
    }

    public boolean equals(teacher_getUserById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(teacher_getUserById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("teacher_getUserById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teacher_getUserById_argsStandardSchemeFactory implements SchemeFactory {
      public teacher_getUserById_argsStandardScheme getScheme() {
        return new teacher_getUserById_argsStandardScheme();
      }
    }

    private static class teacher_getUserById_argsStandardScheme extends StandardScheme<teacher_getUserById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teacher_getUserById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teacher_getUserById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teacher_getUserById_argsTupleSchemeFactory implements SchemeFactory {
      public teacher_getUserById_argsTupleScheme getScheme() {
        return new teacher_getUserById_argsTupleScheme();
      }
    }

    private static class teacher_getUserById_argsTupleScheme extends TupleScheme<teacher_getUserById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teacher_getUserById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teacher_getUserById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class teacher_getUserById_result implements org.apache.thrift.TBase<teacher_getUserById_result, teacher_getUserById_result._Fields>, java.io.Serializable, Cloneable, Comparable<teacher_getUserById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teacher_getUserById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new teacher_getUserById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teacher_getUserById_resultTupleSchemeFactory());
    }

    public TTeacher success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeacher.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teacher_getUserById_result.class, metaDataMap);
    }

    public teacher_getUserById_result() {
    }

    public teacher_getUserById_result(
      TTeacher success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teacher_getUserById_result(teacher_getUserById_result other) {
      if (other.isSetSuccess()) {
        this.success = new TTeacher(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public teacher_getUserById_result deepCopy() {
      return new teacher_getUserById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TTeacher getSuccess() {
      return this.success;
    }

    public teacher_getUserById_result setSuccess(TTeacher success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public teacher_getUserById_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TTeacher)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof teacher_getUserById_result)
        return this.equals((teacher_getUserById_result)that);
      return false;
    }

    public boolean equals(teacher_getUserById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(teacher_getUserById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("teacher_getUserById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teacher_getUserById_resultStandardSchemeFactory implements SchemeFactory {
      public teacher_getUserById_resultStandardScheme getScheme() {
        return new teacher_getUserById_resultStandardScheme();
      }
    }

    private static class teacher_getUserById_resultStandardScheme extends StandardScheme<teacher_getUserById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teacher_getUserById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TTeacher();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teacher_getUserById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teacher_getUserById_resultTupleSchemeFactory implements SchemeFactory {
      public teacher_getUserById_resultTupleScheme getScheme() {
        return new teacher_getUserById_resultTupleScheme();
      }
    }

    private static class teacher_getUserById_resultTupleScheme extends TupleScheme<teacher_getUserById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teacher_getUserById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teacher_getUserById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TTeacher();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class teacher_getUserByloginName_args implements org.apache.thrift.TBase<teacher_getUserByloginName_args, teacher_getUserByloginName_args._Fields>, java.io.Serializable, Cloneable, Comparable<teacher_getUserByloginName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teacher_getUserByloginName_args");

    private static final org.apache.thrift.protocol.TField LOGINNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginname", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new teacher_getUserByloginName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teacher_getUserByloginName_argsTupleSchemeFactory());
    }

    public String loginname; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOGINNAME((short)1, "loginname"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOGINNAME
            return LOGINNAME;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOGINNAME, new org.apache.thrift.meta_data.FieldMetaData("loginname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teacher_getUserByloginName_args.class, metaDataMap);
    }

    public teacher_getUserByloginName_args() {
    }

    public teacher_getUserByloginName_args(
      String loginname,
      String access_token)
    {
      this();
      this.loginname = loginname;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teacher_getUserByloginName_args(teacher_getUserByloginName_args other) {
      if (other.isSetLoginname()) {
        this.loginname = other.loginname;
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public teacher_getUserByloginName_args deepCopy() {
      return new teacher_getUserByloginName_args(this);
    }

    @Override
    public void clear() {
      this.loginname = null;
      this.access_token = null;
    }

    public String getLoginname() {
      return this.loginname;
    }

    public teacher_getUserByloginName_args setLoginname(String loginname) {
      this.loginname = loginname;
      return this;
    }

    public void unsetLoginname() {
      this.loginname = null;
    }

    /** Returns true if field loginname is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginname() {
      return this.loginname != null;
    }

    public void setLoginnameIsSet(boolean value) {
      if (!value) {
        this.loginname = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public teacher_getUserByloginName_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOGINNAME:
        if (value == null) {
          unsetLoginname();
        } else {
          setLoginname((String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOGINNAME:
        return getLoginname();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOGINNAME:
        return isSetLoginname();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof teacher_getUserByloginName_args)
        return this.equals((teacher_getUserByloginName_args)that);
      return false;
    }

    public boolean equals(teacher_getUserByloginName_args that) {
      if (that == null)
        return false;

      boolean this_present_loginname = true && this.isSetLoginname();
      boolean that_present_loginname = true && that.isSetLoginname();
      if (this_present_loginname || that_present_loginname) {
        if (!(this_present_loginname && that_present_loginname))
          return false;
        if (!this.loginname.equals(that.loginname))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(teacher_getUserByloginName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoginname()).compareTo(other.isSetLoginname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginname, other.loginname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("teacher_getUserByloginName_args(");
      boolean first = true;

      sb.append("loginname:");
      if (this.loginname == null) {
        sb.append("null");
      } else {
        sb.append(this.loginname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teacher_getUserByloginName_argsStandardSchemeFactory implements SchemeFactory {
      public teacher_getUserByloginName_argsStandardScheme getScheme() {
        return new teacher_getUserByloginName_argsStandardScheme();
      }
    }

    private static class teacher_getUserByloginName_argsStandardScheme extends StandardScheme<teacher_getUserByloginName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teacher_getUserByloginName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOGINNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginname = iprot.readString();
                struct.setLoginnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teacher_getUserByloginName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.loginname != null) {
          oprot.writeFieldBegin(LOGINNAME_FIELD_DESC);
          oprot.writeString(struct.loginname);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teacher_getUserByloginName_argsTupleSchemeFactory implements SchemeFactory {
      public teacher_getUserByloginName_argsTupleScheme getScheme() {
        return new teacher_getUserByloginName_argsTupleScheme();
      }
    }

    private static class teacher_getUserByloginName_argsTupleScheme extends TupleScheme<teacher_getUserByloginName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teacher_getUserByloginName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoginname()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLoginname()) {
          oprot.writeString(struct.loginname);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teacher_getUserByloginName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.loginname = iprot.readString();
          struct.setLoginnameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class teacher_getUserByloginName_result implements org.apache.thrift.TBase<teacher_getUserByloginName_result, teacher_getUserByloginName_result._Fields>, java.io.Serializable, Cloneable, Comparable<teacher_getUserByloginName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teacher_getUserByloginName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new teacher_getUserByloginName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teacher_getUserByloginName_resultTupleSchemeFactory());
    }

    public TTeacher success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeacher.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teacher_getUserByloginName_result.class, metaDataMap);
    }

    public teacher_getUserByloginName_result() {
    }

    public teacher_getUserByloginName_result(
      TTeacher success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teacher_getUserByloginName_result(teacher_getUserByloginName_result other) {
      if (other.isSetSuccess()) {
        this.success = new TTeacher(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public teacher_getUserByloginName_result deepCopy() {
      return new teacher_getUserByloginName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TTeacher getSuccess() {
      return this.success;
    }

    public teacher_getUserByloginName_result setSuccess(TTeacher success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public teacher_getUserByloginName_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TTeacher)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof teacher_getUserByloginName_result)
        return this.equals((teacher_getUserByloginName_result)that);
      return false;
    }

    public boolean equals(teacher_getUserByloginName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(teacher_getUserByloginName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("teacher_getUserByloginName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teacher_getUserByloginName_resultStandardSchemeFactory implements SchemeFactory {
      public teacher_getUserByloginName_resultStandardScheme getScheme() {
        return new teacher_getUserByloginName_resultStandardScheme();
      }
    }

    private static class teacher_getUserByloginName_resultStandardScheme extends StandardScheme<teacher_getUserByloginName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teacher_getUserByloginName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TTeacher();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teacher_getUserByloginName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teacher_getUserByloginName_resultTupleSchemeFactory implements SchemeFactory {
      public teacher_getUserByloginName_resultTupleScheme getScheme() {
        return new teacher_getUserByloginName_resultTupleScheme();
      }
    }

    private static class teacher_getUserByloginName_resultTupleScheme extends TupleScheme<teacher_getUserByloginName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teacher_getUserByloginName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teacher_getUserByloginName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TTeacher();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class teacher_doUpdate_args implements org.apache.thrift.TBase<teacher_doUpdate_args, teacher_doUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<teacher_doUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teacher_doUpdate_args");

    private static final org.apache.thrift.protocol.TField TEACHER_FIELD_DESC = new org.apache.thrift.protocol.TField("teacher", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new teacher_doUpdate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teacher_doUpdate_argsTupleSchemeFactory());
    }

    public TTeacher teacher; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEACHER((short)1, "teacher"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEACHER
            return TEACHER;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEACHER, new org.apache.thrift.meta_data.FieldMetaData("teacher", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeacher.class)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teacher_doUpdate_args.class, metaDataMap);
    }

    public teacher_doUpdate_args() {
    }

    public teacher_doUpdate_args(
      TTeacher teacher,
      String access_token)
    {
      this();
      this.teacher = teacher;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teacher_doUpdate_args(teacher_doUpdate_args other) {
      if (other.isSetTeacher()) {
        this.teacher = new TTeacher(other.teacher);
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public teacher_doUpdate_args deepCopy() {
      return new teacher_doUpdate_args(this);
    }

    @Override
    public void clear() {
      this.teacher = null;
      this.access_token = null;
    }

    public TTeacher getTeacher() {
      return this.teacher;
    }

    public teacher_doUpdate_args setTeacher(TTeacher teacher) {
      this.teacher = teacher;
      return this;
    }

    public void unsetTeacher() {
      this.teacher = null;
    }

    /** Returns true if field teacher is set (has been assigned a value) and false otherwise */
    public boolean isSetTeacher() {
      return this.teacher != null;
    }

    public void setTeacherIsSet(boolean value) {
      if (!value) {
        this.teacher = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public teacher_doUpdate_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEACHER:
        if (value == null) {
          unsetTeacher();
        } else {
          setTeacher((TTeacher)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEACHER:
        return getTeacher();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEACHER:
        return isSetTeacher();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof teacher_doUpdate_args)
        return this.equals((teacher_doUpdate_args)that);
      return false;
    }

    public boolean equals(teacher_doUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_teacher = true && this.isSetTeacher();
      boolean that_present_teacher = true && that.isSetTeacher();
      if (this_present_teacher || that_present_teacher) {
        if (!(this_present_teacher && that_present_teacher))
          return false;
        if (!this.teacher.equals(that.teacher))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(teacher_doUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTeacher()).compareTo(other.isSetTeacher());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeacher()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacher, other.teacher);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("teacher_doUpdate_args(");
      boolean first = true;

      sb.append("teacher:");
      if (this.teacher == null) {
        sb.append("null");
      } else {
        sb.append(this.teacher);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (teacher != null) {
        teacher.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teacher_doUpdate_argsStandardSchemeFactory implements SchemeFactory {
      public teacher_doUpdate_argsStandardScheme getScheme() {
        return new teacher_doUpdate_argsStandardScheme();
      }
    }

    private static class teacher_doUpdate_argsStandardScheme extends StandardScheme<teacher_doUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teacher_doUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEACHER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.teacher = new TTeacher();
                struct.teacher.read(iprot);
                struct.setTeacherIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teacher_doUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.teacher != null) {
          oprot.writeFieldBegin(TEACHER_FIELD_DESC);
          struct.teacher.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teacher_doUpdate_argsTupleSchemeFactory implements SchemeFactory {
      public teacher_doUpdate_argsTupleScheme getScheme() {
        return new teacher_doUpdate_argsTupleScheme();
      }
    }

    private static class teacher_doUpdate_argsTupleScheme extends TupleScheme<teacher_doUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teacher_doUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTeacher()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTeacher()) {
          struct.teacher.write(oprot);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teacher_doUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.teacher = new TTeacher();
          struct.teacher.read(iprot);
          struct.setTeacherIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class teacher_doUpdate_result implements org.apache.thrift.TBase<teacher_doUpdate_result, teacher_doUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<teacher_doUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teacher_doUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new teacher_doUpdate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teacher_doUpdate_resultTupleSchemeFactory());
    }

    public TTeacher success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeacher.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teacher_doUpdate_result.class, metaDataMap);
    }

    public teacher_doUpdate_result() {
    }

    public teacher_doUpdate_result(
      TTeacher success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teacher_doUpdate_result(teacher_doUpdate_result other) {
      if (other.isSetSuccess()) {
        this.success = new TTeacher(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public teacher_doUpdate_result deepCopy() {
      return new teacher_doUpdate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TTeacher getSuccess() {
      return this.success;
    }

    public teacher_doUpdate_result setSuccess(TTeacher success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public teacher_doUpdate_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TTeacher)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof teacher_doUpdate_result)
        return this.equals((teacher_doUpdate_result)that);
      return false;
    }

    public boolean equals(teacher_doUpdate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(teacher_doUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("teacher_doUpdate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teacher_doUpdate_resultStandardSchemeFactory implements SchemeFactory {
      public teacher_doUpdate_resultStandardScheme getScheme() {
        return new teacher_doUpdate_resultStandardScheme();
      }
    }

    private static class teacher_doUpdate_resultStandardScheme extends StandardScheme<teacher_doUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teacher_doUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TTeacher();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teacher_doUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teacher_doUpdate_resultTupleSchemeFactory implements SchemeFactory {
      public teacher_doUpdate_resultTupleScheme getScheme() {
        return new teacher_doUpdate_resultTupleScheme();
      }
    }

    private static class teacher_doUpdate_resultTupleScheme extends TupleScheme<teacher_doUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teacher_doUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teacher_doUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TTeacher();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class teacher_getAll_args implements org.apache.thrift.TBase<teacher_getAll_args, teacher_getAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<teacher_getAll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teacher_getAll_args");

    private static final org.apache.thrift.protocol.TField FROM_RECORD_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("fromRecordNumber", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TO_RECORD_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("toRecordNumber", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new teacher_getAll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teacher_getAll_argsTupleSchemeFactory());
    }

    public int fromRecordNumber; // required
    public int toRecordNumber; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FROM_RECORD_NUMBER((short)1, "fromRecordNumber"),
      TO_RECORD_NUMBER((short)2, "toRecordNumber"),
      ACCESS_TOKEN((short)3, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FROM_RECORD_NUMBER
            return FROM_RECORD_NUMBER;
          case 2: // TO_RECORD_NUMBER
            return TO_RECORD_NUMBER;
          case 3: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FROMRECORDNUMBER_ISSET_ID = 0;
    private static final int __TORECORDNUMBER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FROM_RECORD_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("fromRecordNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TO_RECORD_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("toRecordNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teacher_getAll_args.class, metaDataMap);
    }

    public teacher_getAll_args() {
    }

    public teacher_getAll_args(
      int fromRecordNumber,
      int toRecordNumber,
      String access_token)
    {
      this();
      this.fromRecordNumber = fromRecordNumber;
      setFromRecordNumberIsSet(true);
      this.toRecordNumber = toRecordNumber;
      setToRecordNumberIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teacher_getAll_args(teacher_getAll_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fromRecordNumber = other.fromRecordNumber;
      this.toRecordNumber = other.toRecordNumber;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public teacher_getAll_args deepCopy() {
      return new teacher_getAll_args(this);
    }

    @Override
    public void clear() {
      setFromRecordNumberIsSet(false);
      this.fromRecordNumber = 0;
      setToRecordNumberIsSet(false);
      this.toRecordNumber = 0;
      this.access_token = null;
    }

    public int getFromRecordNumber() {
      return this.fromRecordNumber;
    }

    public teacher_getAll_args setFromRecordNumber(int fromRecordNumber) {
      this.fromRecordNumber = fromRecordNumber;
      setFromRecordNumberIsSet(true);
      return this;
    }

    public void unsetFromRecordNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMRECORDNUMBER_ISSET_ID);
    }

    /** Returns true if field fromRecordNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetFromRecordNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __FROMRECORDNUMBER_ISSET_ID);
    }

    public void setFromRecordNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMRECORDNUMBER_ISSET_ID, value);
    }

    public int getToRecordNumber() {
      return this.toRecordNumber;
    }

    public teacher_getAll_args setToRecordNumber(int toRecordNumber) {
      this.toRecordNumber = toRecordNumber;
      setToRecordNumberIsSet(true);
      return this;
    }

    public void unsetToRecordNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TORECORDNUMBER_ISSET_ID);
    }

    /** Returns true if field toRecordNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetToRecordNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __TORECORDNUMBER_ISSET_ID);
    }

    public void setToRecordNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TORECORDNUMBER_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public teacher_getAll_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FROM_RECORD_NUMBER:
        if (value == null) {
          unsetFromRecordNumber();
        } else {
          setFromRecordNumber((Integer)value);
        }
        break;

      case TO_RECORD_NUMBER:
        if (value == null) {
          unsetToRecordNumber();
        } else {
          setToRecordNumber((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FROM_RECORD_NUMBER:
        return Integer.valueOf(getFromRecordNumber());

      case TO_RECORD_NUMBER:
        return Integer.valueOf(getToRecordNumber());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FROM_RECORD_NUMBER:
        return isSetFromRecordNumber();
      case TO_RECORD_NUMBER:
        return isSetToRecordNumber();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof teacher_getAll_args)
        return this.equals((teacher_getAll_args)that);
      return false;
    }

    public boolean equals(teacher_getAll_args that) {
      if (that == null)
        return false;

      boolean this_present_fromRecordNumber = true;
      boolean that_present_fromRecordNumber = true;
      if (this_present_fromRecordNumber || that_present_fromRecordNumber) {
        if (!(this_present_fromRecordNumber && that_present_fromRecordNumber))
          return false;
        if (this.fromRecordNumber != that.fromRecordNumber)
          return false;
      }

      boolean this_present_toRecordNumber = true;
      boolean that_present_toRecordNumber = true;
      if (this_present_toRecordNumber || that_present_toRecordNumber) {
        if (!(this_present_toRecordNumber && that_present_toRecordNumber))
          return false;
        if (this.toRecordNumber != that.toRecordNumber)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(teacher_getAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFromRecordNumber()).compareTo(other.isSetFromRecordNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromRecordNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromRecordNumber, other.fromRecordNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToRecordNumber()).compareTo(other.isSetToRecordNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToRecordNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toRecordNumber, other.toRecordNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("teacher_getAll_args(");
      boolean first = true;

      sb.append("fromRecordNumber:");
      sb.append(this.fromRecordNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("toRecordNumber:");
      sb.append(this.toRecordNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teacher_getAll_argsStandardSchemeFactory implements SchemeFactory {
      public teacher_getAll_argsStandardScheme getScheme() {
        return new teacher_getAll_argsStandardScheme();
      }
    }

    private static class teacher_getAll_argsStandardScheme extends StandardScheme<teacher_getAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teacher_getAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FROM_RECORD_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fromRecordNumber = iprot.readI32();
                struct.setFromRecordNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TO_RECORD_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.toRecordNumber = iprot.readI32();
                struct.setToRecordNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teacher_getAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FROM_RECORD_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.fromRecordNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_RECORD_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.toRecordNumber);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teacher_getAll_argsTupleSchemeFactory implements SchemeFactory {
      public teacher_getAll_argsTupleScheme getScheme() {
        return new teacher_getAll_argsTupleScheme();
      }
    }

    private static class teacher_getAll_argsTupleScheme extends TupleScheme<teacher_getAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teacher_getAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFromRecordNumber()) {
          optionals.set(0);
        }
        if (struct.isSetToRecordNumber()) {
          optionals.set(1);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFromRecordNumber()) {
          oprot.writeI32(struct.fromRecordNumber);
        }
        if (struct.isSetToRecordNumber()) {
          oprot.writeI32(struct.toRecordNumber);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teacher_getAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.fromRecordNumber = iprot.readI32();
          struct.setFromRecordNumberIsSet(true);
        }
        if (incoming.get(1)) {
          struct.toRecordNumber = iprot.readI32();
          struct.setToRecordNumberIsSet(true);
        }
        if (incoming.get(2)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class teacher_getAll_result implements org.apache.thrift.TBase<teacher_getAll_result, teacher_getAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<teacher_getAll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teacher_getAll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new teacher_getAll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teacher_getAll_resultTupleSchemeFactory());
    }

    public List<TTeacher> success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeacher.class))));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teacher_getAll_result.class, metaDataMap);
    }

    public teacher_getAll_result() {
    }

    public teacher_getAll_result(
      List<TTeacher> success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teacher_getAll_result(teacher_getAll_result other) {
      if (other.isSetSuccess()) {
        List<TTeacher> __this__success = new ArrayList<TTeacher>(other.success.size());
        for (TTeacher other_element : other.success) {
          __this__success.add(new TTeacher(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public teacher_getAll_result deepCopy() {
      return new teacher_getAll_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TTeacher> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TTeacher elem) {
      if (this.success == null) {
        this.success = new ArrayList<TTeacher>();
      }
      this.success.add(elem);
    }

    public List<TTeacher> getSuccess() {
      return this.success;
    }

    public teacher_getAll_result setSuccess(List<TTeacher> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public teacher_getAll_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TTeacher>)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof teacher_getAll_result)
        return this.equals((teacher_getAll_result)that);
      return false;
    }

    public boolean equals(teacher_getAll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(teacher_getAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("teacher_getAll_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teacher_getAll_resultStandardSchemeFactory implements SchemeFactory {
      public teacher_getAll_resultStandardScheme getScheme() {
        return new teacher_getAll_resultStandardScheme();
      }
    }

    private static class teacher_getAll_resultStandardScheme extends StandardScheme<teacher_getAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teacher_getAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<TTeacher>(_list72.size);
                  for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                  {
                    TTeacher _elem74;
                    _elem74 = new TTeacher();
                    _elem74.read(iprot);
                    struct.success.add(_elem74);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teacher_getAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TTeacher _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teacher_getAll_resultTupleSchemeFactory implements SchemeFactory {
      public teacher_getAll_resultTupleScheme getScheme() {
        return new teacher_getAll_resultTupleScheme();
      }
    }

    private static class teacher_getAll_resultTupleScheme extends TupleScheme<teacher_getAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teacher_getAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TTeacher _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teacher_getAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TTeacher>(_list77.size);
            for (int _i78 = 0; _i78 < _list77.size; ++_i78)
            {
              TTeacher _elem79;
              _elem79 = new TTeacher();
              _elem79.read(iprot);
              struct.success.add(_elem79);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class teacher_logout_args implements org.apache.thrift.TBase<teacher_logout_args, teacher_logout_args._Fields>, java.io.Serializable, Cloneable, Comparable<teacher_logout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teacher_logout_args");

    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new teacher_logout_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teacher_logout_argsTupleSchemeFactory());
    }

    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_TOKEN((short)1, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teacher_logout_args.class, metaDataMap);
    }

    public teacher_logout_args() {
    }

    public teacher_logout_args(
      String access_token)
    {
      this();
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teacher_logout_args(teacher_logout_args other) {
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public teacher_logout_args deepCopy() {
      return new teacher_logout_args(this);
    }

    @Override
    public void clear() {
      this.access_token = null;
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public teacher_logout_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof teacher_logout_args)
        return this.equals((teacher_logout_args)that);
      return false;
    }

    public boolean equals(teacher_logout_args that) {
      if (that == null)
        return false;

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(teacher_logout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("teacher_logout_args(");
      boolean first = true;

      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teacher_logout_argsStandardSchemeFactory implements SchemeFactory {
      public teacher_logout_argsStandardScheme getScheme() {
        return new teacher_logout_argsStandardScheme();
      }
    }

    private static class teacher_logout_argsStandardScheme extends StandardScheme<teacher_logout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teacher_logout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teacher_logout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teacher_logout_argsTupleSchemeFactory implements SchemeFactory {
      public teacher_logout_argsTupleScheme getScheme() {
        return new teacher_logout_argsTupleScheme();
      }
    }

    private static class teacher_logout_argsTupleScheme extends TupleScheme<teacher_logout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teacher_logout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccess_token()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teacher_logout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class teacher_logout_result implements org.apache.thrift.TBase<teacher_logout_result, teacher_logout_result._Fields>, java.io.Serializable, Cloneable, Comparable<teacher_logout_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teacher_logout_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new teacher_logout_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teacher_logout_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teacher_logout_result.class, metaDataMap);
    }

    public teacher_logout_result() {
    }

    public teacher_logout_result(
      boolean success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teacher_logout_result(teacher_logout_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public teacher_logout_result deepCopy() {
      return new teacher_logout_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.myerror = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public teacher_logout_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public teacher_logout_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof teacher_logout_result)
        return this.equals((teacher_logout_result)that);
      return false;
    }

    public boolean equals(teacher_logout_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(teacher_logout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("teacher_logout_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teacher_logout_resultStandardSchemeFactory implements SchemeFactory {
      public teacher_logout_resultStandardScheme getScheme() {
        return new teacher_logout_resultStandardScheme();
      }
    }

    private static class teacher_logout_resultStandardScheme extends StandardScheme<teacher_logout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teacher_logout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teacher_logout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teacher_logout_resultTupleSchemeFactory implements SchemeFactory {
      public teacher_logout_resultTupleScheme getScheme() {
        return new teacher_logout_resultTupleScheme();
      }
    }

    private static class teacher_logout_resultTupleScheme extends TupleScheme<teacher_logout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teacher_logout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teacher_logout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class teacher_delete_args implements org.apache.thrift.TBase<teacher_delete_args, teacher_delete_args._Fields>, java.io.Serializable, Cloneable, Comparable<teacher_delete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teacher_delete_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new teacher_delete_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teacher_delete_argsTupleSchemeFactory());
    }

    public int id; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teacher_delete_args.class, metaDataMap);
    }

    public teacher_delete_args() {
    }

    public teacher_delete_args(
      int id,
      String access_token)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teacher_delete_args(teacher_delete_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public teacher_delete_args deepCopy() {
      return new teacher_delete_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.access_token = null;
    }

    public int getId() {
      return this.id;
    }

    public teacher_delete_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public teacher_delete_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof teacher_delete_args)
        return this.equals((teacher_delete_args)that);
      return false;
    }

    public boolean equals(teacher_delete_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(teacher_delete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("teacher_delete_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teacher_delete_argsStandardSchemeFactory implements SchemeFactory {
      public teacher_delete_argsStandardScheme getScheme() {
        return new teacher_delete_argsStandardScheme();
      }
    }

    private static class teacher_delete_argsStandardScheme extends StandardScheme<teacher_delete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teacher_delete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teacher_delete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teacher_delete_argsTupleSchemeFactory implements SchemeFactory {
      public teacher_delete_argsTupleScheme getScheme() {
        return new teacher_delete_argsTupleScheme();
      }
    }

    private static class teacher_delete_argsTupleScheme extends TupleScheme<teacher_delete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teacher_delete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teacher_delete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class teacher_delete_result implements org.apache.thrift.TBase<teacher_delete_result, teacher_delete_result._Fields>, java.io.Serializable, Cloneable, Comparable<teacher_delete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teacher_delete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new teacher_delete_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teacher_delete_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teacher_delete_result.class, metaDataMap);
    }

    public teacher_delete_result() {
    }

    public teacher_delete_result(
      boolean success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teacher_delete_result(teacher_delete_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public teacher_delete_result deepCopy() {
      return new teacher_delete_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.myerror = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public teacher_delete_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public teacher_delete_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof teacher_delete_result)
        return this.equals((teacher_delete_result)that);
      return false;
    }

    public boolean equals(teacher_delete_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(teacher_delete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("teacher_delete_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teacher_delete_resultStandardSchemeFactory implements SchemeFactory {
      public teacher_delete_resultStandardScheme getScheme() {
        return new teacher_delete_resultStandardScheme();
      }
    }

    private static class teacher_delete_resultStandardScheme extends StandardScheme<teacher_delete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teacher_delete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teacher_delete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teacher_delete_resultTupleSchemeFactory implements SchemeFactory {
      public teacher_delete_resultTupleScheme getScheme() {
        return new teacher_delete_resultTupleScheme();
      }
    }

    private static class teacher_delete_resultTupleScheme extends TupleScheme<teacher_delete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teacher_delete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teacher_delete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class teacher_updatepassword_args implements org.apache.thrift.TBase<teacher_updatepassword_args, teacher_updatepassword_args._Fields>, java.io.Serializable, Cloneable, Comparable<teacher_updatepassword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teacher_updatepassword_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new teacher_updatepassword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teacher_updatepassword_argsTupleSchemeFactory());
    }

    public int id; // required
    public String password; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      PASSWORD((short)2, "password"),
      ACCESS_TOKEN((short)3, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // PASSWORD
            return PASSWORD;
          case 3: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teacher_updatepassword_args.class, metaDataMap);
    }

    public teacher_updatepassword_args() {
    }

    public teacher_updatepassword_args(
      int id,
      String password,
      String access_token)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.password = password;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teacher_updatepassword_args(teacher_updatepassword_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public teacher_updatepassword_args deepCopy() {
      return new teacher_updatepassword_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.password = null;
      this.access_token = null;
    }

    public int getId() {
      return this.id;
    }

    public teacher_updatepassword_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getPassword() {
      return this.password;
    }

    public teacher_updatepassword_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public teacher_updatepassword_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      case PASSWORD:
        return getPassword();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case PASSWORD:
        return isSetPassword();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof teacher_updatepassword_args)
        return this.equals((teacher_updatepassword_args)that);
      return false;
    }

    public boolean equals(teacher_updatepassword_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(teacher_updatepassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("teacher_updatepassword_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teacher_updatepassword_argsStandardSchemeFactory implements SchemeFactory {
      public teacher_updatepassword_argsStandardScheme getScheme() {
        return new teacher_updatepassword_argsStandardScheme();
      }
    }

    private static class teacher_updatepassword_argsStandardScheme extends StandardScheme<teacher_updatepassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teacher_updatepassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teacher_updatepassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teacher_updatepassword_argsTupleSchemeFactory implements SchemeFactory {
      public teacher_updatepassword_argsTupleScheme getScheme() {
        return new teacher_updatepassword_argsTupleScheme();
      }
    }

    private static class teacher_updatepassword_argsTupleScheme extends TupleScheme<teacher_updatepassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teacher_updatepassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teacher_updatepassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(2)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class teacher_updatepassword_result implements org.apache.thrift.TBase<teacher_updatepassword_result, teacher_updatepassword_result._Fields>, java.io.Serializable, Cloneable, Comparable<teacher_updatepassword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teacher_updatepassword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new teacher_updatepassword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teacher_updatepassword_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teacher_updatepassword_result.class, metaDataMap);
    }

    public teacher_updatepassword_result() {
    }

    public teacher_updatepassword_result(
      boolean success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teacher_updatepassword_result(teacher_updatepassword_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public teacher_updatepassword_result deepCopy() {
      return new teacher_updatepassword_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.myerror = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public teacher_updatepassword_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public teacher_updatepassword_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof teacher_updatepassword_result)
        return this.equals((teacher_updatepassword_result)that);
      return false;
    }

    public boolean equals(teacher_updatepassword_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(teacher_updatepassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("teacher_updatepassword_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teacher_updatepassword_resultStandardSchemeFactory implements SchemeFactory {
      public teacher_updatepassword_resultStandardScheme getScheme() {
        return new teacher_updatepassword_resultStandardScheme();
      }
    }

    private static class teacher_updatepassword_resultStandardScheme extends StandardScheme<teacher_updatepassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teacher_updatepassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teacher_updatepassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teacher_updatepassword_resultTupleSchemeFactory implements SchemeFactory {
      public teacher_updatepassword_resultTupleScheme getScheme() {
        return new teacher_updatepassword_resultTupleScheme();
      }
    }

    private static class teacher_updatepassword_resultTupleScheme extends TupleScheme<teacher_updatepassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teacher_updatepassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teacher_updatepassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class download_geturl_args implements org.apache.thrift.TBase<download_geturl_args, download_geturl_args._Fields>, java.io.Serializable, Cloneable, Comparable<download_geturl_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("download_geturl_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new download_geturl_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new download_geturl_argsTupleSchemeFactory());
    }

    public String code; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(download_geturl_args.class, metaDataMap);
    }

    public download_geturl_args() {
    }

    public download_geturl_args(
      String code)
    {
      this();
      this.code = code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public download_geturl_args(download_geturl_args other) {
      if (other.isSetCode()) {
        this.code = other.code;
      }
    }

    public download_geturl_args deepCopy() {
      return new download_geturl_args(this);
    }

    @Override
    public void clear() {
      this.code = null;
    }

    public String getCode() {
      return this.code;
    }

    public download_geturl_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return getCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return isSetCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof download_geturl_args)
        return this.equals((download_geturl_args)that);
      return false;
    }

    public boolean equals(download_geturl_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(download_geturl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("download_geturl_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class download_geturl_argsStandardSchemeFactory implements SchemeFactory {
      public download_geturl_argsStandardScheme getScheme() {
        return new download_geturl_argsStandardScheme();
      }
    }

    private static class download_geturl_argsStandardScheme extends StandardScheme<download_geturl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, download_geturl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, download_geturl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class download_geturl_argsTupleSchemeFactory implements SchemeFactory {
      public download_geturl_argsTupleScheme getScheme() {
        return new download_geturl_argsTupleScheme();
      }
    }

    private static class download_geturl_argsTupleScheme extends TupleScheme<download_geturl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, download_geturl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, download_geturl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
      }
    }

  }

  public static class download_geturl_result implements org.apache.thrift.TBase<download_geturl_result, download_geturl_result._Fields>, java.io.Serializable, Cloneable, Comparable<download_geturl_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("download_geturl_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new download_geturl_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new download_geturl_resultTupleSchemeFactory());
    }

    public String success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(download_geturl_result.class, metaDataMap);
    }

    public download_geturl_result() {
    }

    public download_geturl_result(
      String success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public download_geturl_result(download_geturl_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public download_geturl_result deepCopy() {
      return new download_geturl_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public download_geturl_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public download_geturl_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof download_geturl_result)
        return this.equals((download_geturl_result)that);
      return false;
    }

    public boolean equals(download_geturl_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(download_geturl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("download_geturl_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class download_geturl_resultStandardSchemeFactory implements SchemeFactory {
      public download_geturl_resultStandardScheme getScheme() {
        return new download_geturl_resultStandardScheme();
      }
    }

    private static class download_geturl_resultStandardScheme extends StandardScheme<download_geturl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, download_geturl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, download_geturl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class download_geturl_resultTupleSchemeFactory implements SchemeFactory {
      public download_geturl_resultTupleScheme getScheme() {
        return new download_geturl_resultTupleScheme();
      }
    }

    private static class download_geturl_resultTupleScheme extends TupleScheme<download_geturl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, download_geturl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, download_geturl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class user_getType_args implements org.apache.thrift.TBase<user_getType_args, user_getType_args._Fields>, java.io.Serializable, Cloneable, Comparable<user_getType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_getType_args");

    private static final org.apache.thrift.protocol.TField LOGINNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginname", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_getType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_getType_argsTupleSchemeFactory());
    }

    public String loginname; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOGINNAME((short)1, "loginname"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOGINNAME
            return LOGINNAME;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOGINNAME, new org.apache.thrift.meta_data.FieldMetaData("loginname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_getType_args.class, metaDataMap);
    }

    public user_getType_args() {
    }

    public user_getType_args(
      String loginname,
      String access_token)
    {
      this();
      this.loginname = loginname;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_getType_args(user_getType_args other) {
      if (other.isSetLoginname()) {
        this.loginname = other.loginname;
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public user_getType_args deepCopy() {
      return new user_getType_args(this);
    }

    @Override
    public void clear() {
      this.loginname = null;
      this.access_token = null;
    }

    public String getLoginname() {
      return this.loginname;
    }

    public user_getType_args setLoginname(String loginname) {
      this.loginname = loginname;
      return this;
    }

    public void unsetLoginname() {
      this.loginname = null;
    }

    /** Returns true if field loginname is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginname() {
      return this.loginname != null;
    }

    public void setLoginnameIsSet(boolean value) {
      if (!value) {
        this.loginname = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public user_getType_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOGINNAME:
        if (value == null) {
          unsetLoginname();
        } else {
          setLoginname((String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOGINNAME:
        return getLoginname();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOGINNAME:
        return isSetLoginname();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_getType_args)
        return this.equals((user_getType_args)that);
      return false;
    }

    public boolean equals(user_getType_args that) {
      if (that == null)
        return false;

      boolean this_present_loginname = true && this.isSetLoginname();
      boolean that_present_loginname = true && that.isSetLoginname();
      if (this_present_loginname || that_present_loginname) {
        if (!(this_present_loginname && that_present_loginname))
          return false;
        if (!this.loginname.equals(that.loginname))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(user_getType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoginname()).compareTo(other.isSetLoginname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginname, other.loginname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_getType_args(");
      boolean first = true;

      sb.append("loginname:");
      if (this.loginname == null) {
        sb.append("null");
      } else {
        sb.append(this.loginname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_getType_argsStandardSchemeFactory implements SchemeFactory {
      public user_getType_argsStandardScheme getScheme() {
        return new user_getType_argsStandardScheme();
      }
    }

    private static class user_getType_argsStandardScheme extends StandardScheme<user_getType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_getType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOGINNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginname = iprot.readString();
                struct.setLoginnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_getType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.loginname != null) {
          oprot.writeFieldBegin(LOGINNAME_FIELD_DESC);
          oprot.writeString(struct.loginname);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_getType_argsTupleSchemeFactory implements SchemeFactory {
      public user_getType_argsTupleScheme getScheme() {
        return new user_getType_argsTupleScheme();
      }
    }

    private static class user_getType_argsTupleScheme extends TupleScheme<user_getType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_getType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoginname()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLoginname()) {
          oprot.writeString(struct.loginname);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_getType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.loginname = iprot.readString();
          struct.setLoginnameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class user_getType_result implements org.apache.thrift.TBase<user_getType_result, user_getType_result._Fields>, java.io.Serializable, Cloneable, Comparable<user_getType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_getType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_getType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_getType_resultTupleSchemeFactory());
    }

    public TUserTypeReturn success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUserTypeReturn.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_getType_result.class, metaDataMap);
    }

    public user_getType_result() {
    }

    public user_getType_result(
      TUserTypeReturn success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_getType_result(user_getType_result other) {
      if (other.isSetSuccess()) {
        this.success = new TUserTypeReturn(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public user_getType_result deepCopy() {
      return new user_getType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TUserTypeReturn getSuccess() {
      return this.success;
    }

    public user_getType_result setSuccess(TUserTypeReturn success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public user_getType_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TUserTypeReturn)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_getType_result)
        return this.equals((user_getType_result)that);
      return false;
    }

    public boolean equals(user_getType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(user_getType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_getType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_getType_resultStandardSchemeFactory implements SchemeFactory {
      public user_getType_resultStandardScheme getScheme() {
        return new user_getType_resultStandardScheme();
      }
    }

    private static class user_getType_resultStandardScheme extends StandardScheme<user_getType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_getType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TUserTypeReturn();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_getType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_getType_resultTupleSchemeFactory implements SchemeFactory {
      public user_getType_resultTupleScheme getScheme() {
        return new user_getType_resultTupleScheme();
      }
    }

    private static class user_getType_resultTupleScheme extends TupleScheme<user_getType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_getType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_getType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TUserTypeReturn();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

}
