/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.plaso.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TUserTypeReturn implements org.apache.thrift.TBase<TUserTypeReturn, TUserTypeReturn._Fields>, java.io.Serializable, Cloneable, Comparable<TUserTypeReturn> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUserTypeReturn");

  private static final org.apache.thrift.protocol.TField MYTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mytype", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TEACHER_FIELD_DESC = new org.apache.thrift.protocol.TField("teacher", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField STUDENT_FIELD_DESC = new org.apache.thrift.protocol.TField("student", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TUserTypeReturnStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TUserTypeReturnTupleSchemeFactory());
  }

  /**
   * 
   * @see TUserType
   */
  public TUserType mytype; // required
  public TTeacher teacher; // required
  public TStudent student; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TUserType
     */
    MYTYPE((short)1, "mytype"),
    TEACHER((short)2, "teacher"),
    STUDENT((short)3, "student");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MYTYPE
          return MYTYPE;
        case 2: // TEACHER
          return TEACHER;
        case 3: // STUDENT
          return STUDENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MYTYPE, new org.apache.thrift.meta_data.FieldMetaData("mytype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TUserType.class)));
    tmpMap.put(_Fields.TEACHER, new org.apache.thrift.meta_data.FieldMetaData("teacher", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeacher.class)));
    tmpMap.put(_Fields.STUDENT, new org.apache.thrift.meta_data.FieldMetaData("student", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStudent.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUserTypeReturn.class, metaDataMap);
  }

  public TUserTypeReturn() {
  }

  public TUserTypeReturn(
    TUserType mytype,
    TTeacher teacher,
    TStudent student)
  {
    this();
    this.mytype = mytype;
    this.teacher = teacher;
    this.student = student;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TUserTypeReturn(TUserTypeReturn other) {
    if (other.isSetMytype()) {
      this.mytype = other.mytype;
    }
    if (other.isSetTeacher()) {
      this.teacher = new TTeacher(other.teacher);
    }
    if (other.isSetStudent()) {
      this.student = new TStudent(other.student);
    }
  }

  public TUserTypeReturn deepCopy() {
    return new TUserTypeReturn(this);
  }

  @Override
  public void clear() {
    this.mytype = null;
    this.teacher = null;
    this.student = null;
  }

  /**
   * 
   * @see TUserType
   */
  public TUserType getMytype() {
    return this.mytype;
  }

  /**
   * 
   * @see TUserType
   */
  public TUserTypeReturn setMytype(TUserType mytype) {
    this.mytype = mytype;
    return this;
  }

  public void unsetMytype() {
    this.mytype = null;
  }

  /** Returns true if field mytype is set (has been assigned a value) and false otherwise */
  public boolean isSetMytype() {
    return this.mytype != null;
  }

  public void setMytypeIsSet(boolean value) {
    if (!value) {
      this.mytype = null;
    }
  }

  public TTeacher getTeacher() {
    return this.teacher;
  }

  public TUserTypeReturn setTeacher(TTeacher teacher) {
    this.teacher = teacher;
    return this;
  }

  public void unsetTeacher() {
    this.teacher = null;
  }

  /** Returns true if field teacher is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacher() {
    return this.teacher != null;
  }

  public void setTeacherIsSet(boolean value) {
    if (!value) {
      this.teacher = null;
    }
  }

  public TStudent getStudent() {
    return this.student;
  }

  public TUserTypeReturn setStudent(TStudent student) {
    this.student = student;
    return this;
  }

  public void unsetStudent() {
    this.student = null;
  }

  /** Returns true if field student is set (has been assigned a value) and false otherwise */
  public boolean isSetStudent() {
    return this.student != null;
  }

  public void setStudentIsSet(boolean value) {
    if (!value) {
      this.student = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MYTYPE:
      if (value == null) {
        unsetMytype();
      } else {
        setMytype((TUserType)value);
      }
      break;

    case TEACHER:
      if (value == null) {
        unsetTeacher();
      } else {
        setTeacher((TTeacher)value);
      }
      break;

    case STUDENT:
      if (value == null) {
        unsetStudent();
      } else {
        setStudent((TStudent)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MYTYPE:
      return getMytype();

    case TEACHER:
      return getTeacher();

    case STUDENT:
      return getStudent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MYTYPE:
      return isSetMytype();
    case TEACHER:
      return isSetTeacher();
    case STUDENT:
      return isSetStudent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TUserTypeReturn)
      return this.equals((TUserTypeReturn)that);
    return false;
  }

  public boolean equals(TUserTypeReturn that) {
    if (that == null)
      return false;

    boolean this_present_mytype = true && this.isSetMytype();
    boolean that_present_mytype = true && that.isSetMytype();
    if (this_present_mytype || that_present_mytype) {
      if (!(this_present_mytype && that_present_mytype))
        return false;
      if (!this.mytype.equals(that.mytype))
        return false;
    }

    boolean this_present_teacher = true && this.isSetTeacher();
    boolean that_present_teacher = true && that.isSetTeacher();
    if (this_present_teacher || that_present_teacher) {
      if (!(this_present_teacher && that_present_teacher))
        return false;
      if (!this.teacher.equals(that.teacher))
        return false;
    }

    boolean this_present_student = true && this.isSetStudent();
    boolean that_present_student = true && that.isSetStudent();
    if (this_present_student || that_present_student) {
      if (!(this_present_student && that_present_student))
        return false;
      if (!this.student.equals(that.student))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TUserTypeReturn other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMytype()).compareTo(other.isSetMytype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMytype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mytype, other.mytype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeacher()).compareTo(other.isSetTeacher());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacher()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacher, other.teacher);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStudent()).compareTo(other.isSetStudent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.student, other.student);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TUserTypeReturn(");
    boolean first = true;

    sb.append("mytype:");
    if (this.mytype == null) {
      sb.append("null");
    } else {
      sb.append(this.mytype);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacher:");
    if (this.teacher == null) {
      sb.append("null");
    } else {
      sb.append(this.teacher);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("student:");
    if (this.student == null) {
      sb.append("null");
    } else {
      sb.append(this.student);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (teacher != null) {
      teacher.validate();
    }
    if (student != null) {
      student.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TUserTypeReturnStandardSchemeFactory implements SchemeFactory {
    public TUserTypeReturnStandardScheme getScheme() {
      return new TUserTypeReturnStandardScheme();
    }
  }

  private static class TUserTypeReturnStandardScheme extends StandardScheme<TUserTypeReturn> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TUserTypeReturn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MYTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mytype = TUserType.findByValue(iprot.readI32());
              struct.setMytypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEACHER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.teacher = new TTeacher();
              struct.teacher.read(iprot);
              struct.setTeacherIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STUDENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.student = new TStudent();
              struct.student.read(iprot);
              struct.setStudentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TUserTypeReturn struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mytype != null) {
        oprot.writeFieldBegin(MYTYPE_FIELD_DESC);
        oprot.writeI32(struct.mytype.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.teacher != null) {
        oprot.writeFieldBegin(TEACHER_FIELD_DESC);
        struct.teacher.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.student != null) {
        oprot.writeFieldBegin(STUDENT_FIELD_DESC);
        struct.student.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TUserTypeReturnTupleSchemeFactory implements SchemeFactory {
    public TUserTypeReturnTupleScheme getScheme() {
      return new TUserTypeReturnTupleScheme();
    }
  }

  private static class TUserTypeReturnTupleScheme extends TupleScheme<TUserTypeReturn> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TUserTypeReturn struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMytype()) {
        optionals.set(0);
      }
      if (struct.isSetTeacher()) {
        optionals.set(1);
      }
      if (struct.isSetStudent()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMytype()) {
        oprot.writeI32(struct.mytype.getValue());
      }
      if (struct.isSetTeacher()) {
        struct.teacher.write(oprot);
      }
      if (struct.isSetStudent()) {
        struct.student.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TUserTypeReturn struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.mytype = TUserType.findByValue(iprot.readI32());
        struct.setMytypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.teacher = new TTeacher();
        struct.teacher.read(iprot);
        struct.setTeacherIsSet(true);
      }
      if (incoming.get(2)) {
        struct.student = new TStudent();
        struct.student.read(iprot);
        struct.setStudentIsSet(true);
      }
    }
  }

}

