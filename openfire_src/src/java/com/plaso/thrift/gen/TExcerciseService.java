/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.plaso.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TExcerciseService {

  public interface Iface {

    public TExercise createExercise(TExercise exercise, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public TExercise updataExercise(TExercise exercise, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public TExercise getExerciseByid(int id, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public List<TExercise> getExerciseByKeyword(String keyword, int max_return, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public List<TExercise> getExerciseByKeywordAndOrgId(int org_id, String keyword, int max_return, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public boolean deleteExercise(int theid, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public TAssigement createAssigement(TAssigement assigement, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public List<TAssigement> getAssigementByStudentID(int student_id, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public List<TAssigement> getAssigementByTeacherID(int teacher_id, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public List<TStudentExercise> getStudentExercise(int student_id, STudentExerciseType etype, String keyword, String tfrom, String tto, String access_token) throws TPlasoException, org.apache.thrift.TException;

    public TStudentExercise saveStudentExecise(TStudentExercise te, String access_token) throws TPlasoException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createExercise(TExercise exercise, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updataExercise(TExercise exercise, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getExerciseByid(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getExerciseByKeyword(String keyword, int max_return, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getExerciseByKeywordAndOrgId(int org_id, String keyword, int max_return, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteExercise(int theid, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createAssigement(TAssigement assigement, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAssigementByStudentID(int student_id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAssigementByTeacherID(int teacher_id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStudentExercise(int student_id, STudentExerciseType etype, String keyword, String tfrom, String tto, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveStudentExecise(TStudentExercise te, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TExercise createExercise(TExercise exercise, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_createExercise(exercise, access_token);
      return recv_createExercise();
    }

    public void send_createExercise(TExercise exercise, String access_token) throws org.apache.thrift.TException
    {
      createExercise_args args = new createExercise_args();
      args.setExercise(exercise);
      args.setAccess_token(access_token);
      sendBase("createExercise", args);
    }

    public TExercise recv_createExercise() throws TPlasoException, org.apache.thrift.TException
    {
      createExercise_result result = new createExercise_result();
      receiveBase(result, "createExercise");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createExercise failed: unknown result");
    }

    public TExercise updataExercise(TExercise exercise, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_updataExercise(exercise, access_token);
      return recv_updataExercise();
    }

    public void send_updataExercise(TExercise exercise, String access_token) throws org.apache.thrift.TException
    {
      updataExercise_args args = new updataExercise_args();
      args.setExercise(exercise);
      args.setAccess_token(access_token);
      sendBase("updataExercise", args);
    }

    public TExercise recv_updataExercise() throws TPlasoException, org.apache.thrift.TException
    {
      updataExercise_result result = new updataExercise_result();
      receiveBase(result, "updataExercise");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updataExercise failed: unknown result");
    }

    public TExercise getExerciseByid(int id, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_getExerciseByid(id, access_token);
      return recv_getExerciseByid();
    }

    public void send_getExerciseByid(int id, String access_token) throws org.apache.thrift.TException
    {
      getExerciseByid_args args = new getExerciseByid_args();
      args.setId(id);
      args.setAccess_token(access_token);
      sendBase("getExerciseByid", args);
    }

    public TExercise recv_getExerciseByid() throws TPlasoException, org.apache.thrift.TException
    {
      getExerciseByid_result result = new getExerciseByid_result();
      receiveBase(result, "getExerciseByid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExerciseByid failed: unknown result");
    }

    public List<TExercise> getExerciseByKeyword(String keyword, int max_return, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_getExerciseByKeyword(keyword, max_return, access_token);
      return recv_getExerciseByKeyword();
    }

    public void send_getExerciseByKeyword(String keyword, int max_return, String access_token) throws org.apache.thrift.TException
    {
      getExerciseByKeyword_args args = new getExerciseByKeyword_args();
      args.setKeyword(keyword);
      args.setMax_return(max_return);
      args.setAccess_token(access_token);
      sendBase("getExerciseByKeyword", args);
    }

    public List<TExercise> recv_getExerciseByKeyword() throws TPlasoException, org.apache.thrift.TException
    {
      getExerciseByKeyword_result result = new getExerciseByKeyword_result();
      receiveBase(result, "getExerciseByKeyword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExerciseByKeyword failed: unknown result");
    }

    public List<TExercise> getExerciseByKeywordAndOrgId(int org_id, String keyword, int max_return, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_getExerciseByKeywordAndOrgId(org_id, keyword, max_return, access_token);
      return recv_getExerciseByKeywordAndOrgId();
    }

    public void send_getExerciseByKeywordAndOrgId(int org_id, String keyword, int max_return, String access_token) throws org.apache.thrift.TException
    {
      getExerciseByKeywordAndOrgId_args args = new getExerciseByKeywordAndOrgId_args();
      args.setOrg_id(org_id);
      args.setKeyword(keyword);
      args.setMax_return(max_return);
      args.setAccess_token(access_token);
      sendBase("getExerciseByKeywordAndOrgId", args);
    }

    public List<TExercise> recv_getExerciseByKeywordAndOrgId() throws TPlasoException, org.apache.thrift.TException
    {
      getExerciseByKeywordAndOrgId_result result = new getExerciseByKeywordAndOrgId_result();
      receiveBase(result, "getExerciseByKeywordAndOrgId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExerciseByKeywordAndOrgId failed: unknown result");
    }

    public boolean deleteExercise(int theid, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_deleteExercise(theid, access_token);
      return recv_deleteExercise();
    }

    public void send_deleteExercise(int theid, String access_token) throws org.apache.thrift.TException
    {
      deleteExercise_args args = new deleteExercise_args();
      args.setTheid(theid);
      args.setAccess_token(access_token);
      sendBase("deleteExercise", args);
    }

    public boolean recv_deleteExercise() throws TPlasoException, org.apache.thrift.TException
    {
      deleteExercise_result result = new deleteExercise_result();
      receiveBase(result, "deleteExercise");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteExercise failed: unknown result");
    }

    public TAssigement createAssigement(TAssigement assigement, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_createAssigement(assigement, access_token);
      return recv_createAssigement();
    }

    public void send_createAssigement(TAssigement assigement, String access_token) throws org.apache.thrift.TException
    {
      createAssigement_args args = new createAssigement_args();
      args.setAssigement(assigement);
      args.setAccess_token(access_token);
      sendBase("createAssigement", args);
    }

    public TAssigement recv_createAssigement() throws TPlasoException, org.apache.thrift.TException
    {
      createAssigement_result result = new createAssigement_result();
      receiveBase(result, "createAssigement");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.myerror != null) {
        throw result.myerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createAssigement failed: unknown result");
    }

    public List<TAssigement> getAssigementByStudentID(int student_id, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_getAssigementByStudentID(student_id, access_token);
      return recv_getAssigementByStudentID();
    }

    public void send_getAssigementByStudentID(int student_id, String access_token) throws org.apache.thrift.TException
    {
      getAssigementByStudentID_args args = new getAssigementByStudentID_args();
      args.setStudent_id(student_id);
      args.setAccess_token(access_token);
      sendBase("getAssigementByStudentID", args);
    }

    public List<TAssigement> recv_getAssigementByStudentID() throws TPlasoException, org.apache.thrift.TException
    {
      getAssigementByStudentID_result result = new getAssigementByStudentID_result();
      receiveBase(result, "getAssigementByStudentID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.EXerror != null) {
        throw result.EXerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAssigementByStudentID failed: unknown result");
    }

    public List<TAssigement> getAssigementByTeacherID(int teacher_id, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_getAssigementByTeacherID(teacher_id, access_token);
      return recv_getAssigementByTeacherID();
    }

    public void send_getAssigementByTeacherID(int teacher_id, String access_token) throws org.apache.thrift.TException
    {
      getAssigementByTeacherID_args args = new getAssigementByTeacherID_args();
      args.setTeacher_id(teacher_id);
      args.setAccess_token(access_token);
      sendBase("getAssigementByTeacherID", args);
    }

    public List<TAssigement> recv_getAssigementByTeacherID() throws TPlasoException, org.apache.thrift.TException
    {
      getAssigementByTeacherID_result result = new getAssigementByTeacherID_result();
      receiveBase(result, "getAssigementByTeacherID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.EXerror != null) {
        throw result.EXerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAssigementByTeacherID failed: unknown result");
    }

    public List<TStudentExercise> getStudentExercise(int student_id, STudentExerciseType etype, String keyword, String tfrom, String tto, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_getStudentExercise(student_id, etype, keyword, tfrom, tto, access_token);
      return recv_getStudentExercise();
    }

    public void send_getStudentExercise(int student_id, STudentExerciseType etype, String keyword, String tfrom, String tto, String access_token) throws org.apache.thrift.TException
    {
      getStudentExercise_args args = new getStudentExercise_args();
      args.setStudent_id(student_id);
      args.setEtype(etype);
      args.setKeyword(keyword);
      args.setTfrom(tfrom);
      args.setTto(tto);
      args.setAccess_token(access_token);
      sendBase("getStudentExercise", args);
    }

    public List<TStudentExercise> recv_getStudentExercise() throws TPlasoException, org.apache.thrift.TException
    {
      getStudentExercise_result result = new getStudentExercise_result();
      receiveBase(result, "getStudentExercise");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.EXerror != null) {
        throw result.EXerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStudentExercise failed: unknown result");
    }

    public TStudentExercise saveStudentExecise(TStudentExercise te, String access_token) throws TPlasoException, org.apache.thrift.TException
    {
      send_saveStudentExecise(te, access_token);
      return recv_saveStudentExecise();
    }

    public void send_saveStudentExecise(TStudentExercise te, String access_token) throws org.apache.thrift.TException
    {
      saveStudentExecise_args args = new saveStudentExecise_args();
      args.setTe(te);
      args.setAccess_token(access_token);
      sendBase("saveStudentExecise", args);
    }

    public TStudentExercise recv_saveStudentExecise() throws TPlasoException, org.apache.thrift.TException
    {
      saveStudentExecise_result result = new saveStudentExecise_result();
      receiveBase(result, "saveStudentExecise");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.EXerror != null) {
        throw result.EXerror;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveStudentExecise failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createExercise(TExercise exercise, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createExercise_call method_call = new createExercise_call(exercise, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createExercise_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TExercise exercise;
      private String access_token;
      public createExercise_call(TExercise exercise, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.exercise = exercise;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createExercise", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createExercise_args args = new createExercise_args();
        args.setExercise(exercise);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TExercise getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createExercise();
      }
    }

    public void updataExercise(TExercise exercise, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updataExercise_call method_call = new updataExercise_call(exercise, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updataExercise_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TExercise exercise;
      private String access_token;
      public updataExercise_call(TExercise exercise, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.exercise = exercise;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updataExercise", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updataExercise_args args = new updataExercise_args();
        args.setExercise(exercise);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TExercise getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updataExercise();
      }
    }

    public void getExerciseByid(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExerciseByid_call method_call = new getExerciseByid_call(id, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExerciseByid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      private String access_token;
      public getExerciseByid_call(int id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExerciseByid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExerciseByid_args args = new getExerciseByid_args();
        args.setId(id);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TExercise getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExerciseByid();
      }
    }

    public void getExerciseByKeyword(String keyword, int max_return, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExerciseByKeyword_call method_call = new getExerciseByKeyword_call(keyword, max_return, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExerciseByKeyword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String keyword;
      private int max_return;
      private String access_token;
      public getExerciseByKeyword_call(String keyword, int max_return, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keyword = keyword;
        this.max_return = max_return;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExerciseByKeyword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExerciseByKeyword_args args = new getExerciseByKeyword_args();
        args.setKeyword(keyword);
        args.setMax_return(max_return);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TExercise> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExerciseByKeyword();
      }
    }

    public void getExerciseByKeywordAndOrgId(int org_id, String keyword, int max_return, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExerciseByKeywordAndOrgId_call method_call = new getExerciseByKeywordAndOrgId_call(org_id, keyword, max_return, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExerciseByKeywordAndOrgId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int org_id;
      private String keyword;
      private int max_return;
      private String access_token;
      public getExerciseByKeywordAndOrgId_call(int org_id, String keyword, int max_return, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.org_id = org_id;
        this.keyword = keyword;
        this.max_return = max_return;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExerciseByKeywordAndOrgId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExerciseByKeywordAndOrgId_args args = new getExerciseByKeywordAndOrgId_args();
        args.setOrg_id(org_id);
        args.setKeyword(keyword);
        args.setMax_return(max_return);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TExercise> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExerciseByKeywordAndOrgId();
      }
    }

    public void deleteExercise(int theid, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteExercise_call method_call = new deleteExercise_call(theid, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteExercise_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int theid;
      private String access_token;
      public deleteExercise_call(int theid, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.theid = theid;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteExercise", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteExercise_args args = new deleteExercise_args();
        args.setTheid(theid);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteExercise();
      }
    }

    public void createAssigement(TAssigement assigement, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createAssigement_call method_call = new createAssigement_call(assigement, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createAssigement_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TAssigement assigement;
      private String access_token;
      public createAssigement_call(TAssigement assigement, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.assigement = assigement;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createAssigement", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createAssigement_args args = new createAssigement_args();
        args.setAssigement(assigement);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAssigement getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createAssigement();
      }
    }

    public void getAssigementByStudentID(int student_id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAssigementByStudentID_call method_call = new getAssigementByStudentID_call(student_id, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAssigementByStudentID_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int student_id;
      private String access_token;
      public getAssigementByStudentID_call(int student_id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.student_id = student_id;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAssigementByStudentID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAssigementByStudentID_args args = new getAssigementByStudentID_args();
        args.setStudent_id(student_id);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TAssigement> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAssigementByStudentID();
      }
    }

    public void getAssigementByTeacherID(int teacher_id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAssigementByTeacherID_call method_call = new getAssigementByTeacherID_call(teacher_id, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAssigementByTeacherID_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int teacher_id;
      private String access_token;
      public getAssigementByTeacherID_call(int teacher_id, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.teacher_id = teacher_id;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAssigementByTeacherID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAssigementByTeacherID_args args = new getAssigementByTeacherID_args();
        args.setTeacher_id(teacher_id);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TAssigement> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAssigementByTeacherID();
      }
    }

    public void getStudentExercise(int student_id, STudentExerciseType etype, String keyword, String tfrom, String tto, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStudentExercise_call method_call = new getStudentExercise_call(student_id, etype, keyword, tfrom, tto, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStudentExercise_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int student_id;
      private STudentExerciseType etype;
      private String keyword;
      private String tfrom;
      private String tto;
      private String access_token;
      public getStudentExercise_call(int student_id, STudentExerciseType etype, String keyword, String tfrom, String tto, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.student_id = student_id;
        this.etype = etype;
        this.keyword = keyword;
        this.tfrom = tfrom;
        this.tto = tto;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStudentExercise", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStudentExercise_args args = new getStudentExercise_args();
        args.setStudent_id(student_id);
        args.setEtype(etype);
        args.setKeyword(keyword);
        args.setTfrom(tfrom);
        args.setTto(tto);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TStudentExercise> getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStudentExercise();
      }
    }

    public void saveStudentExecise(TStudentExercise te, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveStudentExecise_call method_call = new saveStudentExecise_call(te, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveStudentExecise_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TStudentExercise te;
      private String access_token;
      public saveStudentExecise_call(TStudentExercise te, String access_token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.te = te;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveStudentExecise", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveStudentExecise_args args = new saveStudentExecise_args();
        args.setTe(te);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TStudentExercise getResult() throws TPlasoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveStudentExecise();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createExercise", new createExercise());
      processMap.put("updataExercise", new updataExercise());
      processMap.put("getExerciseByid", new getExerciseByid());
      processMap.put("getExerciseByKeyword", new getExerciseByKeyword());
      processMap.put("getExerciseByKeywordAndOrgId", new getExerciseByKeywordAndOrgId());
      processMap.put("deleteExercise", new deleteExercise());
      processMap.put("createAssigement", new createAssigement());
      processMap.put("getAssigementByStudentID", new getAssigementByStudentID());
      processMap.put("getAssigementByTeacherID", new getAssigementByTeacherID());
      processMap.put("getStudentExercise", new getStudentExercise());
      processMap.put("saveStudentExecise", new saveStudentExecise());
      return processMap;
    }

    public static class createExercise<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createExercise_args> {
      public createExercise() {
        super("createExercise");
      }

      public createExercise_args getEmptyArgsInstance() {
        return new createExercise_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createExercise_result getResult(I iface, createExercise_args args) throws org.apache.thrift.TException {
        createExercise_result result = new createExercise_result();
        try {
          result.success = iface.createExercise(args.exercise, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class updataExercise<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updataExercise_args> {
      public updataExercise() {
        super("updataExercise");
      }

      public updataExercise_args getEmptyArgsInstance() {
        return new updataExercise_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updataExercise_result getResult(I iface, updataExercise_args args) throws org.apache.thrift.TException {
        updataExercise_result result = new updataExercise_result();
        try {
          result.success = iface.updataExercise(args.exercise, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class getExerciseByid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExerciseByid_args> {
      public getExerciseByid() {
        super("getExerciseByid");
      }

      public getExerciseByid_args getEmptyArgsInstance() {
        return new getExerciseByid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExerciseByid_result getResult(I iface, getExerciseByid_args args) throws org.apache.thrift.TException {
        getExerciseByid_result result = new getExerciseByid_result();
        try {
          result.success = iface.getExerciseByid(args.id, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class getExerciseByKeyword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExerciseByKeyword_args> {
      public getExerciseByKeyword() {
        super("getExerciseByKeyword");
      }

      public getExerciseByKeyword_args getEmptyArgsInstance() {
        return new getExerciseByKeyword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExerciseByKeyword_result getResult(I iface, getExerciseByKeyword_args args) throws org.apache.thrift.TException {
        getExerciseByKeyword_result result = new getExerciseByKeyword_result();
        try {
          result.success = iface.getExerciseByKeyword(args.keyword, args.max_return, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class getExerciseByKeywordAndOrgId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExerciseByKeywordAndOrgId_args> {
      public getExerciseByKeywordAndOrgId() {
        super("getExerciseByKeywordAndOrgId");
      }

      public getExerciseByKeywordAndOrgId_args getEmptyArgsInstance() {
        return new getExerciseByKeywordAndOrgId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExerciseByKeywordAndOrgId_result getResult(I iface, getExerciseByKeywordAndOrgId_args args) throws org.apache.thrift.TException {
        getExerciseByKeywordAndOrgId_result result = new getExerciseByKeywordAndOrgId_result();
        try {
          result.success = iface.getExerciseByKeywordAndOrgId(args.org_id, args.keyword, args.max_return, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class deleteExercise<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteExercise_args> {
      public deleteExercise() {
        super("deleteExercise");
      }

      public deleteExercise_args getEmptyArgsInstance() {
        return new deleteExercise_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteExercise_result getResult(I iface, deleteExercise_args args) throws org.apache.thrift.TException {
        deleteExercise_result result = new deleteExercise_result();
        try {
          result.success = iface.deleteExercise(args.theid, args.access_token);
          result.setSuccessIsSet(true);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class createAssigement<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createAssigement_args> {
      public createAssigement() {
        super("createAssigement");
      }

      public createAssigement_args getEmptyArgsInstance() {
        return new createAssigement_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createAssigement_result getResult(I iface, createAssigement_args args) throws org.apache.thrift.TException {
        createAssigement_result result = new createAssigement_result();
        try {
          result.success = iface.createAssigement(args.assigement, args.access_token);
        } catch (TPlasoException myerror) {
          result.myerror = myerror;
        }
        return result;
      }
    }

    public static class getAssigementByStudentID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAssigementByStudentID_args> {
      public getAssigementByStudentID() {
        super("getAssigementByStudentID");
      }

      public getAssigementByStudentID_args getEmptyArgsInstance() {
        return new getAssigementByStudentID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAssigementByStudentID_result getResult(I iface, getAssigementByStudentID_args args) throws org.apache.thrift.TException {
        getAssigementByStudentID_result result = new getAssigementByStudentID_result();
        try {
          result.success = iface.getAssigementByStudentID(args.student_id, args.access_token);
        } catch (TPlasoException EXerror) {
          result.EXerror = EXerror;
        }
        return result;
      }
    }

    public static class getAssigementByTeacherID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAssigementByTeacherID_args> {
      public getAssigementByTeacherID() {
        super("getAssigementByTeacherID");
      }

      public getAssigementByTeacherID_args getEmptyArgsInstance() {
        return new getAssigementByTeacherID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAssigementByTeacherID_result getResult(I iface, getAssigementByTeacherID_args args) throws org.apache.thrift.TException {
        getAssigementByTeacherID_result result = new getAssigementByTeacherID_result();
        try {
          result.success = iface.getAssigementByTeacherID(args.teacher_id, args.access_token);
        } catch (TPlasoException EXerror) {
          result.EXerror = EXerror;
        }
        return result;
      }
    }

    public static class getStudentExercise<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStudentExercise_args> {
      public getStudentExercise() {
        super("getStudentExercise");
      }

      public getStudentExercise_args getEmptyArgsInstance() {
        return new getStudentExercise_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStudentExercise_result getResult(I iface, getStudentExercise_args args) throws org.apache.thrift.TException {
        getStudentExercise_result result = new getStudentExercise_result();
        try {
          result.success = iface.getStudentExercise(args.student_id, args.etype, args.keyword, args.tfrom, args.tto, args.access_token);
        } catch (TPlasoException EXerror) {
          result.EXerror = EXerror;
        }
        return result;
      }
    }

    public static class saveStudentExecise<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveStudentExecise_args> {
      public saveStudentExecise() {
        super("saveStudentExecise");
      }

      public saveStudentExecise_args getEmptyArgsInstance() {
        return new saveStudentExecise_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveStudentExecise_result getResult(I iface, saveStudentExecise_args args) throws org.apache.thrift.TException {
        saveStudentExecise_result result = new saveStudentExecise_result();
        try {
          result.success = iface.saveStudentExecise(args.te, args.access_token);
        } catch (TPlasoException EXerror) {
          result.EXerror = EXerror;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createExercise", new createExercise());
      processMap.put("updataExercise", new updataExercise());
      processMap.put("getExerciseByid", new getExerciseByid());
      processMap.put("getExerciseByKeyword", new getExerciseByKeyword());
      processMap.put("getExerciseByKeywordAndOrgId", new getExerciseByKeywordAndOrgId());
      processMap.put("deleteExercise", new deleteExercise());
      processMap.put("createAssigement", new createAssigement());
      processMap.put("getAssigementByStudentID", new getAssigementByStudentID());
      processMap.put("getAssigementByTeacherID", new getAssigementByTeacherID());
      processMap.put("getStudentExercise", new getStudentExercise());
      processMap.put("saveStudentExecise", new saveStudentExecise());
      return processMap;
    }

    public static class createExercise<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createExercise_args, TExercise> {
      public createExercise() {
        super("createExercise");
      }

      public createExercise_args getEmptyArgsInstance() {
        return new createExercise_args();
      }

      public AsyncMethodCallback<TExercise> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TExercise>() { 
          public void onComplete(TExercise o) {
            createExercise_result result = new createExercise_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createExercise_result result = new createExercise_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createExercise_args args, org.apache.thrift.async.AsyncMethodCallback<TExercise> resultHandler) throws TException {
        iface.createExercise(args.exercise, args.access_token,resultHandler);
      }
    }

    public static class updataExercise<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updataExercise_args, TExercise> {
      public updataExercise() {
        super("updataExercise");
      }

      public updataExercise_args getEmptyArgsInstance() {
        return new updataExercise_args();
      }

      public AsyncMethodCallback<TExercise> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TExercise>() { 
          public void onComplete(TExercise o) {
            updataExercise_result result = new updataExercise_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updataExercise_result result = new updataExercise_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updataExercise_args args, org.apache.thrift.async.AsyncMethodCallback<TExercise> resultHandler) throws TException {
        iface.updataExercise(args.exercise, args.access_token,resultHandler);
      }
    }

    public static class getExerciseByid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExerciseByid_args, TExercise> {
      public getExerciseByid() {
        super("getExerciseByid");
      }

      public getExerciseByid_args getEmptyArgsInstance() {
        return new getExerciseByid_args();
      }

      public AsyncMethodCallback<TExercise> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TExercise>() { 
          public void onComplete(TExercise o) {
            getExerciseByid_result result = new getExerciseByid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getExerciseByid_result result = new getExerciseByid_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getExerciseByid_args args, org.apache.thrift.async.AsyncMethodCallback<TExercise> resultHandler) throws TException {
        iface.getExerciseByid(args.id, args.access_token,resultHandler);
      }
    }

    public static class getExerciseByKeyword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExerciseByKeyword_args, List<TExercise>> {
      public getExerciseByKeyword() {
        super("getExerciseByKeyword");
      }

      public getExerciseByKeyword_args getEmptyArgsInstance() {
        return new getExerciseByKeyword_args();
      }

      public AsyncMethodCallback<List<TExercise>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TExercise>>() { 
          public void onComplete(List<TExercise> o) {
            getExerciseByKeyword_result result = new getExerciseByKeyword_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getExerciseByKeyword_result result = new getExerciseByKeyword_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getExerciseByKeyword_args args, org.apache.thrift.async.AsyncMethodCallback<List<TExercise>> resultHandler) throws TException {
        iface.getExerciseByKeyword(args.keyword, args.max_return, args.access_token,resultHandler);
      }
    }

    public static class getExerciseByKeywordAndOrgId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExerciseByKeywordAndOrgId_args, List<TExercise>> {
      public getExerciseByKeywordAndOrgId() {
        super("getExerciseByKeywordAndOrgId");
      }

      public getExerciseByKeywordAndOrgId_args getEmptyArgsInstance() {
        return new getExerciseByKeywordAndOrgId_args();
      }

      public AsyncMethodCallback<List<TExercise>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TExercise>>() { 
          public void onComplete(List<TExercise> o) {
            getExerciseByKeywordAndOrgId_result result = new getExerciseByKeywordAndOrgId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getExerciseByKeywordAndOrgId_result result = new getExerciseByKeywordAndOrgId_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getExerciseByKeywordAndOrgId_args args, org.apache.thrift.async.AsyncMethodCallback<List<TExercise>> resultHandler) throws TException {
        iface.getExerciseByKeywordAndOrgId(args.org_id, args.keyword, args.max_return, args.access_token,resultHandler);
      }
    }

    public static class deleteExercise<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteExercise_args, Boolean> {
      public deleteExercise() {
        super("deleteExercise");
      }

      public deleteExercise_args getEmptyArgsInstance() {
        return new deleteExercise_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteExercise_result result = new deleteExercise_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteExercise_result result = new deleteExercise_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteExercise_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteExercise(args.theid, args.access_token,resultHandler);
      }
    }

    public static class createAssigement<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createAssigement_args, TAssigement> {
      public createAssigement() {
        super("createAssigement");
      }

      public createAssigement_args getEmptyArgsInstance() {
        return new createAssigement_args();
      }

      public AsyncMethodCallback<TAssigement> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TAssigement>() { 
          public void onComplete(TAssigement o) {
            createAssigement_result result = new createAssigement_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createAssigement_result result = new createAssigement_result();
            if (e instanceof TPlasoException) {
                        result.myerror = (TPlasoException) e;
                        result.setMyerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createAssigement_args args, org.apache.thrift.async.AsyncMethodCallback<TAssigement> resultHandler) throws TException {
        iface.createAssigement(args.assigement, args.access_token,resultHandler);
      }
    }

    public static class getAssigementByStudentID<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAssigementByStudentID_args, List<TAssigement>> {
      public getAssigementByStudentID() {
        super("getAssigementByStudentID");
      }

      public getAssigementByStudentID_args getEmptyArgsInstance() {
        return new getAssigementByStudentID_args();
      }

      public AsyncMethodCallback<List<TAssigement>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TAssigement>>() { 
          public void onComplete(List<TAssigement> o) {
            getAssigementByStudentID_result result = new getAssigementByStudentID_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAssigementByStudentID_result result = new getAssigementByStudentID_result();
            if (e instanceof TPlasoException) {
                        result.EXerror = (TPlasoException) e;
                        result.setEXerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAssigementByStudentID_args args, org.apache.thrift.async.AsyncMethodCallback<List<TAssigement>> resultHandler) throws TException {
        iface.getAssigementByStudentID(args.student_id, args.access_token,resultHandler);
      }
    }

    public static class getAssigementByTeacherID<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAssigementByTeacherID_args, List<TAssigement>> {
      public getAssigementByTeacherID() {
        super("getAssigementByTeacherID");
      }

      public getAssigementByTeacherID_args getEmptyArgsInstance() {
        return new getAssigementByTeacherID_args();
      }

      public AsyncMethodCallback<List<TAssigement>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TAssigement>>() { 
          public void onComplete(List<TAssigement> o) {
            getAssigementByTeacherID_result result = new getAssigementByTeacherID_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAssigementByTeacherID_result result = new getAssigementByTeacherID_result();
            if (e instanceof TPlasoException) {
                        result.EXerror = (TPlasoException) e;
                        result.setEXerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAssigementByTeacherID_args args, org.apache.thrift.async.AsyncMethodCallback<List<TAssigement>> resultHandler) throws TException {
        iface.getAssigementByTeacherID(args.teacher_id, args.access_token,resultHandler);
      }
    }

    public static class getStudentExercise<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStudentExercise_args, List<TStudentExercise>> {
      public getStudentExercise() {
        super("getStudentExercise");
      }

      public getStudentExercise_args getEmptyArgsInstance() {
        return new getStudentExercise_args();
      }

      public AsyncMethodCallback<List<TStudentExercise>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TStudentExercise>>() { 
          public void onComplete(List<TStudentExercise> o) {
            getStudentExercise_result result = new getStudentExercise_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStudentExercise_result result = new getStudentExercise_result();
            if (e instanceof TPlasoException) {
                        result.EXerror = (TPlasoException) e;
                        result.setEXerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStudentExercise_args args, org.apache.thrift.async.AsyncMethodCallback<List<TStudentExercise>> resultHandler) throws TException {
        iface.getStudentExercise(args.student_id, args.etype, args.keyword, args.tfrom, args.tto, args.access_token,resultHandler);
      }
    }

    public static class saveStudentExecise<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveStudentExecise_args, TStudentExercise> {
      public saveStudentExecise() {
        super("saveStudentExecise");
      }

      public saveStudentExecise_args getEmptyArgsInstance() {
        return new saveStudentExecise_args();
      }

      public AsyncMethodCallback<TStudentExercise> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TStudentExercise>() { 
          public void onComplete(TStudentExercise o) {
            saveStudentExecise_result result = new saveStudentExecise_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveStudentExecise_result result = new saveStudentExecise_result();
            if (e instanceof TPlasoException) {
                        result.EXerror = (TPlasoException) e;
                        result.setEXerrorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveStudentExecise_args args, org.apache.thrift.async.AsyncMethodCallback<TStudentExercise> resultHandler) throws TException {
        iface.saveStudentExecise(args.te, args.access_token,resultHandler);
      }
    }

  }

  public static class createExercise_args implements org.apache.thrift.TBase<createExercise_args, createExercise_args._Fields>, java.io.Serializable, Cloneable, Comparable<createExercise_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createExercise_args");

    private static final org.apache.thrift.protocol.TField EXERCISE_FIELD_DESC = new org.apache.thrift.protocol.TField("exercise", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createExercise_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createExercise_argsTupleSchemeFactory());
    }

    public TExercise exercise; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXERCISE((short)1, "exercise"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXERCISE
            return EXERCISE;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXERCISE, new org.apache.thrift.meta_data.FieldMetaData("exercise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExercise.class)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createExercise_args.class, metaDataMap);
    }

    public createExercise_args() {
    }

    public createExercise_args(
      TExercise exercise,
      String access_token)
    {
      this();
      this.exercise = exercise;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createExercise_args(createExercise_args other) {
      if (other.isSetExercise()) {
        this.exercise = new TExercise(other.exercise);
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public createExercise_args deepCopy() {
      return new createExercise_args(this);
    }

    @Override
    public void clear() {
      this.exercise = null;
      this.access_token = null;
    }

    public TExercise getExercise() {
      return this.exercise;
    }

    public createExercise_args setExercise(TExercise exercise) {
      this.exercise = exercise;
      return this;
    }

    public void unsetExercise() {
      this.exercise = null;
    }

    /** Returns true if field exercise is set (has been assigned a value) and false otherwise */
    public boolean isSetExercise() {
      return this.exercise != null;
    }

    public void setExerciseIsSet(boolean value) {
      if (!value) {
        this.exercise = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public createExercise_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXERCISE:
        if (value == null) {
          unsetExercise();
        } else {
          setExercise((TExercise)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXERCISE:
        return getExercise();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXERCISE:
        return isSetExercise();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createExercise_args)
        return this.equals((createExercise_args)that);
      return false;
    }

    public boolean equals(createExercise_args that) {
      if (that == null)
        return false;

      boolean this_present_exercise = true && this.isSetExercise();
      boolean that_present_exercise = true && that.isSetExercise();
      if (this_present_exercise || that_present_exercise) {
        if (!(this_present_exercise && that_present_exercise))
          return false;
        if (!this.exercise.equals(that.exercise))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createExercise_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExercise()).compareTo(other.isSetExercise());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExercise()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exercise, other.exercise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createExercise_args(");
      boolean first = true;

      sb.append("exercise:");
      if (this.exercise == null) {
        sb.append("null");
      } else {
        sb.append(this.exercise);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (exercise != null) {
        exercise.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createExercise_argsStandardSchemeFactory implements SchemeFactory {
      public createExercise_argsStandardScheme getScheme() {
        return new createExercise_argsStandardScheme();
      }
    }

    private static class createExercise_argsStandardScheme extends StandardScheme<createExercise_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createExercise_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXERCISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exercise = new TExercise();
                struct.exercise.read(iprot);
                struct.setExerciseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createExercise_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exercise != null) {
          oprot.writeFieldBegin(EXERCISE_FIELD_DESC);
          struct.exercise.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createExercise_argsTupleSchemeFactory implements SchemeFactory {
      public createExercise_argsTupleScheme getScheme() {
        return new createExercise_argsTupleScheme();
      }
    }

    private static class createExercise_argsTupleScheme extends TupleScheme<createExercise_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createExercise_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExercise()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetExercise()) {
          struct.exercise.write(oprot);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createExercise_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.exercise = new TExercise();
          struct.exercise.read(iprot);
          struct.setExerciseIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class createExercise_result implements org.apache.thrift.TBase<createExercise_result, createExercise_result._Fields>, java.io.Serializable, Cloneable, Comparable<createExercise_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createExercise_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createExercise_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createExercise_resultTupleSchemeFactory());
    }

    public TExercise success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExercise.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createExercise_result.class, metaDataMap);
    }

    public createExercise_result() {
    }

    public createExercise_result(
      TExercise success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createExercise_result(createExercise_result other) {
      if (other.isSetSuccess()) {
        this.success = new TExercise(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public createExercise_result deepCopy() {
      return new createExercise_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TExercise getSuccess() {
      return this.success;
    }

    public createExercise_result setSuccess(TExercise success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public createExercise_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TExercise)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createExercise_result)
        return this.equals((createExercise_result)that);
      return false;
    }

    public boolean equals(createExercise_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createExercise_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createExercise_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createExercise_resultStandardSchemeFactory implements SchemeFactory {
      public createExercise_resultStandardScheme getScheme() {
        return new createExercise_resultStandardScheme();
      }
    }

    private static class createExercise_resultStandardScheme extends StandardScheme<createExercise_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createExercise_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TExercise();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createExercise_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createExercise_resultTupleSchemeFactory implements SchemeFactory {
      public createExercise_resultTupleScheme getScheme() {
        return new createExercise_resultTupleScheme();
      }
    }

    private static class createExercise_resultTupleScheme extends TupleScheme<createExercise_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createExercise_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createExercise_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TExercise();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class updataExercise_args implements org.apache.thrift.TBase<updataExercise_args, updataExercise_args._Fields>, java.io.Serializable, Cloneable, Comparable<updataExercise_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updataExercise_args");

    private static final org.apache.thrift.protocol.TField EXERCISE_FIELD_DESC = new org.apache.thrift.protocol.TField("exercise", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updataExercise_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updataExercise_argsTupleSchemeFactory());
    }

    public TExercise exercise; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXERCISE((short)1, "exercise"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXERCISE
            return EXERCISE;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXERCISE, new org.apache.thrift.meta_data.FieldMetaData("exercise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExercise.class)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updataExercise_args.class, metaDataMap);
    }

    public updataExercise_args() {
    }

    public updataExercise_args(
      TExercise exercise,
      String access_token)
    {
      this();
      this.exercise = exercise;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updataExercise_args(updataExercise_args other) {
      if (other.isSetExercise()) {
        this.exercise = new TExercise(other.exercise);
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public updataExercise_args deepCopy() {
      return new updataExercise_args(this);
    }

    @Override
    public void clear() {
      this.exercise = null;
      this.access_token = null;
    }

    public TExercise getExercise() {
      return this.exercise;
    }

    public updataExercise_args setExercise(TExercise exercise) {
      this.exercise = exercise;
      return this;
    }

    public void unsetExercise() {
      this.exercise = null;
    }

    /** Returns true if field exercise is set (has been assigned a value) and false otherwise */
    public boolean isSetExercise() {
      return this.exercise != null;
    }

    public void setExerciseIsSet(boolean value) {
      if (!value) {
        this.exercise = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public updataExercise_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXERCISE:
        if (value == null) {
          unsetExercise();
        } else {
          setExercise((TExercise)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXERCISE:
        return getExercise();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXERCISE:
        return isSetExercise();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updataExercise_args)
        return this.equals((updataExercise_args)that);
      return false;
    }

    public boolean equals(updataExercise_args that) {
      if (that == null)
        return false;

      boolean this_present_exercise = true && this.isSetExercise();
      boolean that_present_exercise = true && that.isSetExercise();
      if (this_present_exercise || that_present_exercise) {
        if (!(this_present_exercise && that_present_exercise))
          return false;
        if (!this.exercise.equals(that.exercise))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updataExercise_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExercise()).compareTo(other.isSetExercise());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExercise()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exercise, other.exercise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updataExercise_args(");
      boolean first = true;

      sb.append("exercise:");
      if (this.exercise == null) {
        sb.append("null");
      } else {
        sb.append(this.exercise);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (exercise != null) {
        exercise.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updataExercise_argsStandardSchemeFactory implements SchemeFactory {
      public updataExercise_argsStandardScheme getScheme() {
        return new updataExercise_argsStandardScheme();
      }
    }

    private static class updataExercise_argsStandardScheme extends StandardScheme<updataExercise_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updataExercise_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXERCISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exercise = new TExercise();
                struct.exercise.read(iprot);
                struct.setExerciseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updataExercise_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exercise != null) {
          oprot.writeFieldBegin(EXERCISE_FIELD_DESC);
          struct.exercise.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updataExercise_argsTupleSchemeFactory implements SchemeFactory {
      public updataExercise_argsTupleScheme getScheme() {
        return new updataExercise_argsTupleScheme();
      }
    }

    private static class updataExercise_argsTupleScheme extends TupleScheme<updataExercise_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updataExercise_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExercise()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetExercise()) {
          struct.exercise.write(oprot);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updataExercise_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.exercise = new TExercise();
          struct.exercise.read(iprot);
          struct.setExerciseIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class updataExercise_result implements org.apache.thrift.TBase<updataExercise_result, updataExercise_result._Fields>, java.io.Serializable, Cloneable, Comparable<updataExercise_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updataExercise_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updataExercise_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updataExercise_resultTupleSchemeFactory());
    }

    public TExercise success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExercise.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updataExercise_result.class, metaDataMap);
    }

    public updataExercise_result() {
    }

    public updataExercise_result(
      TExercise success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updataExercise_result(updataExercise_result other) {
      if (other.isSetSuccess()) {
        this.success = new TExercise(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public updataExercise_result deepCopy() {
      return new updataExercise_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TExercise getSuccess() {
      return this.success;
    }

    public updataExercise_result setSuccess(TExercise success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public updataExercise_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TExercise)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updataExercise_result)
        return this.equals((updataExercise_result)that);
      return false;
    }

    public boolean equals(updataExercise_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updataExercise_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updataExercise_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updataExercise_resultStandardSchemeFactory implements SchemeFactory {
      public updataExercise_resultStandardScheme getScheme() {
        return new updataExercise_resultStandardScheme();
      }
    }

    private static class updataExercise_resultStandardScheme extends StandardScheme<updataExercise_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updataExercise_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TExercise();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updataExercise_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updataExercise_resultTupleSchemeFactory implements SchemeFactory {
      public updataExercise_resultTupleScheme getScheme() {
        return new updataExercise_resultTupleScheme();
      }
    }

    private static class updataExercise_resultTupleScheme extends TupleScheme<updataExercise_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updataExercise_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updataExercise_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TExercise();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class getExerciseByid_args implements org.apache.thrift.TBase<getExerciseByid_args, getExerciseByid_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExerciseByid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExerciseByid_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExerciseByid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExerciseByid_argsTupleSchemeFactory());
    }

    public int id; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExerciseByid_args.class, metaDataMap);
    }

    public getExerciseByid_args() {
    }

    public getExerciseByid_args(
      int id,
      String access_token)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExerciseByid_args(getExerciseByid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public getExerciseByid_args deepCopy() {
      return new getExerciseByid_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.access_token = null;
    }

    public int getId() {
      return this.id;
    }

    public getExerciseByid_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public getExerciseByid_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExerciseByid_args)
        return this.equals((getExerciseByid_args)that);
      return false;
    }

    public boolean equals(getExerciseByid_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getExerciseByid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExerciseByid_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExerciseByid_argsStandardSchemeFactory implements SchemeFactory {
      public getExerciseByid_argsStandardScheme getScheme() {
        return new getExerciseByid_argsStandardScheme();
      }
    }

    private static class getExerciseByid_argsStandardScheme extends StandardScheme<getExerciseByid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExerciseByid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExerciseByid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExerciseByid_argsTupleSchemeFactory implements SchemeFactory {
      public getExerciseByid_argsTupleScheme getScheme() {
        return new getExerciseByid_argsTupleScheme();
      }
    }

    private static class getExerciseByid_argsTupleScheme extends TupleScheme<getExerciseByid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExerciseByid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExerciseByid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class getExerciseByid_result implements org.apache.thrift.TBase<getExerciseByid_result, getExerciseByid_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExerciseByid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExerciseByid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExerciseByid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExerciseByid_resultTupleSchemeFactory());
    }

    public TExercise success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExercise.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExerciseByid_result.class, metaDataMap);
    }

    public getExerciseByid_result() {
    }

    public getExerciseByid_result(
      TExercise success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExerciseByid_result(getExerciseByid_result other) {
      if (other.isSetSuccess()) {
        this.success = new TExercise(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public getExerciseByid_result deepCopy() {
      return new getExerciseByid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TExercise getSuccess() {
      return this.success;
    }

    public getExerciseByid_result setSuccess(TExercise success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public getExerciseByid_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TExercise)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExerciseByid_result)
        return this.equals((getExerciseByid_result)that);
      return false;
    }

    public boolean equals(getExerciseByid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getExerciseByid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExerciseByid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExerciseByid_resultStandardSchemeFactory implements SchemeFactory {
      public getExerciseByid_resultStandardScheme getScheme() {
        return new getExerciseByid_resultStandardScheme();
      }
    }

    private static class getExerciseByid_resultStandardScheme extends StandardScheme<getExerciseByid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExerciseByid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TExercise();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExerciseByid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExerciseByid_resultTupleSchemeFactory implements SchemeFactory {
      public getExerciseByid_resultTupleScheme getScheme() {
        return new getExerciseByid_resultTupleScheme();
      }
    }

    private static class getExerciseByid_resultTupleScheme extends TupleScheme<getExerciseByid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExerciseByid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExerciseByid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TExercise();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class getExerciseByKeyword_args implements org.apache.thrift.TBase<getExerciseByKeyword_args, getExerciseByKeyword_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExerciseByKeyword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExerciseByKeyword_args");

    private static final org.apache.thrift.protocol.TField KEYWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyword", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MAX_RETURN_FIELD_DESC = new org.apache.thrift.protocol.TField("max_return", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExerciseByKeyword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExerciseByKeyword_argsTupleSchemeFactory());
    }

    public String keyword; // required
    public int max_return; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEYWORD((short)1, "keyword"),
      MAX_RETURN((short)2, "max_return"),
      ACCESS_TOKEN((short)3, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEYWORD
            return KEYWORD;
          case 2: // MAX_RETURN
            return MAX_RETURN;
          case 3: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MAX_RETURN_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEYWORD, new org.apache.thrift.meta_data.FieldMetaData("keyword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAX_RETURN, new org.apache.thrift.meta_data.FieldMetaData("max_return", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExerciseByKeyword_args.class, metaDataMap);
    }

    public getExerciseByKeyword_args() {
    }

    public getExerciseByKeyword_args(
      String keyword,
      int max_return,
      String access_token)
    {
      this();
      this.keyword = keyword;
      this.max_return = max_return;
      setMax_returnIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExerciseByKeyword_args(getExerciseByKeyword_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKeyword()) {
        this.keyword = other.keyword;
      }
      this.max_return = other.max_return;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public getExerciseByKeyword_args deepCopy() {
      return new getExerciseByKeyword_args(this);
    }

    @Override
    public void clear() {
      this.keyword = null;
      setMax_returnIsSet(false);
      this.max_return = 0;
      this.access_token = null;
    }

    public String getKeyword() {
      return this.keyword;
    }

    public getExerciseByKeyword_args setKeyword(String keyword) {
      this.keyword = keyword;
      return this;
    }

    public void unsetKeyword() {
      this.keyword = null;
    }

    /** Returns true if field keyword is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyword() {
      return this.keyword != null;
    }

    public void setKeywordIsSet(boolean value) {
      if (!value) {
        this.keyword = null;
      }
    }

    public int getMax_return() {
      return this.max_return;
    }

    public getExerciseByKeyword_args setMax_return(int max_return) {
      this.max_return = max_return;
      setMax_returnIsSet(true);
      return this;
    }

    public void unsetMax_return() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_RETURN_ISSET_ID);
    }

    /** Returns true if field max_return is set (has been assigned a value) and false otherwise */
    public boolean isSetMax_return() {
      return EncodingUtils.testBit(__isset_bitfield, __MAX_RETURN_ISSET_ID);
    }

    public void setMax_returnIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_RETURN_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public getExerciseByKeyword_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEYWORD:
        if (value == null) {
          unsetKeyword();
        } else {
          setKeyword((String)value);
        }
        break;

      case MAX_RETURN:
        if (value == null) {
          unsetMax_return();
        } else {
          setMax_return((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEYWORD:
        return getKeyword();

      case MAX_RETURN:
        return Integer.valueOf(getMax_return());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEYWORD:
        return isSetKeyword();
      case MAX_RETURN:
        return isSetMax_return();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExerciseByKeyword_args)
        return this.equals((getExerciseByKeyword_args)that);
      return false;
    }

    public boolean equals(getExerciseByKeyword_args that) {
      if (that == null)
        return false;

      boolean this_present_keyword = true && this.isSetKeyword();
      boolean that_present_keyword = true && that.isSetKeyword();
      if (this_present_keyword || that_present_keyword) {
        if (!(this_present_keyword && that_present_keyword))
          return false;
        if (!this.keyword.equals(that.keyword))
          return false;
      }

      boolean this_present_max_return = true;
      boolean that_present_max_return = true;
      if (this_present_max_return || that_present_max_return) {
        if (!(this_present_max_return && that_present_max_return))
          return false;
        if (this.max_return != that.max_return)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getExerciseByKeyword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKeyword()).compareTo(other.isSetKeyword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyword, other.keyword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMax_return()).compareTo(other.isSetMax_return());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMax_return()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_return, other.max_return);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExerciseByKeyword_args(");
      boolean first = true;

      sb.append("keyword:");
      if (this.keyword == null) {
        sb.append("null");
      } else {
        sb.append(this.keyword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("max_return:");
      sb.append(this.max_return);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExerciseByKeyword_argsStandardSchemeFactory implements SchemeFactory {
      public getExerciseByKeyword_argsStandardScheme getScheme() {
        return new getExerciseByKeyword_argsStandardScheme();
      }
    }

    private static class getExerciseByKeyword_argsStandardScheme extends StandardScheme<getExerciseByKeyword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExerciseByKeyword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEYWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keyword = iprot.readString();
                struct.setKeywordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MAX_RETURN
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.max_return = iprot.readI32();
                struct.setMax_returnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExerciseByKeyword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.keyword != null) {
          oprot.writeFieldBegin(KEYWORD_FIELD_DESC);
          oprot.writeString(struct.keyword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MAX_RETURN_FIELD_DESC);
        oprot.writeI32(struct.max_return);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExerciseByKeyword_argsTupleSchemeFactory implements SchemeFactory {
      public getExerciseByKeyword_argsTupleScheme getScheme() {
        return new getExerciseByKeyword_argsTupleScheme();
      }
    }

    private static class getExerciseByKeyword_argsTupleScheme extends TupleScheme<getExerciseByKeyword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExerciseByKeyword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKeyword()) {
          optionals.set(0);
        }
        if (struct.isSetMax_return()) {
          optionals.set(1);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetKeyword()) {
          oprot.writeString(struct.keyword);
        }
        if (struct.isSetMax_return()) {
          oprot.writeI32(struct.max_return);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExerciseByKeyword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.keyword = iprot.readString();
          struct.setKeywordIsSet(true);
        }
        if (incoming.get(1)) {
          struct.max_return = iprot.readI32();
          struct.setMax_returnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class getExerciseByKeyword_result implements org.apache.thrift.TBase<getExerciseByKeyword_result, getExerciseByKeyword_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExerciseByKeyword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExerciseByKeyword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExerciseByKeyword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExerciseByKeyword_resultTupleSchemeFactory());
    }

    public List<TExercise> success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExercise.class))));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExerciseByKeyword_result.class, metaDataMap);
    }

    public getExerciseByKeyword_result() {
    }

    public getExerciseByKeyword_result(
      List<TExercise> success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExerciseByKeyword_result(getExerciseByKeyword_result other) {
      if (other.isSetSuccess()) {
        List<TExercise> __this__success = new ArrayList<TExercise>(other.success.size());
        for (TExercise other_element : other.success) {
          __this__success.add(new TExercise(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public getExerciseByKeyword_result deepCopy() {
      return new getExerciseByKeyword_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TExercise> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TExercise elem) {
      if (this.success == null) {
        this.success = new ArrayList<TExercise>();
      }
      this.success.add(elem);
    }

    public List<TExercise> getSuccess() {
      return this.success;
    }

    public getExerciseByKeyword_result setSuccess(List<TExercise> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public getExerciseByKeyword_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TExercise>)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExerciseByKeyword_result)
        return this.equals((getExerciseByKeyword_result)that);
      return false;
    }

    public boolean equals(getExerciseByKeyword_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getExerciseByKeyword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExerciseByKeyword_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExerciseByKeyword_resultStandardSchemeFactory implements SchemeFactory {
      public getExerciseByKeyword_resultStandardScheme getScheme() {
        return new getExerciseByKeyword_resultStandardScheme();
      }
    }

    private static class getExerciseByKeyword_resultStandardScheme extends StandardScheme<getExerciseByKeyword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExerciseByKeyword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                  struct.success = new ArrayList<TExercise>(_list200.size);
                  for (int _i201 = 0; _i201 < _list200.size; ++_i201)
                  {
                    TExercise _elem202;
                    _elem202 = new TExercise();
                    _elem202.read(iprot);
                    struct.success.add(_elem202);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExerciseByKeyword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TExercise _iter203 : struct.success)
            {
              _iter203.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExerciseByKeyword_resultTupleSchemeFactory implements SchemeFactory {
      public getExerciseByKeyword_resultTupleScheme getScheme() {
        return new getExerciseByKeyword_resultTupleScheme();
      }
    }

    private static class getExerciseByKeyword_resultTupleScheme extends TupleScheme<getExerciseByKeyword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExerciseByKeyword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TExercise _iter204 : struct.success)
            {
              _iter204.write(oprot);
            }
          }
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExerciseByKeyword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TExercise>(_list205.size);
            for (int _i206 = 0; _i206 < _list205.size; ++_i206)
            {
              TExercise _elem207;
              _elem207 = new TExercise();
              _elem207.read(iprot);
              struct.success.add(_elem207);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class getExerciseByKeywordAndOrgId_args implements org.apache.thrift.TBase<getExerciseByKeywordAndOrgId_args, getExerciseByKeywordAndOrgId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExerciseByKeywordAndOrgId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExerciseByKeywordAndOrgId_args");

    private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("org_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField KEYWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyword", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MAX_RETURN_FIELD_DESC = new org.apache.thrift.protocol.TField("max_return", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExerciseByKeywordAndOrgId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExerciseByKeywordAndOrgId_argsTupleSchemeFactory());
    }

    public int org_id; // required
    public String keyword; // required
    public int max_return; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORG_ID((short)1, "org_id"),
      KEYWORD((short)2, "keyword"),
      MAX_RETURN((short)3, "max_return"),
      ACCESS_TOKEN((short)4, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORG_ID
            return ORG_ID;
          case 2: // KEYWORD
            return KEYWORD;
          case 3: // MAX_RETURN
            return MAX_RETURN;
          case 4: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ORG_ID_ISSET_ID = 0;
    private static final int __MAX_RETURN_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("org_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.KEYWORD, new org.apache.thrift.meta_data.FieldMetaData("keyword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAX_RETURN, new org.apache.thrift.meta_data.FieldMetaData("max_return", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExerciseByKeywordAndOrgId_args.class, metaDataMap);
    }

    public getExerciseByKeywordAndOrgId_args() {
    }

    public getExerciseByKeywordAndOrgId_args(
      int org_id,
      String keyword,
      int max_return,
      String access_token)
    {
      this();
      this.org_id = org_id;
      setOrg_idIsSet(true);
      this.keyword = keyword;
      this.max_return = max_return;
      setMax_returnIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExerciseByKeywordAndOrgId_args(getExerciseByKeywordAndOrgId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.org_id = other.org_id;
      if (other.isSetKeyword()) {
        this.keyword = other.keyword;
      }
      this.max_return = other.max_return;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public getExerciseByKeywordAndOrgId_args deepCopy() {
      return new getExerciseByKeywordAndOrgId_args(this);
    }

    @Override
    public void clear() {
      setOrg_idIsSet(false);
      this.org_id = 0;
      this.keyword = null;
      setMax_returnIsSet(false);
      this.max_return = 0;
      this.access_token = null;
    }

    public int getOrg_id() {
      return this.org_id;
    }

    public getExerciseByKeywordAndOrgId_args setOrg_id(int org_id) {
      this.org_id = org_id;
      setOrg_idIsSet(true);
      return this;
    }

    public void unsetOrg_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORG_ID_ISSET_ID);
    }

    /** Returns true if field org_id is set (has been assigned a value) and false otherwise */
    public boolean isSetOrg_id() {
      return EncodingUtils.testBit(__isset_bitfield, __ORG_ID_ISSET_ID);
    }

    public void setOrg_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORG_ID_ISSET_ID, value);
    }

    public String getKeyword() {
      return this.keyword;
    }

    public getExerciseByKeywordAndOrgId_args setKeyword(String keyword) {
      this.keyword = keyword;
      return this;
    }

    public void unsetKeyword() {
      this.keyword = null;
    }

    /** Returns true if field keyword is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyword() {
      return this.keyword != null;
    }

    public void setKeywordIsSet(boolean value) {
      if (!value) {
        this.keyword = null;
      }
    }

    public int getMax_return() {
      return this.max_return;
    }

    public getExerciseByKeywordAndOrgId_args setMax_return(int max_return) {
      this.max_return = max_return;
      setMax_returnIsSet(true);
      return this;
    }

    public void unsetMax_return() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_RETURN_ISSET_ID);
    }

    /** Returns true if field max_return is set (has been assigned a value) and false otherwise */
    public boolean isSetMax_return() {
      return EncodingUtils.testBit(__isset_bitfield, __MAX_RETURN_ISSET_ID);
    }

    public void setMax_returnIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_RETURN_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public getExerciseByKeywordAndOrgId_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORG_ID:
        if (value == null) {
          unsetOrg_id();
        } else {
          setOrg_id((Integer)value);
        }
        break;

      case KEYWORD:
        if (value == null) {
          unsetKeyword();
        } else {
          setKeyword((String)value);
        }
        break;

      case MAX_RETURN:
        if (value == null) {
          unsetMax_return();
        } else {
          setMax_return((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORG_ID:
        return Integer.valueOf(getOrg_id());

      case KEYWORD:
        return getKeyword();

      case MAX_RETURN:
        return Integer.valueOf(getMax_return());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORG_ID:
        return isSetOrg_id();
      case KEYWORD:
        return isSetKeyword();
      case MAX_RETURN:
        return isSetMax_return();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExerciseByKeywordAndOrgId_args)
        return this.equals((getExerciseByKeywordAndOrgId_args)that);
      return false;
    }

    public boolean equals(getExerciseByKeywordAndOrgId_args that) {
      if (that == null)
        return false;

      boolean this_present_org_id = true;
      boolean that_present_org_id = true;
      if (this_present_org_id || that_present_org_id) {
        if (!(this_present_org_id && that_present_org_id))
          return false;
        if (this.org_id != that.org_id)
          return false;
      }

      boolean this_present_keyword = true && this.isSetKeyword();
      boolean that_present_keyword = true && that.isSetKeyword();
      if (this_present_keyword || that_present_keyword) {
        if (!(this_present_keyword && that_present_keyword))
          return false;
        if (!this.keyword.equals(that.keyword))
          return false;
      }

      boolean this_present_max_return = true;
      boolean that_present_max_return = true;
      if (this_present_max_return || that_present_max_return) {
        if (!(this_present_max_return && that_present_max_return))
          return false;
        if (this.max_return != that.max_return)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getExerciseByKeywordAndOrgId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrg_id()).compareTo(other.isSetOrg_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrg_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.org_id, other.org_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeyword()).compareTo(other.isSetKeyword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyword, other.keyword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMax_return()).compareTo(other.isSetMax_return());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMax_return()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_return, other.max_return);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExerciseByKeywordAndOrgId_args(");
      boolean first = true;

      sb.append("org_id:");
      sb.append(this.org_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyword:");
      if (this.keyword == null) {
        sb.append("null");
      } else {
        sb.append(this.keyword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("max_return:");
      sb.append(this.max_return);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExerciseByKeywordAndOrgId_argsStandardSchemeFactory implements SchemeFactory {
      public getExerciseByKeywordAndOrgId_argsStandardScheme getScheme() {
        return new getExerciseByKeywordAndOrgId_argsStandardScheme();
      }
    }

    private static class getExerciseByKeywordAndOrgId_argsStandardScheme extends StandardScheme<getExerciseByKeywordAndOrgId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExerciseByKeywordAndOrgId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.org_id = iprot.readI32();
                struct.setOrg_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEYWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keyword = iprot.readString();
                struct.setKeywordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MAX_RETURN
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.max_return = iprot.readI32();
                struct.setMax_returnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExerciseByKeywordAndOrgId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
        oprot.writeI32(struct.org_id);
        oprot.writeFieldEnd();
        if (struct.keyword != null) {
          oprot.writeFieldBegin(KEYWORD_FIELD_DESC);
          oprot.writeString(struct.keyword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MAX_RETURN_FIELD_DESC);
        oprot.writeI32(struct.max_return);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExerciseByKeywordAndOrgId_argsTupleSchemeFactory implements SchemeFactory {
      public getExerciseByKeywordAndOrgId_argsTupleScheme getScheme() {
        return new getExerciseByKeywordAndOrgId_argsTupleScheme();
      }
    }

    private static class getExerciseByKeywordAndOrgId_argsTupleScheme extends TupleScheme<getExerciseByKeywordAndOrgId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExerciseByKeywordAndOrgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrg_id()) {
          optionals.set(0);
        }
        if (struct.isSetKeyword()) {
          optionals.set(1);
        }
        if (struct.isSetMax_return()) {
          optionals.set(2);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetOrg_id()) {
          oprot.writeI32(struct.org_id);
        }
        if (struct.isSetKeyword()) {
          oprot.writeString(struct.keyword);
        }
        if (struct.isSetMax_return()) {
          oprot.writeI32(struct.max_return);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExerciseByKeywordAndOrgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.org_id = iprot.readI32();
          struct.setOrg_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.keyword = iprot.readString();
          struct.setKeywordIsSet(true);
        }
        if (incoming.get(2)) {
          struct.max_return = iprot.readI32();
          struct.setMax_returnIsSet(true);
        }
        if (incoming.get(3)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class getExerciseByKeywordAndOrgId_result implements org.apache.thrift.TBase<getExerciseByKeywordAndOrgId_result, getExerciseByKeywordAndOrgId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExerciseByKeywordAndOrgId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExerciseByKeywordAndOrgId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExerciseByKeywordAndOrgId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExerciseByKeywordAndOrgId_resultTupleSchemeFactory());
    }

    public List<TExercise> success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExercise.class))));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExerciseByKeywordAndOrgId_result.class, metaDataMap);
    }

    public getExerciseByKeywordAndOrgId_result() {
    }

    public getExerciseByKeywordAndOrgId_result(
      List<TExercise> success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExerciseByKeywordAndOrgId_result(getExerciseByKeywordAndOrgId_result other) {
      if (other.isSetSuccess()) {
        List<TExercise> __this__success = new ArrayList<TExercise>(other.success.size());
        for (TExercise other_element : other.success) {
          __this__success.add(new TExercise(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public getExerciseByKeywordAndOrgId_result deepCopy() {
      return new getExerciseByKeywordAndOrgId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TExercise> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TExercise elem) {
      if (this.success == null) {
        this.success = new ArrayList<TExercise>();
      }
      this.success.add(elem);
    }

    public List<TExercise> getSuccess() {
      return this.success;
    }

    public getExerciseByKeywordAndOrgId_result setSuccess(List<TExercise> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public getExerciseByKeywordAndOrgId_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TExercise>)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExerciseByKeywordAndOrgId_result)
        return this.equals((getExerciseByKeywordAndOrgId_result)that);
      return false;
    }

    public boolean equals(getExerciseByKeywordAndOrgId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getExerciseByKeywordAndOrgId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExerciseByKeywordAndOrgId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExerciseByKeywordAndOrgId_resultStandardSchemeFactory implements SchemeFactory {
      public getExerciseByKeywordAndOrgId_resultStandardScheme getScheme() {
        return new getExerciseByKeywordAndOrgId_resultStandardScheme();
      }
    }

    private static class getExerciseByKeywordAndOrgId_resultStandardScheme extends StandardScheme<getExerciseByKeywordAndOrgId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExerciseByKeywordAndOrgId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                  struct.success = new ArrayList<TExercise>(_list208.size);
                  for (int _i209 = 0; _i209 < _list208.size; ++_i209)
                  {
                    TExercise _elem210;
                    _elem210 = new TExercise();
                    _elem210.read(iprot);
                    struct.success.add(_elem210);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExerciseByKeywordAndOrgId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TExercise _iter211 : struct.success)
            {
              _iter211.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExerciseByKeywordAndOrgId_resultTupleSchemeFactory implements SchemeFactory {
      public getExerciseByKeywordAndOrgId_resultTupleScheme getScheme() {
        return new getExerciseByKeywordAndOrgId_resultTupleScheme();
      }
    }

    private static class getExerciseByKeywordAndOrgId_resultTupleScheme extends TupleScheme<getExerciseByKeywordAndOrgId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExerciseByKeywordAndOrgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TExercise _iter212 : struct.success)
            {
              _iter212.write(oprot);
            }
          }
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExerciseByKeywordAndOrgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TExercise>(_list213.size);
            for (int _i214 = 0; _i214 < _list213.size; ++_i214)
            {
              TExercise _elem215;
              _elem215 = new TExercise();
              _elem215.read(iprot);
              struct.success.add(_elem215);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class deleteExercise_args implements org.apache.thrift.TBase<deleteExercise_args, deleteExercise_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteExercise_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteExercise_args");

    private static final org.apache.thrift.protocol.TField THEID_FIELD_DESC = new org.apache.thrift.protocol.TField("theid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteExercise_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteExercise_argsTupleSchemeFactory());
    }

    public int theid; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      THEID((short)1, "theid"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // THEID
            return THEID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __THEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.THEID, new org.apache.thrift.meta_data.FieldMetaData("theid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteExercise_args.class, metaDataMap);
    }

    public deleteExercise_args() {
    }

    public deleteExercise_args(
      int theid,
      String access_token)
    {
      this();
      this.theid = theid;
      setTheidIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteExercise_args(deleteExercise_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.theid = other.theid;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public deleteExercise_args deepCopy() {
      return new deleteExercise_args(this);
    }

    @Override
    public void clear() {
      setTheidIsSet(false);
      this.theid = 0;
      this.access_token = null;
    }

    public int getTheid() {
      return this.theid;
    }

    public deleteExercise_args setTheid(int theid) {
      this.theid = theid;
      setTheidIsSet(true);
      return this;
    }

    public void unsetTheid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THEID_ISSET_ID);
    }

    /** Returns true if field theid is set (has been assigned a value) and false otherwise */
    public boolean isSetTheid() {
      return EncodingUtils.testBit(__isset_bitfield, __THEID_ISSET_ID);
    }

    public void setTheidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THEID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public deleteExercise_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case THEID:
        if (value == null) {
          unsetTheid();
        } else {
          setTheid((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case THEID:
        return Integer.valueOf(getTheid());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case THEID:
        return isSetTheid();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteExercise_args)
        return this.equals((deleteExercise_args)that);
      return false;
    }

    public boolean equals(deleteExercise_args that) {
      if (that == null)
        return false;

      boolean this_present_theid = true;
      boolean that_present_theid = true;
      if (this_present_theid || that_present_theid) {
        if (!(this_present_theid && that_present_theid))
          return false;
        if (this.theid != that.theid)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteExercise_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTheid()).compareTo(other.isSetTheid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTheid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.theid, other.theid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteExercise_args(");
      boolean first = true;

      sb.append("theid:");
      sb.append(this.theid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteExercise_argsStandardSchemeFactory implements SchemeFactory {
      public deleteExercise_argsStandardScheme getScheme() {
        return new deleteExercise_argsStandardScheme();
      }
    }

    private static class deleteExercise_argsStandardScheme extends StandardScheme<deleteExercise_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteExercise_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // THEID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.theid = iprot.readI32();
                struct.setTheidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteExercise_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(THEID_FIELD_DESC);
        oprot.writeI32(struct.theid);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteExercise_argsTupleSchemeFactory implements SchemeFactory {
      public deleteExercise_argsTupleScheme getScheme() {
        return new deleteExercise_argsTupleScheme();
      }
    }

    private static class deleteExercise_argsTupleScheme extends TupleScheme<deleteExercise_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteExercise_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTheid()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTheid()) {
          oprot.writeI32(struct.theid);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteExercise_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.theid = iprot.readI32();
          struct.setTheidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class deleteExercise_result implements org.apache.thrift.TBase<deleteExercise_result, deleteExercise_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteExercise_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteExercise_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteExercise_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteExercise_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteExercise_result.class, metaDataMap);
    }

    public deleteExercise_result() {
    }

    public deleteExercise_result(
      boolean success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteExercise_result(deleteExercise_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public deleteExercise_result deepCopy() {
      return new deleteExercise_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.myerror = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteExercise_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public deleteExercise_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteExercise_result)
        return this.equals((deleteExercise_result)that);
      return false;
    }

    public boolean equals(deleteExercise_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteExercise_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteExercise_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteExercise_resultStandardSchemeFactory implements SchemeFactory {
      public deleteExercise_resultStandardScheme getScheme() {
        return new deleteExercise_resultStandardScheme();
      }
    }

    private static class deleteExercise_resultStandardScheme extends StandardScheme<deleteExercise_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteExercise_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteExercise_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteExercise_resultTupleSchemeFactory implements SchemeFactory {
      public deleteExercise_resultTupleScheme getScheme() {
        return new deleteExercise_resultTupleScheme();
      }
    }

    private static class deleteExercise_resultTupleScheme extends TupleScheme<deleteExercise_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteExercise_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteExercise_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class createAssigement_args implements org.apache.thrift.TBase<createAssigement_args, createAssigement_args._Fields>, java.io.Serializable, Cloneable, Comparable<createAssigement_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAssigement_args");

    private static final org.apache.thrift.protocol.TField ASSIGEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("assigement", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createAssigement_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createAssigement_argsTupleSchemeFactory());
    }

    public TAssigement assigement; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ASSIGEMENT((short)1, "assigement"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ASSIGEMENT
            return ASSIGEMENT;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ASSIGEMENT, new org.apache.thrift.meta_data.FieldMetaData("assigement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAssigement.class)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAssigement_args.class, metaDataMap);
    }

    public createAssigement_args() {
    }

    public createAssigement_args(
      TAssigement assigement,
      String access_token)
    {
      this();
      this.assigement = assigement;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAssigement_args(createAssigement_args other) {
      if (other.isSetAssigement()) {
        this.assigement = new TAssigement(other.assigement);
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public createAssigement_args deepCopy() {
      return new createAssigement_args(this);
    }

    @Override
    public void clear() {
      this.assigement = null;
      this.access_token = null;
    }

    public TAssigement getAssigement() {
      return this.assigement;
    }

    public createAssigement_args setAssigement(TAssigement assigement) {
      this.assigement = assigement;
      return this;
    }

    public void unsetAssigement() {
      this.assigement = null;
    }

    /** Returns true if field assigement is set (has been assigned a value) and false otherwise */
    public boolean isSetAssigement() {
      return this.assigement != null;
    }

    public void setAssigementIsSet(boolean value) {
      if (!value) {
        this.assigement = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public createAssigement_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ASSIGEMENT:
        if (value == null) {
          unsetAssigement();
        } else {
          setAssigement((TAssigement)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ASSIGEMENT:
        return getAssigement();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ASSIGEMENT:
        return isSetAssigement();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createAssigement_args)
        return this.equals((createAssigement_args)that);
      return false;
    }

    public boolean equals(createAssigement_args that) {
      if (that == null)
        return false;

      boolean this_present_assigement = true && this.isSetAssigement();
      boolean that_present_assigement = true && that.isSetAssigement();
      if (this_present_assigement || that_present_assigement) {
        if (!(this_present_assigement && that_present_assigement))
          return false;
        if (!this.assigement.equals(that.assigement))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createAssigement_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAssigement()).compareTo(other.isSetAssigement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAssigement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assigement, other.assigement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createAssigement_args(");
      boolean first = true;

      sb.append("assigement:");
      if (this.assigement == null) {
        sb.append("null");
      } else {
        sb.append(this.assigement);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (assigement != null) {
        assigement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAssigement_argsStandardSchemeFactory implements SchemeFactory {
      public createAssigement_argsStandardScheme getScheme() {
        return new createAssigement_argsStandardScheme();
      }
    }

    private static class createAssigement_argsStandardScheme extends StandardScheme<createAssigement_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAssigement_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ASSIGEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.assigement = new TAssigement();
                struct.assigement.read(iprot);
                struct.setAssigementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAssigement_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.assigement != null) {
          oprot.writeFieldBegin(ASSIGEMENT_FIELD_DESC);
          struct.assigement.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAssigement_argsTupleSchemeFactory implements SchemeFactory {
      public createAssigement_argsTupleScheme getScheme() {
        return new createAssigement_argsTupleScheme();
      }
    }

    private static class createAssigement_argsTupleScheme extends TupleScheme<createAssigement_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAssigement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAssigement()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAssigement()) {
          struct.assigement.write(oprot);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAssigement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.assigement = new TAssigement();
          struct.assigement.read(iprot);
          struct.setAssigementIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class createAssigement_result implements org.apache.thrift.TBase<createAssigement_result, createAssigement_result._Fields>, java.io.Serializable, Cloneable, Comparable<createAssigement_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAssigement_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MYERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("myerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createAssigement_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createAssigement_resultTupleSchemeFactory());
    }

    public TAssigement success; // required
    public TPlasoException myerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MYERROR((short)1, "myerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MYERROR
            return MYERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAssigement.class)));
      tmpMap.put(_Fields.MYERROR, new org.apache.thrift.meta_data.FieldMetaData("myerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAssigement_result.class, metaDataMap);
    }

    public createAssigement_result() {
    }

    public createAssigement_result(
      TAssigement success,
      TPlasoException myerror)
    {
      this();
      this.success = success;
      this.myerror = myerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAssigement_result(createAssigement_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAssigement(other.success);
      }
      if (other.isSetMyerror()) {
        this.myerror = new TPlasoException(other.myerror);
      }
    }

    public createAssigement_result deepCopy() {
      return new createAssigement_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.myerror = null;
    }

    public TAssigement getSuccess() {
      return this.success;
    }

    public createAssigement_result setSuccess(TAssigement success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getMyerror() {
      return this.myerror;
    }

    public createAssigement_result setMyerror(TPlasoException myerror) {
      this.myerror = myerror;
      return this;
    }

    public void unsetMyerror() {
      this.myerror = null;
    }

    /** Returns true if field myerror is set (has been assigned a value) and false otherwise */
    public boolean isSetMyerror() {
      return this.myerror != null;
    }

    public void setMyerrorIsSet(boolean value) {
      if (!value) {
        this.myerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAssigement)value);
        }
        break;

      case MYERROR:
        if (value == null) {
          unsetMyerror();
        } else {
          setMyerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MYERROR:
        return getMyerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MYERROR:
        return isSetMyerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createAssigement_result)
        return this.equals((createAssigement_result)that);
      return false;
    }

    public boolean equals(createAssigement_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_myerror = true && this.isSetMyerror();
      boolean that_present_myerror = true && that.isSetMyerror();
      if (this_present_myerror || that_present_myerror) {
        if (!(this_present_myerror && that_present_myerror))
          return false;
        if (!this.myerror.equals(that.myerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createAssigement_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMyerror()).compareTo(other.isSetMyerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myerror, other.myerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createAssigement_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("myerror:");
      if (this.myerror == null) {
        sb.append("null");
      } else {
        sb.append(this.myerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAssigement_resultStandardSchemeFactory implements SchemeFactory {
      public createAssigement_resultStandardScheme getScheme() {
        return new createAssigement_resultStandardScheme();
      }
    }

    private static class createAssigement_resultStandardScheme extends StandardScheme<createAssigement_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAssigement_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAssigement();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MYERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myerror = new TPlasoException();
                struct.myerror.read(iprot);
                struct.setMyerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAssigement_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.myerror != null) {
          oprot.writeFieldBegin(MYERROR_FIELD_DESC);
          struct.myerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAssigement_resultTupleSchemeFactory implements SchemeFactory {
      public createAssigement_resultTupleScheme getScheme() {
        return new createAssigement_resultTupleScheme();
      }
    }

    private static class createAssigement_resultTupleScheme extends TupleScheme<createAssigement_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAssigement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMyerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMyerror()) {
          struct.myerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAssigement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TAssigement();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.myerror = new TPlasoException();
          struct.myerror.read(iprot);
          struct.setMyerrorIsSet(true);
        }
      }
    }

  }

  public static class getAssigementByStudentID_args implements org.apache.thrift.TBase<getAssigementByStudentID_args, getAssigementByStudentID_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAssigementByStudentID_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAssigementByStudentID_args");

    private static final org.apache.thrift.protocol.TField STUDENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("student_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAssigementByStudentID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAssigementByStudentID_argsTupleSchemeFactory());
    }

    public int student_id; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT_ID((short)1, "student_id"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT_ID
            return STUDENT_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUDENT_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT_ID, new org.apache.thrift.meta_data.FieldMetaData("student_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAssigementByStudentID_args.class, metaDataMap);
    }

    public getAssigementByStudentID_args() {
    }

    public getAssigementByStudentID_args(
      int student_id,
      String access_token)
    {
      this();
      this.student_id = student_id;
      setStudent_idIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAssigementByStudentID_args(getAssigementByStudentID_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.student_id = other.student_id;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public getAssigementByStudentID_args deepCopy() {
      return new getAssigementByStudentID_args(this);
    }

    @Override
    public void clear() {
      setStudent_idIsSet(false);
      this.student_id = 0;
      this.access_token = null;
    }

    public int getStudent_id() {
      return this.student_id;
    }

    public getAssigementByStudentID_args setStudent_id(int student_id) {
      this.student_id = student_id;
      setStudent_idIsSet(true);
      return this;
    }

    public void unsetStudent_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUDENT_ID_ISSET_ID);
    }

    /** Returns true if field student_id is set (has been assigned a value) and false otherwise */
    public boolean isSetStudent_id() {
      return EncodingUtils.testBit(__isset_bitfield, __STUDENT_ID_ISSET_ID);
    }

    public void setStudent_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUDENT_ID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public getAssigementByStudentID_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENT_ID:
        if (value == null) {
          unsetStudent_id();
        } else {
          setStudent_id((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT_ID:
        return Integer.valueOf(getStudent_id());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT_ID:
        return isSetStudent_id();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAssigementByStudentID_args)
        return this.equals((getAssigementByStudentID_args)that);
      return false;
    }

    public boolean equals(getAssigementByStudentID_args that) {
      if (that == null)
        return false;

      boolean this_present_student_id = true;
      boolean that_present_student_id = true;
      if (this_present_student_id || that_present_student_id) {
        if (!(this_present_student_id && that_present_student_id))
          return false;
        if (this.student_id != that.student_id)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAssigementByStudentID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStudent_id()).compareTo(other.isSetStudent_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudent_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.student_id, other.student_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAssigementByStudentID_args(");
      boolean first = true;

      sb.append("student_id:");
      sb.append(this.student_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAssigementByStudentID_argsStandardSchemeFactory implements SchemeFactory {
      public getAssigementByStudentID_argsStandardScheme getScheme() {
        return new getAssigementByStudentID_argsStandardScheme();
      }
    }

    private static class getAssigementByStudentID_argsStandardScheme extends StandardScheme<getAssigementByStudentID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAssigementByStudentID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.student_id = iprot.readI32();
                struct.setStudent_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAssigementByStudentID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STUDENT_ID_FIELD_DESC);
        oprot.writeI32(struct.student_id);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAssigementByStudentID_argsTupleSchemeFactory implements SchemeFactory {
      public getAssigementByStudentID_argsTupleScheme getScheme() {
        return new getAssigementByStudentID_argsTupleScheme();
      }
    }

    private static class getAssigementByStudentID_argsTupleScheme extends TupleScheme<getAssigementByStudentID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAssigementByStudentID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStudent_id()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStudent_id()) {
          oprot.writeI32(struct.student_id);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAssigementByStudentID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.student_id = iprot.readI32();
          struct.setStudent_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class getAssigementByStudentID_result implements org.apache.thrift.TBase<getAssigementByStudentID_result, getAssigementByStudentID_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAssigementByStudentID_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAssigementByStudentID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("EXerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAssigementByStudentID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAssigementByStudentID_resultTupleSchemeFactory());
    }

    public List<TAssigement> success; // required
    public TPlasoException EXerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXERROR((short)1, "EXerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXERROR
            return EXERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAssigement.class))));
      tmpMap.put(_Fields.EXERROR, new org.apache.thrift.meta_data.FieldMetaData("EXerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAssigementByStudentID_result.class, metaDataMap);
    }

    public getAssigementByStudentID_result() {
    }

    public getAssigementByStudentID_result(
      List<TAssigement> success,
      TPlasoException EXerror)
    {
      this();
      this.success = success;
      this.EXerror = EXerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAssigementByStudentID_result(getAssigementByStudentID_result other) {
      if (other.isSetSuccess()) {
        List<TAssigement> __this__success = new ArrayList<TAssigement>(other.success.size());
        for (TAssigement other_element : other.success) {
          __this__success.add(new TAssigement(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEXerror()) {
        this.EXerror = new TPlasoException(other.EXerror);
      }
    }

    public getAssigementByStudentID_result deepCopy() {
      return new getAssigementByStudentID_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.EXerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TAssigement> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TAssigement elem) {
      if (this.success == null) {
        this.success = new ArrayList<TAssigement>();
      }
      this.success.add(elem);
    }

    public List<TAssigement> getSuccess() {
      return this.success;
    }

    public getAssigementByStudentID_result setSuccess(List<TAssigement> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getEXerror() {
      return this.EXerror;
    }

    public getAssigementByStudentID_result setEXerror(TPlasoException EXerror) {
      this.EXerror = EXerror;
      return this;
    }

    public void unsetEXerror() {
      this.EXerror = null;
    }

    /** Returns true if field EXerror is set (has been assigned a value) and false otherwise */
    public boolean isSetEXerror() {
      return this.EXerror != null;
    }

    public void setEXerrorIsSet(boolean value) {
      if (!value) {
        this.EXerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TAssigement>)value);
        }
        break;

      case EXERROR:
        if (value == null) {
          unsetEXerror();
        } else {
          setEXerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXERROR:
        return getEXerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXERROR:
        return isSetEXerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAssigementByStudentID_result)
        return this.equals((getAssigementByStudentID_result)that);
      return false;
    }

    public boolean equals(getAssigementByStudentID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_EXerror = true && this.isSetEXerror();
      boolean that_present_EXerror = true && that.isSetEXerror();
      if (this_present_EXerror || that_present_EXerror) {
        if (!(this_present_EXerror && that_present_EXerror))
          return false;
        if (!this.EXerror.equals(that.EXerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAssigementByStudentID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEXerror()).compareTo(other.isSetEXerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEXerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EXerror, other.EXerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAssigementByStudentID_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("EXerror:");
      if (this.EXerror == null) {
        sb.append("null");
      } else {
        sb.append(this.EXerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAssigementByStudentID_resultStandardSchemeFactory implements SchemeFactory {
      public getAssigementByStudentID_resultStandardScheme getScheme() {
        return new getAssigementByStudentID_resultStandardScheme();
      }
    }

    private static class getAssigementByStudentID_resultStandardScheme extends StandardScheme<getAssigementByStudentID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAssigementByStudentID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                  struct.success = new ArrayList<TAssigement>(_list216.size);
                  for (int _i217 = 0; _i217 < _list216.size; ++_i217)
                  {
                    TAssigement _elem218;
                    _elem218 = new TAssigement();
                    _elem218.read(iprot);
                    struct.success.add(_elem218);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.EXerror = new TPlasoException();
                struct.EXerror.read(iprot);
                struct.setEXerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAssigementByStudentID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TAssigement _iter219 : struct.success)
            {
              _iter219.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.EXerror != null) {
          oprot.writeFieldBegin(EXERROR_FIELD_DESC);
          struct.EXerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAssigementByStudentID_resultTupleSchemeFactory implements SchemeFactory {
      public getAssigementByStudentID_resultTupleScheme getScheme() {
        return new getAssigementByStudentID_resultTupleScheme();
      }
    }

    private static class getAssigementByStudentID_resultTupleScheme extends TupleScheme<getAssigementByStudentID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAssigementByStudentID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEXerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TAssigement _iter220 : struct.success)
            {
              _iter220.write(oprot);
            }
          }
        }
        if (struct.isSetEXerror()) {
          struct.EXerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAssigementByStudentID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TAssigement>(_list221.size);
            for (int _i222 = 0; _i222 < _list221.size; ++_i222)
            {
              TAssigement _elem223;
              _elem223 = new TAssigement();
              _elem223.read(iprot);
              struct.success.add(_elem223);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.EXerror = new TPlasoException();
          struct.EXerror.read(iprot);
          struct.setEXerrorIsSet(true);
        }
      }
    }

  }

  public static class getAssigementByTeacherID_args implements org.apache.thrift.TBase<getAssigementByTeacherID_args, getAssigementByTeacherID_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAssigementByTeacherID_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAssigementByTeacherID_args");

    private static final org.apache.thrift.protocol.TField TEACHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teacher_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAssigementByTeacherID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAssigementByTeacherID_argsTupleSchemeFactory());
    }

    public int teacher_id; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEACHER_ID((short)1, "teacher_id"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEACHER_ID
            return TEACHER_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TEACHER_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEACHER_ID, new org.apache.thrift.meta_data.FieldMetaData("teacher_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAssigementByTeacherID_args.class, metaDataMap);
    }

    public getAssigementByTeacherID_args() {
    }

    public getAssigementByTeacherID_args(
      int teacher_id,
      String access_token)
    {
      this();
      this.teacher_id = teacher_id;
      setTeacher_idIsSet(true);
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAssigementByTeacherID_args(getAssigementByTeacherID_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.teacher_id = other.teacher_id;
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public getAssigementByTeacherID_args deepCopy() {
      return new getAssigementByTeacherID_args(this);
    }

    @Override
    public void clear() {
      setTeacher_idIsSet(false);
      this.teacher_id = 0;
      this.access_token = null;
    }

    public int getTeacher_id() {
      return this.teacher_id;
    }

    public getAssigementByTeacherID_args setTeacher_id(int teacher_id) {
      this.teacher_id = teacher_id;
      setTeacher_idIsSet(true);
      return this;
    }

    public void unsetTeacher_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEACHER_ID_ISSET_ID);
    }

    /** Returns true if field teacher_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTeacher_id() {
      return EncodingUtils.testBit(__isset_bitfield, __TEACHER_ID_ISSET_ID);
    }

    public void setTeacher_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEACHER_ID_ISSET_ID, value);
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public getAssigementByTeacherID_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEACHER_ID:
        if (value == null) {
          unsetTeacher_id();
        } else {
          setTeacher_id((Integer)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEACHER_ID:
        return Integer.valueOf(getTeacher_id());

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEACHER_ID:
        return isSetTeacher_id();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAssigementByTeacherID_args)
        return this.equals((getAssigementByTeacherID_args)that);
      return false;
    }

    public boolean equals(getAssigementByTeacherID_args that) {
      if (that == null)
        return false;

      boolean this_present_teacher_id = true;
      boolean that_present_teacher_id = true;
      if (this_present_teacher_id || that_present_teacher_id) {
        if (!(this_present_teacher_id && that_present_teacher_id))
          return false;
        if (this.teacher_id != that.teacher_id)
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAssigementByTeacherID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTeacher_id()).compareTo(other.isSetTeacher_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeacher_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacher_id, other.teacher_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAssigementByTeacherID_args(");
      boolean first = true;

      sb.append("teacher_id:");
      sb.append(this.teacher_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAssigementByTeacherID_argsStandardSchemeFactory implements SchemeFactory {
      public getAssigementByTeacherID_argsStandardScheme getScheme() {
        return new getAssigementByTeacherID_argsStandardScheme();
      }
    }

    private static class getAssigementByTeacherID_argsStandardScheme extends StandardScheme<getAssigementByTeacherID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAssigementByTeacherID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEACHER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.teacher_id = iprot.readI32();
                struct.setTeacher_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAssigementByTeacherID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TEACHER_ID_FIELD_DESC);
        oprot.writeI32(struct.teacher_id);
        oprot.writeFieldEnd();
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAssigementByTeacherID_argsTupleSchemeFactory implements SchemeFactory {
      public getAssigementByTeacherID_argsTupleScheme getScheme() {
        return new getAssigementByTeacherID_argsTupleScheme();
      }
    }

    private static class getAssigementByTeacherID_argsTupleScheme extends TupleScheme<getAssigementByTeacherID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAssigementByTeacherID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTeacher_id()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTeacher_id()) {
          oprot.writeI32(struct.teacher_id);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAssigementByTeacherID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.teacher_id = iprot.readI32();
          struct.setTeacher_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class getAssigementByTeacherID_result implements org.apache.thrift.TBase<getAssigementByTeacherID_result, getAssigementByTeacherID_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAssigementByTeacherID_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAssigementByTeacherID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("EXerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAssigementByTeacherID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAssigementByTeacherID_resultTupleSchemeFactory());
    }

    public List<TAssigement> success; // required
    public TPlasoException EXerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXERROR((short)1, "EXerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXERROR
            return EXERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAssigement.class))));
      tmpMap.put(_Fields.EXERROR, new org.apache.thrift.meta_data.FieldMetaData("EXerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAssigementByTeacherID_result.class, metaDataMap);
    }

    public getAssigementByTeacherID_result() {
    }

    public getAssigementByTeacherID_result(
      List<TAssigement> success,
      TPlasoException EXerror)
    {
      this();
      this.success = success;
      this.EXerror = EXerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAssigementByTeacherID_result(getAssigementByTeacherID_result other) {
      if (other.isSetSuccess()) {
        List<TAssigement> __this__success = new ArrayList<TAssigement>(other.success.size());
        for (TAssigement other_element : other.success) {
          __this__success.add(new TAssigement(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEXerror()) {
        this.EXerror = new TPlasoException(other.EXerror);
      }
    }

    public getAssigementByTeacherID_result deepCopy() {
      return new getAssigementByTeacherID_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.EXerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TAssigement> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TAssigement elem) {
      if (this.success == null) {
        this.success = new ArrayList<TAssigement>();
      }
      this.success.add(elem);
    }

    public List<TAssigement> getSuccess() {
      return this.success;
    }

    public getAssigementByTeacherID_result setSuccess(List<TAssigement> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getEXerror() {
      return this.EXerror;
    }

    public getAssigementByTeacherID_result setEXerror(TPlasoException EXerror) {
      this.EXerror = EXerror;
      return this;
    }

    public void unsetEXerror() {
      this.EXerror = null;
    }

    /** Returns true if field EXerror is set (has been assigned a value) and false otherwise */
    public boolean isSetEXerror() {
      return this.EXerror != null;
    }

    public void setEXerrorIsSet(boolean value) {
      if (!value) {
        this.EXerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TAssigement>)value);
        }
        break;

      case EXERROR:
        if (value == null) {
          unsetEXerror();
        } else {
          setEXerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXERROR:
        return getEXerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXERROR:
        return isSetEXerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAssigementByTeacherID_result)
        return this.equals((getAssigementByTeacherID_result)that);
      return false;
    }

    public boolean equals(getAssigementByTeacherID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_EXerror = true && this.isSetEXerror();
      boolean that_present_EXerror = true && that.isSetEXerror();
      if (this_present_EXerror || that_present_EXerror) {
        if (!(this_present_EXerror && that_present_EXerror))
          return false;
        if (!this.EXerror.equals(that.EXerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAssigementByTeacherID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEXerror()).compareTo(other.isSetEXerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEXerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EXerror, other.EXerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAssigementByTeacherID_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("EXerror:");
      if (this.EXerror == null) {
        sb.append("null");
      } else {
        sb.append(this.EXerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAssigementByTeacherID_resultStandardSchemeFactory implements SchemeFactory {
      public getAssigementByTeacherID_resultStandardScheme getScheme() {
        return new getAssigementByTeacherID_resultStandardScheme();
      }
    }

    private static class getAssigementByTeacherID_resultStandardScheme extends StandardScheme<getAssigementByTeacherID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAssigementByTeacherID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list224 = iprot.readListBegin();
                  struct.success = new ArrayList<TAssigement>(_list224.size);
                  for (int _i225 = 0; _i225 < _list224.size; ++_i225)
                  {
                    TAssigement _elem226;
                    _elem226 = new TAssigement();
                    _elem226.read(iprot);
                    struct.success.add(_elem226);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.EXerror = new TPlasoException();
                struct.EXerror.read(iprot);
                struct.setEXerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAssigementByTeacherID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TAssigement _iter227 : struct.success)
            {
              _iter227.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.EXerror != null) {
          oprot.writeFieldBegin(EXERROR_FIELD_DESC);
          struct.EXerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAssigementByTeacherID_resultTupleSchemeFactory implements SchemeFactory {
      public getAssigementByTeacherID_resultTupleScheme getScheme() {
        return new getAssigementByTeacherID_resultTupleScheme();
      }
    }

    private static class getAssigementByTeacherID_resultTupleScheme extends TupleScheme<getAssigementByTeacherID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAssigementByTeacherID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEXerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TAssigement _iter228 : struct.success)
            {
              _iter228.write(oprot);
            }
          }
        }
        if (struct.isSetEXerror()) {
          struct.EXerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAssigementByTeacherID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list229 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TAssigement>(_list229.size);
            for (int _i230 = 0; _i230 < _list229.size; ++_i230)
            {
              TAssigement _elem231;
              _elem231 = new TAssigement();
              _elem231.read(iprot);
              struct.success.add(_elem231);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.EXerror = new TPlasoException();
          struct.EXerror.read(iprot);
          struct.setEXerrorIsSet(true);
        }
      }
    }

  }

  public static class getStudentExercise_args implements org.apache.thrift.TBase<getStudentExercise_args, getStudentExercise_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStudentExercise_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStudentExercise_args");

    private static final org.apache.thrift.protocol.TField STUDENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("student_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ETYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("etype", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField KEYWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyword", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TFROM_FIELD_DESC = new org.apache.thrift.protocol.TField("tfrom", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TTO_FIELD_DESC = new org.apache.thrift.protocol.TField("tto", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStudentExercise_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStudentExercise_argsTupleSchemeFactory());
    }

    public int student_id; // required
    /**
     * 
     * @see STudentExerciseType
     */
    public STudentExerciseType etype; // required
    public String keyword; // required
    public String tfrom; // required
    public String tto; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT_ID((short)1, "student_id"),
      /**
       * 
       * @see STudentExerciseType
       */
      ETYPE((short)2, "etype"),
      KEYWORD((short)3, "keyword"),
      TFROM((short)4, "tfrom"),
      TTO((short)5, "tto"),
      ACCESS_TOKEN((short)6, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT_ID
            return STUDENT_ID;
          case 2: // ETYPE
            return ETYPE;
          case 3: // KEYWORD
            return KEYWORD;
          case 4: // TFROM
            return TFROM;
          case 5: // TTO
            return TTO;
          case 6: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUDENT_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT_ID, new org.apache.thrift.meta_data.FieldMetaData("student_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ETYPE, new org.apache.thrift.meta_data.FieldMetaData("etype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, STudentExerciseType.class)));
      tmpMap.put(_Fields.KEYWORD, new org.apache.thrift.meta_data.FieldMetaData("keyword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TFROM, new org.apache.thrift.meta_data.FieldMetaData("tfrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TTO, new org.apache.thrift.meta_data.FieldMetaData("tto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStudentExercise_args.class, metaDataMap);
    }

    public getStudentExercise_args() {
    }

    public getStudentExercise_args(
      int student_id,
      STudentExerciseType etype,
      String keyword,
      String tfrom,
      String tto,
      String access_token)
    {
      this();
      this.student_id = student_id;
      setStudent_idIsSet(true);
      this.etype = etype;
      this.keyword = keyword;
      this.tfrom = tfrom;
      this.tto = tto;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStudentExercise_args(getStudentExercise_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.student_id = other.student_id;
      if (other.isSetEtype()) {
        this.etype = other.etype;
      }
      if (other.isSetKeyword()) {
        this.keyword = other.keyword;
      }
      if (other.isSetTfrom()) {
        this.tfrom = other.tfrom;
      }
      if (other.isSetTto()) {
        this.tto = other.tto;
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public getStudentExercise_args deepCopy() {
      return new getStudentExercise_args(this);
    }

    @Override
    public void clear() {
      setStudent_idIsSet(false);
      this.student_id = 0;
      this.etype = null;
      this.keyword = null;
      this.tfrom = null;
      this.tto = null;
      this.access_token = null;
    }

    public int getStudent_id() {
      return this.student_id;
    }

    public getStudentExercise_args setStudent_id(int student_id) {
      this.student_id = student_id;
      setStudent_idIsSet(true);
      return this;
    }

    public void unsetStudent_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUDENT_ID_ISSET_ID);
    }

    /** Returns true if field student_id is set (has been assigned a value) and false otherwise */
    public boolean isSetStudent_id() {
      return EncodingUtils.testBit(__isset_bitfield, __STUDENT_ID_ISSET_ID);
    }

    public void setStudent_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUDENT_ID_ISSET_ID, value);
    }

    /**
     * 
     * @see STudentExerciseType
     */
    public STudentExerciseType getEtype() {
      return this.etype;
    }

    /**
     * 
     * @see STudentExerciseType
     */
    public getStudentExercise_args setEtype(STudentExerciseType etype) {
      this.etype = etype;
      return this;
    }

    public void unsetEtype() {
      this.etype = null;
    }

    /** Returns true if field etype is set (has been assigned a value) and false otherwise */
    public boolean isSetEtype() {
      return this.etype != null;
    }

    public void setEtypeIsSet(boolean value) {
      if (!value) {
        this.etype = null;
      }
    }

    public String getKeyword() {
      return this.keyword;
    }

    public getStudentExercise_args setKeyword(String keyword) {
      this.keyword = keyword;
      return this;
    }

    public void unsetKeyword() {
      this.keyword = null;
    }

    /** Returns true if field keyword is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyword() {
      return this.keyword != null;
    }

    public void setKeywordIsSet(boolean value) {
      if (!value) {
        this.keyword = null;
      }
    }

    public String getTfrom() {
      return this.tfrom;
    }

    public getStudentExercise_args setTfrom(String tfrom) {
      this.tfrom = tfrom;
      return this;
    }

    public void unsetTfrom() {
      this.tfrom = null;
    }

    /** Returns true if field tfrom is set (has been assigned a value) and false otherwise */
    public boolean isSetTfrom() {
      return this.tfrom != null;
    }

    public void setTfromIsSet(boolean value) {
      if (!value) {
        this.tfrom = null;
      }
    }

    public String getTto() {
      return this.tto;
    }

    public getStudentExercise_args setTto(String tto) {
      this.tto = tto;
      return this;
    }

    public void unsetTto() {
      this.tto = null;
    }

    /** Returns true if field tto is set (has been assigned a value) and false otherwise */
    public boolean isSetTto() {
      return this.tto != null;
    }

    public void setTtoIsSet(boolean value) {
      if (!value) {
        this.tto = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public getStudentExercise_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENT_ID:
        if (value == null) {
          unsetStudent_id();
        } else {
          setStudent_id((Integer)value);
        }
        break;

      case ETYPE:
        if (value == null) {
          unsetEtype();
        } else {
          setEtype((STudentExerciseType)value);
        }
        break;

      case KEYWORD:
        if (value == null) {
          unsetKeyword();
        } else {
          setKeyword((String)value);
        }
        break;

      case TFROM:
        if (value == null) {
          unsetTfrom();
        } else {
          setTfrom((String)value);
        }
        break;

      case TTO:
        if (value == null) {
          unsetTto();
        } else {
          setTto((String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT_ID:
        return Integer.valueOf(getStudent_id());

      case ETYPE:
        return getEtype();

      case KEYWORD:
        return getKeyword();

      case TFROM:
        return getTfrom();

      case TTO:
        return getTto();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT_ID:
        return isSetStudent_id();
      case ETYPE:
        return isSetEtype();
      case KEYWORD:
        return isSetKeyword();
      case TFROM:
        return isSetTfrom();
      case TTO:
        return isSetTto();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStudentExercise_args)
        return this.equals((getStudentExercise_args)that);
      return false;
    }

    public boolean equals(getStudentExercise_args that) {
      if (that == null)
        return false;

      boolean this_present_student_id = true;
      boolean that_present_student_id = true;
      if (this_present_student_id || that_present_student_id) {
        if (!(this_present_student_id && that_present_student_id))
          return false;
        if (this.student_id != that.student_id)
          return false;
      }

      boolean this_present_etype = true && this.isSetEtype();
      boolean that_present_etype = true && that.isSetEtype();
      if (this_present_etype || that_present_etype) {
        if (!(this_present_etype && that_present_etype))
          return false;
        if (!this.etype.equals(that.etype))
          return false;
      }

      boolean this_present_keyword = true && this.isSetKeyword();
      boolean that_present_keyword = true && that.isSetKeyword();
      if (this_present_keyword || that_present_keyword) {
        if (!(this_present_keyword && that_present_keyword))
          return false;
        if (!this.keyword.equals(that.keyword))
          return false;
      }

      boolean this_present_tfrom = true && this.isSetTfrom();
      boolean that_present_tfrom = true && that.isSetTfrom();
      if (this_present_tfrom || that_present_tfrom) {
        if (!(this_present_tfrom && that_present_tfrom))
          return false;
        if (!this.tfrom.equals(that.tfrom))
          return false;
      }

      boolean this_present_tto = true && this.isSetTto();
      boolean that_present_tto = true && that.isSetTto();
      if (this_present_tto || that_present_tto) {
        if (!(this_present_tto && that_present_tto))
          return false;
        if (!this.tto.equals(that.tto))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStudentExercise_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStudent_id()).compareTo(other.isSetStudent_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudent_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.student_id, other.student_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEtype()).compareTo(other.isSetEtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.etype, other.etype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeyword()).compareTo(other.isSetKeyword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyword, other.keyword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTfrom()).compareTo(other.isSetTfrom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTfrom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tfrom, other.tfrom);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTto()).compareTo(other.isSetTto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tto, other.tto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStudentExercise_args(");
      boolean first = true;

      sb.append("student_id:");
      sb.append(this.student_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("etype:");
      if (this.etype == null) {
        sb.append("null");
      } else {
        sb.append(this.etype);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyword:");
      if (this.keyword == null) {
        sb.append("null");
      } else {
        sb.append(this.keyword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tfrom:");
      if (this.tfrom == null) {
        sb.append("null");
      } else {
        sb.append(this.tfrom);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tto:");
      if (this.tto == null) {
        sb.append("null");
      } else {
        sb.append(this.tto);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStudentExercise_argsStandardSchemeFactory implements SchemeFactory {
      public getStudentExercise_argsStandardScheme getScheme() {
        return new getStudentExercise_argsStandardScheme();
      }
    }

    private static class getStudentExercise_argsStandardScheme extends StandardScheme<getStudentExercise_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStudentExercise_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.student_id = iprot.readI32();
                struct.setStudent_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ETYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.etype = STudentExerciseType.findByValue(iprot.readI32());
                struct.setEtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEYWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keyword = iprot.readString();
                struct.setKeywordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TFROM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tfrom = iprot.readString();
                struct.setTfromIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tto = iprot.readString();
                struct.setTtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStudentExercise_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STUDENT_ID_FIELD_DESC);
        oprot.writeI32(struct.student_id);
        oprot.writeFieldEnd();
        if (struct.etype != null) {
          oprot.writeFieldBegin(ETYPE_FIELD_DESC);
          oprot.writeI32(struct.etype.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.keyword != null) {
          oprot.writeFieldBegin(KEYWORD_FIELD_DESC);
          oprot.writeString(struct.keyword);
          oprot.writeFieldEnd();
        }
        if (struct.tfrom != null) {
          oprot.writeFieldBegin(TFROM_FIELD_DESC);
          oprot.writeString(struct.tfrom);
          oprot.writeFieldEnd();
        }
        if (struct.tto != null) {
          oprot.writeFieldBegin(TTO_FIELD_DESC);
          oprot.writeString(struct.tto);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStudentExercise_argsTupleSchemeFactory implements SchemeFactory {
      public getStudentExercise_argsTupleScheme getScheme() {
        return new getStudentExercise_argsTupleScheme();
      }
    }

    private static class getStudentExercise_argsTupleScheme extends TupleScheme<getStudentExercise_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStudentExercise_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStudent_id()) {
          optionals.set(0);
        }
        if (struct.isSetEtype()) {
          optionals.set(1);
        }
        if (struct.isSetKeyword()) {
          optionals.set(2);
        }
        if (struct.isSetTfrom()) {
          optionals.set(3);
        }
        if (struct.isSetTto()) {
          optionals.set(4);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetStudent_id()) {
          oprot.writeI32(struct.student_id);
        }
        if (struct.isSetEtype()) {
          oprot.writeI32(struct.etype.getValue());
        }
        if (struct.isSetKeyword()) {
          oprot.writeString(struct.keyword);
        }
        if (struct.isSetTfrom()) {
          oprot.writeString(struct.tfrom);
        }
        if (struct.isSetTto()) {
          oprot.writeString(struct.tto);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStudentExercise_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.student_id = iprot.readI32();
          struct.setStudent_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.etype = STudentExerciseType.findByValue(iprot.readI32());
          struct.setEtypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.keyword = iprot.readString();
          struct.setKeywordIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tfrom = iprot.readString();
          struct.setTfromIsSet(true);
        }
        if (incoming.get(4)) {
          struct.tto = iprot.readString();
          struct.setTtoIsSet(true);
        }
        if (incoming.get(5)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class getStudentExercise_result implements org.apache.thrift.TBase<getStudentExercise_result, getStudentExercise_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStudentExercise_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStudentExercise_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("EXerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStudentExercise_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStudentExercise_resultTupleSchemeFactory());
    }

    public List<TStudentExercise> success; // required
    public TPlasoException EXerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXERROR((short)1, "EXerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXERROR
            return EXERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStudentExercise.class))));
      tmpMap.put(_Fields.EXERROR, new org.apache.thrift.meta_data.FieldMetaData("EXerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStudentExercise_result.class, metaDataMap);
    }

    public getStudentExercise_result() {
    }

    public getStudentExercise_result(
      List<TStudentExercise> success,
      TPlasoException EXerror)
    {
      this();
      this.success = success;
      this.EXerror = EXerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStudentExercise_result(getStudentExercise_result other) {
      if (other.isSetSuccess()) {
        List<TStudentExercise> __this__success = new ArrayList<TStudentExercise>(other.success.size());
        for (TStudentExercise other_element : other.success) {
          __this__success.add(new TStudentExercise(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEXerror()) {
        this.EXerror = new TPlasoException(other.EXerror);
      }
    }

    public getStudentExercise_result deepCopy() {
      return new getStudentExercise_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.EXerror = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TStudentExercise> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TStudentExercise elem) {
      if (this.success == null) {
        this.success = new ArrayList<TStudentExercise>();
      }
      this.success.add(elem);
    }

    public List<TStudentExercise> getSuccess() {
      return this.success;
    }

    public getStudentExercise_result setSuccess(List<TStudentExercise> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getEXerror() {
      return this.EXerror;
    }

    public getStudentExercise_result setEXerror(TPlasoException EXerror) {
      this.EXerror = EXerror;
      return this;
    }

    public void unsetEXerror() {
      this.EXerror = null;
    }

    /** Returns true if field EXerror is set (has been assigned a value) and false otherwise */
    public boolean isSetEXerror() {
      return this.EXerror != null;
    }

    public void setEXerrorIsSet(boolean value) {
      if (!value) {
        this.EXerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TStudentExercise>)value);
        }
        break;

      case EXERROR:
        if (value == null) {
          unsetEXerror();
        } else {
          setEXerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXERROR:
        return getEXerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXERROR:
        return isSetEXerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStudentExercise_result)
        return this.equals((getStudentExercise_result)that);
      return false;
    }

    public boolean equals(getStudentExercise_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_EXerror = true && this.isSetEXerror();
      boolean that_present_EXerror = true && that.isSetEXerror();
      if (this_present_EXerror || that_present_EXerror) {
        if (!(this_present_EXerror && that_present_EXerror))
          return false;
        if (!this.EXerror.equals(that.EXerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStudentExercise_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEXerror()).compareTo(other.isSetEXerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEXerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EXerror, other.EXerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStudentExercise_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("EXerror:");
      if (this.EXerror == null) {
        sb.append("null");
      } else {
        sb.append(this.EXerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStudentExercise_resultStandardSchemeFactory implements SchemeFactory {
      public getStudentExercise_resultStandardScheme getScheme() {
        return new getStudentExercise_resultStandardScheme();
      }
    }

    private static class getStudentExercise_resultStandardScheme extends StandardScheme<getStudentExercise_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStudentExercise_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                  struct.success = new ArrayList<TStudentExercise>(_list232.size);
                  for (int _i233 = 0; _i233 < _list232.size; ++_i233)
                  {
                    TStudentExercise _elem234;
                    _elem234 = new TStudentExercise();
                    _elem234.read(iprot);
                    struct.success.add(_elem234);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.EXerror = new TPlasoException();
                struct.EXerror.read(iprot);
                struct.setEXerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStudentExercise_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TStudentExercise _iter235 : struct.success)
            {
              _iter235.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.EXerror != null) {
          oprot.writeFieldBegin(EXERROR_FIELD_DESC);
          struct.EXerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStudentExercise_resultTupleSchemeFactory implements SchemeFactory {
      public getStudentExercise_resultTupleScheme getScheme() {
        return new getStudentExercise_resultTupleScheme();
      }
    }

    private static class getStudentExercise_resultTupleScheme extends TupleScheme<getStudentExercise_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStudentExercise_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEXerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TStudentExercise _iter236 : struct.success)
            {
              _iter236.write(oprot);
            }
          }
        }
        if (struct.isSetEXerror()) {
          struct.EXerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStudentExercise_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list237 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TStudentExercise>(_list237.size);
            for (int _i238 = 0; _i238 < _list237.size; ++_i238)
            {
              TStudentExercise _elem239;
              _elem239 = new TStudentExercise();
              _elem239.read(iprot);
              struct.success.add(_elem239);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.EXerror = new TPlasoException();
          struct.EXerror.read(iprot);
          struct.setEXerrorIsSet(true);
        }
      }
    }

  }

  public static class saveStudentExecise_args implements org.apache.thrift.TBase<saveStudentExecise_args, saveStudentExecise_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveStudentExecise_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveStudentExecise_args");

    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveStudentExecise_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveStudentExecise_argsTupleSchemeFactory());
    }

    public TStudentExercise te; // required
    public String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TE((short)1, "te"),
      ACCESS_TOKEN((short)4, "access_token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TE
            return TE;
          case 4: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStudentExercise.class)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveStudentExecise_args.class, metaDataMap);
    }

    public saveStudentExecise_args() {
    }

    public saveStudentExecise_args(
      TStudentExercise te,
      String access_token)
    {
      this();
      this.te = te;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveStudentExecise_args(saveStudentExecise_args other) {
      if (other.isSetTe()) {
        this.te = new TStudentExercise(other.te);
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public saveStudentExecise_args deepCopy() {
      return new saveStudentExecise_args(this);
    }

    @Override
    public void clear() {
      this.te = null;
      this.access_token = null;
    }

    public TStudentExercise getTe() {
      return this.te;
    }

    public saveStudentExecise_args setTe(TStudentExercise te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public String getAccess_token() {
      return this.access_token;
    }

    public saveStudentExecise_args setAccess_token(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((TStudentExercise)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TE:
        return getTe();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TE:
        return isSetTe();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveStudentExecise_args)
        return this.equals((saveStudentExecise_args)that);
      return false;
    }

    public boolean equals(saveStudentExecise_args that) {
      if (that == null)
        return false;

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(saveStudentExecise_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveStudentExecise_args(");
      boolean first = true;

      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (te != null) {
        te.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveStudentExecise_argsStandardSchemeFactory implements SchemeFactory {
      public saveStudentExecise_argsStandardScheme getScheme() {
        return new saveStudentExecise_argsStandardScheme();
      }
    }

    private static class saveStudentExecise_argsStandardScheme extends StandardScheme<saveStudentExecise_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveStudentExecise_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new TStudentExercise();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveStudentExecise_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveStudentExecise_argsTupleSchemeFactory implements SchemeFactory {
      public saveStudentExecise_argsTupleScheme getScheme() {
        return new saveStudentExecise_argsTupleScheme();
      }
    }

    private static class saveStudentExecise_argsTupleScheme extends TupleScheme<saveStudentExecise_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveStudentExecise_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTe()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveStudentExecise_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.te = new TStudentExercise();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

  }

  public static class saveStudentExecise_result implements org.apache.thrift.TBase<saveStudentExecise_result, saveStudentExecise_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveStudentExecise_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveStudentExecise_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("EXerror", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveStudentExecise_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveStudentExecise_resultTupleSchemeFactory());
    }

    public TStudentExercise success; // required
    public TPlasoException EXerror; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXERROR((short)1, "EXerror");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXERROR
            return EXERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStudentExercise.class)));
      tmpMap.put(_Fields.EXERROR, new org.apache.thrift.meta_data.FieldMetaData("EXerror", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveStudentExecise_result.class, metaDataMap);
    }

    public saveStudentExecise_result() {
    }

    public saveStudentExecise_result(
      TStudentExercise success,
      TPlasoException EXerror)
    {
      this();
      this.success = success;
      this.EXerror = EXerror;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveStudentExecise_result(saveStudentExecise_result other) {
      if (other.isSetSuccess()) {
        this.success = new TStudentExercise(other.success);
      }
      if (other.isSetEXerror()) {
        this.EXerror = new TPlasoException(other.EXerror);
      }
    }

    public saveStudentExecise_result deepCopy() {
      return new saveStudentExecise_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.EXerror = null;
    }

    public TStudentExercise getSuccess() {
      return this.success;
    }

    public saveStudentExecise_result setSuccess(TStudentExercise success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TPlasoException getEXerror() {
      return this.EXerror;
    }

    public saveStudentExecise_result setEXerror(TPlasoException EXerror) {
      this.EXerror = EXerror;
      return this;
    }

    public void unsetEXerror() {
      this.EXerror = null;
    }

    /** Returns true if field EXerror is set (has been assigned a value) and false otherwise */
    public boolean isSetEXerror() {
      return this.EXerror != null;
    }

    public void setEXerrorIsSet(boolean value) {
      if (!value) {
        this.EXerror = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TStudentExercise)value);
        }
        break;

      case EXERROR:
        if (value == null) {
          unsetEXerror();
        } else {
          setEXerror((TPlasoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXERROR:
        return getEXerror();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXERROR:
        return isSetEXerror();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveStudentExecise_result)
        return this.equals((saveStudentExecise_result)that);
      return false;
    }

    public boolean equals(saveStudentExecise_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_EXerror = true && this.isSetEXerror();
      boolean that_present_EXerror = true && that.isSetEXerror();
      if (this_present_EXerror || that_present_EXerror) {
        if (!(this_present_EXerror && that_present_EXerror))
          return false;
        if (!this.EXerror.equals(that.EXerror))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(saveStudentExecise_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEXerror()).compareTo(other.isSetEXerror());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEXerror()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EXerror, other.EXerror);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveStudentExecise_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("EXerror:");
      if (this.EXerror == null) {
        sb.append("null");
      } else {
        sb.append(this.EXerror);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveStudentExecise_resultStandardSchemeFactory implements SchemeFactory {
      public saveStudentExecise_resultStandardScheme getScheme() {
        return new saveStudentExecise_resultStandardScheme();
      }
    }

    private static class saveStudentExecise_resultStandardScheme extends StandardScheme<saveStudentExecise_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveStudentExecise_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TStudentExercise();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.EXerror = new TPlasoException();
                struct.EXerror.read(iprot);
                struct.setEXerrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveStudentExecise_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.EXerror != null) {
          oprot.writeFieldBegin(EXERROR_FIELD_DESC);
          struct.EXerror.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveStudentExecise_resultTupleSchemeFactory implements SchemeFactory {
      public saveStudentExecise_resultTupleScheme getScheme() {
        return new saveStudentExecise_resultTupleScheme();
      }
    }

    private static class saveStudentExecise_resultTupleScheme extends TupleScheme<saveStudentExecise_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveStudentExecise_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEXerror()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEXerror()) {
          struct.EXerror.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveStudentExecise_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TStudentExercise();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.EXerror = new TPlasoException();
          struct.EXerror.read(iprot);
          struct.setEXerrorIsSet(true);
        }
      }
    }

  }

}
